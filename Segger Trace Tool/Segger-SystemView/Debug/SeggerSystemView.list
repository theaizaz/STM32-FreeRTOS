
SeggerSystemView.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005758  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080058f8  080058f8  000068f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a64  08005a64  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  08005a64  08005a64  00006a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a6c  08005a6c  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a6c  08005a6c  00006a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a70  08005a70  00006a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005a74  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009960  20000070  08005ae4  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200099d0  08005ae4  000079d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012363  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002afd  00000000  00000000  00019403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  0001bf00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000db3  00000000  00000000  0001d0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019122  00000000  00000000  0001de8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001317d  00000000  00000000  00036fad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ace9  00000000  00000000  0004a12a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4e13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051b4  00000000  00000000  000e4e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a8  00000000  00000000  000ea00c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080058e0 	.word	0x080058e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080058e0 	.word	0x080058e0

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	200082ac 	.word	0x200082ac
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000330:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000334:	f000 b96a 	b.w	800060c <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	460c      	mov	r4, r1
 8000358:	2b00      	cmp	r3, #0
 800035a:	d14e      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035c:	4694      	mov	ip, r2
 800035e:	458c      	cmp	ip, r1
 8000360:	4686      	mov	lr, r0
 8000362:	fab2 f282 	clz	r2, r2
 8000366:	d962      	bls.n	800042e <__udivmoddi4+0xde>
 8000368:	b14a      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036a:	f1c2 0320 	rsb	r3, r2, #32
 800036e:	4091      	lsls	r1, r2
 8000370:	fa20 f303 	lsr.w	r3, r0, r3
 8000374:	fa0c fc02 	lsl.w	ip, ip, r2
 8000378:	4319      	orrs	r1, r3
 800037a:	fa00 fe02 	lsl.w	lr, r0, r2
 800037e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000382:	fa1f f68c 	uxth.w	r6, ip
 8000386:	fbb1 f4f7 	udiv	r4, r1, r7
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb07 1114 	mls	r1, r7, r4, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb04 f106 	mul.w	r1, r4, r6
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80003a6:	f080 8112 	bcs.w	80005ce <__udivmoddi4+0x27e>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 810f 	bls.w	80005ce <__udivmoddi4+0x27e>
 80003b0:	3c02      	subs	r4, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a59      	subs	r1, r3, r1
 80003b6:	fa1f f38e 	uxth.w	r3, lr
 80003ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80003be:	fb07 1110 	mls	r1, r7, r0, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb00 f606 	mul.w	r6, r0, r6
 80003ca:	429e      	cmp	r6, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x94>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003d6:	f080 80fc 	bcs.w	80005d2 <__udivmoddi4+0x282>
 80003da:	429e      	cmp	r6, r3
 80003dc:	f240 80f9 	bls.w	80005d2 <__udivmoddi4+0x282>
 80003e0:	4463      	add	r3, ip
 80003e2:	3802      	subs	r0, #2
 80003e4:	1b9b      	subs	r3, r3, r6
 80003e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ea:	2100      	movs	r1, #0
 80003ec:	b11d      	cbz	r5, 80003f6 <__udivmoddi4+0xa6>
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	2200      	movs	r2, #0
 80003f2:	e9c5 3200 	strd	r3, r2, [r5]
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d905      	bls.n	800040a <__udivmoddi4+0xba>
 80003fe:	b10d      	cbz	r5, 8000404 <__udivmoddi4+0xb4>
 8000400:	e9c5 0100 	strd	r0, r1, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	4608      	mov	r0, r1
 8000408:	e7f5      	b.n	80003f6 <__udivmoddi4+0xa6>
 800040a:	fab3 f183 	clz	r1, r3
 800040e:	2900      	cmp	r1, #0
 8000410:	d146      	bne.n	80004a0 <__udivmoddi4+0x150>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d302      	bcc.n	800041c <__udivmoddi4+0xcc>
 8000416:	4290      	cmp	r0, r2
 8000418:	f0c0 80f0 	bcc.w	80005fc <__udivmoddi4+0x2ac>
 800041c:	1a86      	subs	r6, r0, r2
 800041e:	eb64 0303 	sbc.w	r3, r4, r3
 8000422:	2001      	movs	r0, #1
 8000424:	2d00      	cmp	r5, #0
 8000426:	d0e6      	beq.n	80003f6 <__udivmoddi4+0xa6>
 8000428:	e9c5 6300 	strd	r6, r3, [r5]
 800042c:	e7e3      	b.n	80003f6 <__udivmoddi4+0xa6>
 800042e:	2a00      	cmp	r2, #0
 8000430:	f040 8090 	bne.w	8000554 <__udivmoddi4+0x204>
 8000434:	eba1 040c 	sub.w	r4, r1, ip
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	2101      	movs	r1, #1
 8000442:	fbb4 f6f8 	udiv	r6, r4, r8
 8000446:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800044a:	fb08 4416 	mls	r4, r8, r6, r4
 800044e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000452:	fb07 f006 	mul.w	r0, r7, r6
 8000456:	4298      	cmp	r0, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x11c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x11a>
 8000464:	4298      	cmp	r0, r3
 8000466:	f200 80cd 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 800046a:	4626      	mov	r6, r4
 800046c:	1a1c      	subs	r4, r3, r0
 800046e:	fa1f f38e 	uxth.w	r3, lr
 8000472:	fbb4 f0f8 	udiv	r0, r4, r8
 8000476:	fb08 4410 	mls	r4, r8, r0, r4
 800047a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800047e:	fb00 f707 	mul.w	r7, r0, r7
 8000482:	429f      	cmp	r7, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x148>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800048e:	d202      	bcs.n	8000496 <__udivmoddi4+0x146>
 8000490:	429f      	cmp	r7, r3
 8000492:	f200 80b0 	bhi.w	80005f6 <__udivmoddi4+0x2a6>
 8000496:	4620      	mov	r0, r4
 8000498:	1bdb      	subs	r3, r3, r7
 800049a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800049e:	e7a5      	b.n	80003ec <__udivmoddi4+0x9c>
 80004a0:	f1c1 0620 	rsb	r6, r1, #32
 80004a4:	408b      	lsls	r3, r1
 80004a6:	fa22 f706 	lsr.w	r7, r2, r6
 80004aa:	431f      	orrs	r7, r3
 80004ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80004b0:	fa04 f301 	lsl.w	r3, r4, r1
 80004b4:	ea43 030c 	orr.w	r3, r3, ip
 80004b8:	40f4      	lsrs	r4, r6
 80004ba:	fa00 f801 	lsl.w	r8, r0, r1
 80004be:	0c38      	lsrs	r0, r7, #16
 80004c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004c4:	fbb4 fef0 	udiv	lr, r4, r0
 80004c8:	fa1f fc87 	uxth.w	ip, r7
 80004cc:	fb00 441e 	mls	r4, r0, lr, r4
 80004d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d4:	fb0e f90c 	mul.w	r9, lr, ip
 80004d8:	45a1      	cmp	r9, r4
 80004da:	fa02 f201 	lsl.w	r2, r2, r1
 80004de:	d90a      	bls.n	80004f6 <__udivmoddi4+0x1a6>
 80004e0:	193c      	adds	r4, r7, r4
 80004e2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004e6:	f080 8084 	bcs.w	80005f2 <__udivmoddi4+0x2a2>
 80004ea:	45a1      	cmp	r9, r4
 80004ec:	f240 8081 	bls.w	80005f2 <__udivmoddi4+0x2a2>
 80004f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004f4:	443c      	add	r4, r7
 80004f6:	eba4 0409 	sub.w	r4, r4, r9
 80004fa:	fa1f f983 	uxth.w	r9, r3
 80004fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000502:	fb00 4413 	mls	r4, r0, r3, r4
 8000506:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800050a:	fb03 fc0c 	mul.w	ip, r3, ip
 800050e:	45a4      	cmp	ip, r4
 8000510:	d907      	bls.n	8000522 <__udivmoddi4+0x1d2>
 8000512:	193c      	adds	r4, r7, r4
 8000514:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000518:	d267      	bcs.n	80005ea <__udivmoddi4+0x29a>
 800051a:	45a4      	cmp	ip, r4
 800051c:	d965      	bls.n	80005ea <__udivmoddi4+0x29a>
 800051e:	3b02      	subs	r3, #2
 8000520:	443c      	add	r4, r7
 8000522:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000526:	fba0 9302 	umull	r9, r3, r0, r2
 800052a:	eba4 040c 	sub.w	r4, r4, ip
 800052e:	429c      	cmp	r4, r3
 8000530:	46ce      	mov	lr, r9
 8000532:	469c      	mov	ip, r3
 8000534:	d351      	bcc.n	80005da <__udivmoddi4+0x28a>
 8000536:	d04e      	beq.n	80005d6 <__udivmoddi4+0x286>
 8000538:	b155      	cbz	r5, 8000550 <__udivmoddi4+0x200>
 800053a:	ebb8 030e 	subs.w	r3, r8, lr
 800053e:	eb64 040c 	sbc.w	r4, r4, ip
 8000542:	fa04 f606 	lsl.w	r6, r4, r6
 8000546:	40cb      	lsrs	r3, r1
 8000548:	431e      	orrs	r6, r3
 800054a:	40cc      	lsrs	r4, r1
 800054c:	e9c5 6400 	strd	r6, r4, [r5]
 8000550:	2100      	movs	r1, #0
 8000552:	e750      	b.n	80003f6 <__udivmoddi4+0xa6>
 8000554:	f1c2 0320 	rsb	r3, r2, #32
 8000558:	fa20 f103 	lsr.w	r1, r0, r3
 800055c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000560:	fa24 f303 	lsr.w	r3, r4, r3
 8000564:	4094      	lsls	r4, r2
 8000566:	430c      	orrs	r4, r1
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000570:	fa1f f78c 	uxth.w	r7, ip
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3110 	mls	r1, r8, r0, r3
 800057c:	0c23      	lsrs	r3, r4, #16
 800057e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000582:	fb00 f107 	mul.w	r1, r0, r7
 8000586:	4299      	cmp	r1, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x24c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000592:	d22c      	bcs.n	80005ee <__udivmoddi4+0x29e>
 8000594:	4299      	cmp	r1, r3
 8000596:	d92a      	bls.n	80005ee <__udivmoddi4+0x29e>
 8000598:	3802      	subs	r0, #2
 800059a:	4463      	add	r3, ip
 800059c:	1a5b      	subs	r3, r3, r1
 800059e:	b2a4      	uxth	r4, r4
 80005a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005a4:	fb08 3311 	mls	r3, r8, r1, r3
 80005a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005ac:	fb01 f307 	mul.w	r3, r1, r7
 80005b0:	42a3      	cmp	r3, r4
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x276>
 80005b4:	eb1c 0404 	adds.w	r4, ip, r4
 80005b8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005bc:	d213      	bcs.n	80005e6 <__udivmoddi4+0x296>
 80005be:	42a3      	cmp	r3, r4
 80005c0:	d911      	bls.n	80005e6 <__udivmoddi4+0x296>
 80005c2:	3902      	subs	r1, #2
 80005c4:	4464      	add	r4, ip
 80005c6:	1ae4      	subs	r4, r4, r3
 80005c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005cc:	e739      	b.n	8000442 <__udivmoddi4+0xf2>
 80005ce:	4604      	mov	r4, r0
 80005d0:	e6f0      	b.n	80003b4 <__udivmoddi4+0x64>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e706      	b.n	80003e4 <__udivmoddi4+0x94>
 80005d6:	45c8      	cmp	r8, r9
 80005d8:	d2ae      	bcs.n	8000538 <__udivmoddi4+0x1e8>
 80005da:	ebb9 0e02 	subs.w	lr, r9, r2
 80005de:	eb63 0c07 	sbc.w	ip, r3, r7
 80005e2:	3801      	subs	r0, #1
 80005e4:	e7a8      	b.n	8000538 <__udivmoddi4+0x1e8>
 80005e6:	4631      	mov	r1, r6
 80005e8:	e7ed      	b.n	80005c6 <__udivmoddi4+0x276>
 80005ea:	4603      	mov	r3, r0
 80005ec:	e799      	b.n	8000522 <__udivmoddi4+0x1d2>
 80005ee:	4630      	mov	r0, r6
 80005f0:	e7d4      	b.n	800059c <__udivmoddi4+0x24c>
 80005f2:	46d6      	mov	lr, sl
 80005f4:	e77f      	b.n	80004f6 <__udivmoddi4+0x1a6>
 80005f6:	4463      	add	r3, ip
 80005f8:	3802      	subs	r0, #2
 80005fa:	e74d      	b.n	8000498 <__udivmoddi4+0x148>
 80005fc:	4606      	mov	r6, r0
 80005fe:	4623      	mov	r3, r4
 8000600:	4608      	mov	r0, r1
 8000602:	e70f      	b.n	8000424 <__udivmoddi4+0xd4>
 8000604:	3e02      	subs	r6, #2
 8000606:	4463      	add	r3, ip
 8000608:	e730      	b.n	800046c <__udivmoddi4+0x11c>
 800060a:	bf00      	nop

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fa7b 	bl	8000b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f853 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 f8b1 	bl	8000784 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

//  DWT_CTRL |= (1 < 0);
  DWT_CTRL |= ( 1 << 0 ); /* make 0th bit as 1 */
 8000622:	4b21      	ldr	r3, [pc, #132]	@ (80006a8 <main+0x98>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a20      	ldr	r2, [pc, #128]	@ (80006a8 <main+0x98>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800062e:	f002 fce5 	bl	8002ffc <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000632:	f003 fc99 	bl	8003f68 <SEGGER_SYSVIEW_Start>


  status = xTaskCreate(hello1Func,"Hello 1",200,NULL,0,&Hello1_handler);
 8000636:	4b1d      	ldr	r3, [pc, #116]	@ (80006ac <main+0x9c>)
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	2300      	movs	r3, #0
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2300      	movs	r3, #0
 8000640:	22c8      	movs	r2, #200	@ 0xc8
 8000642:	491b      	ldr	r1, [pc, #108]	@ (80006b0 <main+0xa0>)
 8000644:	481b      	ldr	r0, [pc, #108]	@ (80006b4 <main+0xa4>)
 8000646:	f001 fac8 	bl	8001bda <xTaskCreate>
 800064a:	60f8      	str	r0, [r7, #12]
//
  configASSERT(status == pdPASS); /* check if task is created successfully */
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d00b      	beq.n	800066a <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000656:	f383 8811 	msr	BASEPRI, r3
 800065a:	f3bf 8f6f 	isb	sy
 800065e:	f3bf 8f4f 	dsb	sy
 8000662:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000664:	bf00      	nop
 8000666:	bf00      	nop
 8000668:	e7fd      	b.n	8000666 <main+0x56>
//
  status = xTaskCreate(hello2Func,"Hello 2",200,NULL,0,&Hello2_handler);
 800066a:	4b13      	ldr	r3, [pc, #76]	@ (80006b8 <main+0xa8>)
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	2300      	movs	r3, #0
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2300      	movs	r3, #0
 8000674:	22c8      	movs	r2, #200	@ 0xc8
 8000676:	4911      	ldr	r1, [pc, #68]	@ (80006bc <main+0xac>)
 8000678:	4811      	ldr	r0, [pc, #68]	@ (80006c0 <main+0xb0>)
 800067a:	f001 faae 	bl	8001bda <xTaskCreate>
 800067e:	60f8      	str	r0, [r7, #12]
//
  configASSERT(status == pdPASS);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d00b      	beq.n	800069e <main+0x8e>
        __asm volatile
 8000686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800068a:	f383 8811 	msr	BASEPRI, r3
 800068e:	f3bf 8f6f 	isb	sy
 8000692:	f3bf 8f4f 	dsb	sy
 8000696:	607b      	str	r3, [r7, #4]
    }
 8000698:	bf00      	nop
 800069a:	bf00      	nop
 800069c:	e7fd      	b.n	800069a <main+0x8a>

  vTaskStartScheduler();
 800069e:	f001 fc27 	bl	8001ef0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a2:	bf00      	nop
 80006a4:	e7fd      	b.n	80006a2 <main+0x92>
 80006a6:	bf00      	nop
 80006a8:	e0001000 	.word	0xe0001000
 80006ac:	2000008c 	.word	0x2000008c
 80006b0:	080058f8 	.word	0x080058f8
 80006b4:	080007f1 	.word	0x080007f1
 80006b8:	20000090 	.word	0x20000090
 80006bc:	08005900 	.word	0x08005900
 80006c0:	08000811 	.word	0x08000811

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	@ 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	@ 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f004 fae7 	bl	8004ca6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	4b23      	ldr	r3, [pc, #140]	@ (800077c <SystemClock_Config+0xb8>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f0:	4a22      	ldr	r2, [pc, #136]	@ (800077c <SystemClock_Config+0xb8>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f8:	4b20      	ldr	r3, [pc, #128]	@ (800077c <SystemClock_Config+0xb8>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b1d      	ldr	r3, [pc, #116]	@ (8000780 <SystemClock_Config+0xbc>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000710:	4a1b      	ldr	r2, [pc, #108]	@ (8000780 <SystemClock_Config+0xbc>)
 8000712:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b19      	ldr	r3, [pc, #100]	@ (8000780 <SystemClock_Config+0xbc>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000724:	2302      	movs	r3, #2
 8000726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072c:	2310      	movs	r3, #16
 800072e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000730:	2300      	movs	r3, #0
 8000732:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000734:	f107 0320 	add.w	r3, r7, #32
 8000738:	4618      	mov	r0, r3
 800073a:	f000 fb0d 	bl	8000d58 <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000744:	f000 f886 	bl	8000854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000748:	230f      	movs	r3, #15
 800074a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f000 fd70 	bl	8001248 <HAL_RCC_ClockConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800076e:	f000 f871 	bl	8000854 <Error_Handler>
  }
}
 8000772:	bf00      	nop
 8000774:	3750      	adds	r7, #80	@ 0x50
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40007000 	.word	0x40007000

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	4b17      	ldr	r3, [pc, #92]	@ (80007ec <MX_GPIO_Init+0x68>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a16      	ldr	r2, [pc, #88]	@ (80007ec <MX_GPIO_Init+0x68>)
 8000794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <MX_GPIO_Init+0x68>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	4b10      	ldr	r3, [pc, #64]	@ (80007ec <MX_GPIO_Init+0x68>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a0f      	ldr	r2, [pc, #60]	@ (80007ec <MX_GPIO_Init+0x68>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b0d      	ldr	r3, [pc, #52]	@ (80007ec <MX_GPIO_Init+0x68>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <MX_GPIO_Init+0x68>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a08      	ldr	r2, [pc, #32]	@ (80007ec <MX_GPIO_Init+0x68>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <MX_GPIO_Init+0x68>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007de:	bf00      	nop
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800

080007f0 <hello1Func>:

/* USER CODE BEGIN 4 */


static void hello1Func(void *pvParameter){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	const char* str = "Hello 1\n";
 80007f8:	4b03      	ldr	r3, [pc, #12]	@ (8000808 <hello1Func+0x18>)
 80007fa:	60fb      	str	r3, [r7, #12]
	for(;;){
		printf("%s",str);
 80007fc:	68f9      	ldr	r1, [r7, #12]
 80007fe:	4803      	ldr	r0, [pc, #12]	@ (800080c <hello1Func+0x1c>)
 8000800:	f004 f9ec 	bl	8004bdc <iprintf>
 8000804:	e7fa      	b.n	80007fc <hello1Func+0xc>
 8000806:	bf00      	nop
 8000808:	08005908 	.word	0x08005908
 800080c:	08005914 	.word	0x08005914

08000810 <hello2Func>:
	}
	vTaskDelete(NULL);
}

static void hello2Func(void *pvParameter){
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	const char* str = "Hello 2\n";
 8000818:	4b03      	ldr	r3, [pc, #12]	@ (8000828 <hello2Func+0x18>)
 800081a:	60fb      	str	r3, [r7, #12]
	for(;;){
		printf("%s",str);
 800081c:	68f9      	ldr	r1, [r7, #12]
 800081e:	4803      	ldr	r0, [pc, #12]	@ (800082c <hello2Func+0x1c>)
 8000820:	f004 f9dc 	bl	8004bdc <iprintf>
 8000824:	e7fa      	b.n	800081c <hello2Func+0xc>
 8000826:	bf00      	nop
 8000828:	08005918 	.word	0x08005918
 800082c:	08005914 	.word	0x08005914

08000830 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a04      	ldr	r2, [pc, #16]	@ (8000850 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d101      	bne.n	8000846 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000842:	f000 f987 	bl	8000b54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40000c00 	.word	0x40000c00

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <Error_Handler+0x8>

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <HAL_MspInit+0x4c>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800086e:	4a0f      	ldr	r2, [pc, #60]	@ (80008ac <HAL_MspInit+0x4c>)
 8000870:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000874:	6453      	str	r3, [r2, #68]	@ 0x44
 8000876:	4b0d      	ldr	r3, [pc, #52]	@ (80008ac <HAL_MspInit+0x4c>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800087a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <HAL_MspInit+0x4c>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088a:	4a08      	ldr	r2, [pc, #32]	@ (80008ac <HAL_MspInit+0x4c>)
 800088c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000890:	6413      	str	r3, [r2, #64]	@ 0x40
 8000892:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <HAL_MspInit+0x4c>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
    vInitPrioGroupValue();//use this
 800089e:	f002 f81d 	bl	80028dc <vInitPrioGroupValue>



  /* USER CODE END MspInit 1 */
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800

080008b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08e      	sub	sp, #56	@ 0x38
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008bc:	2300      	movs	r3, #0
 80008be:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	4b33      	ldr	r3, [pc, #204]	@ (8000994 <HAL_InitTick+0xe4>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c8:	4a32      	ldr	r2, [pc, #200]	@ (8000994 <HAL_InitTick+0xe4>)
 80008ca:	f043 0308 	orr.w	r3, r3, #8
 80008ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d0:	4b30      	ldr	r3, [pc, #192]	@ (8000994 <HAL_InitTick+0xe4>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d4:	f003 0308 	and.w	r3, r3, #8
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008dc:	f107 0210 	add.w	r2, r7, #16
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4611      	mov	r1, r2
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 fe7a 	bl	80015e0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008ec:	6a3b      	ldr	r3, [r7, #32]
 80008ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d103      	bne.n	80008fe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008f6:	f000 fe5f 	bl	80015b8 <HAL_RCC_GetPCLK1Freq>
 80008fa:	6378      	str	r0, [r7, #52]	@ 0x34
 80008fc:	e004      	b.n	8000908 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008fe:	f000 fe5b 	bl	80015b8 <HAL_RCC_GetPCLK1Freq>
 8000902:	4603      	mov	r3, r0
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800090a:	4a23      	ldr	r2, [pc, #140]	@ (8000998 <HAL_InitTick+0xe8>)
 800090c:	fba2 2303 	umull	r2, r3, r2, r3
 8000910:	0c9b      	lsrs	r3, r3, #18
 8000912:	3b01      	subs	r3, #1
 8000914:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000916:	4b21      	ldr	r3, [pc, #132]	@ (800099c <HAL_InitTick+0xec>)
 8000918:	4a21      	ldr	r2, [pc, #132]	@ (80009a0 <HAL_InitTick+0xf0>)
 800091a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 800091c:	4b1f      	ldr	r3, [pc, #124]	@ (800099c <HAL_InitTick+0xec>)
 800091e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000922:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000924:	4a1d      	ldr	r2, [pc, #116]	@ (800099c <HAL_InitTick+0xec>)
 8000926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000928:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800092a:	4b1c      	ldr	r3, [pc, #112]	@ (800099c <HAL_InitTick+0xec>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000930:	4b1a      	ldr	r3, [pc, #104]	@ (800099c <HAL_InitTick+0xec>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000936:	4b19      	ldr	r3, [pc, #100]	@ (800099c <HAL_InitTick+0xec>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 800093c:	4817      	ldr	r0, [pc, #92]	@ (800099c <HAL_InitTick+0xec>)
 800093e:	f000 fe81 	bl	8001644 <HAL_TIM_Base_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000948:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800094c:	2b00      	cmp	r3, #0
 800094e:	d11b      	bne.n	8000988 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000950:	4812      	ldr	r0, [pc, #72]	@ (800099c <HAL_InitTick+0xec>)
 8000952:	f000 fed1 	bl	80016f8 <HAL_TIM_Base_Start_IT>
 8000956:	4603      	mov	r3, r0
 8000958:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800095c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000960:	2b00      	cmp	r3, #0
 8000962:	d111      	bne.n	8000988 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000964:	2032      	movs	r0, #50	@ 0x32
 8000966:	f000 f9e9 	bl	8000d3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2b0f      	cmp	r3, #15
 800096e:	d808      	bhi.n	8000982 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000970:	2200      	movs	r2, #0
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	2032      	movs	r0, #50	@ 0x32
 8000976:	f000 f9c5 	bl	8000d04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800097a:	4a0a      	ldr	r2, [pc, #40]	@ (80009a4 <HAL_InitTick+0xf4>)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6013      	str	r3, [r2, #0]
 8000980:	e002      	b.n	8000988 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000988:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800098c:	4618      	mov	r0, r3
 800098e:	3738      	adds	r7, #56	@ 0x38
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40023800 	.word	0x40023800
 8000998:	431bde83 	.word	0x431bde83
 800099c:	20000094 	.word	0x20000094
 80009a0:	40000c00 	.word	0x40000c00
 80009a4:	20000004 	.word	0x20000004

080009a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <NMI_Handler+0x4>

080009b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <HardFault_Handler+0x4>

080009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <MemManage_Handler+0x4>

080009c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <UsageFault_Handler+0x4>

080009d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
	...

080009e0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80009e4:	4802      	ldr	r0, [pc, #8]	@ (80009f0 <TIM5_IRQHandler+0x10>)
 80009e6:	f000 fee9 	bl	80017bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000094 	.word	0x20000094

080009f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	e00a      	b.n	8000a1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a06:	f3af 8000 	nop.w
 8000a0a:	4601      	mov	r1, r0
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	1c5a      	adds	r2, r3, #1
 8000a10:	60ba      	str	r2, [r7, #8]
 8000a12:	b2ca      	uxtb	r2, r1
 8000a14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	697a      	ldr	r2, [r7, #20]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	dbf0      	blt.n	8000a06 <_read+0x12>
  }

  return len;
 8000a24:	687b      	ldr	r3, [r7, #4]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	b083      	sub	sp, #12
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
 8000a4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a56:	605a      	str	r2, [r3, #4]
  return 0;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <_isatty>:

int _isatty(int file)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a6e:	2301      	movs	r3, #1
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
	...

08000a98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a9c:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <SystemInit+0x20>)
 8000a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aa2:	4a05      	ldr	r2, [pc, #20]	@ (8000ab8 <SystemInit+0x20>)
 8000aa4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aa8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000abc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000af4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ac0:	f7ff ffea 	bl	8000a98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ac4:	480c      	ldr	r0, [pc, #48]	@ (8000af8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ac6:	490d      	ldr	r1, [pc, #52]	@ (8000afc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8000b00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000acc:	e002      	b.n	8000ad4 <LoopCopyDataInit>

08000ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad2:	3304      	adds	r3, #4

08000ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad8:	d3f9      	bcc.n	8000ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ada:	4a0a      	ldr	r2, [pc, #40]	@ (8000b04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000adc:	4c0a      	ldr	r4, [pc, #40]	@ (8000b08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae0:	e001      	b.n	8000ae6 <LoopFillZerobss>

08000ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae4:	3204      	adds	r2, #4

08000ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae8:	d3fb      	bcc.n	8000ae2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aea:	f004 f919 	bl	8004d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aee:	f7ff fd8f 	bl	8000610 <main>
  bx  lr    
 8000af2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000af4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000afc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b00:	08005a74 	.word	0x08005a74
  ldr r2, =_sbss
 8000b04:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b08:	200099d0 	.word	0x200099d0

08000b0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b0c:	e7fe      	b.n	8000b0c <ADC_IRQHandler>
	...

08000b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b14:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <HAL_Init+0x40>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0d      	ldr	r2, [pc, #52]	@ (8000b50 <HAL_Init+0x40>)
 8000b1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b20:	4b0b      	ldr	r3, [pc, #44]	@ (8000b50 <HAL_Init+0x40>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a0a      	ldr	r2, [pc, #40]	@ (8000b50 <HAL_Init+0x40>)
 8000b26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b2c:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <HAL_Init+0x40>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a07      	ldr	r2, [pc, #28]	@ (8000b50 <HAL_Init+0x40>)
 8000b32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f000 f8d8 	bl	8000cee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3e:	200f      	movs	r0, #15
 8000b40:	f7ff feb6 	bl	80008b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b44:	f7ff fe8c 	bl	8000860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023c00 	.word	0x40023c00

08000b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b58:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <HAL_IncTick+0x20>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <HAL_IncTick+0x24>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	4a04      	ldr	r2, [pc, #16]	@ (8000b78 <HAL_IncTick+0x24>)
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000008 	.word	0x20000008
 8000b78:	200000dc 	.word	0x200000dc

08000b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b80:	4b03      	ldr	r3, [pc, #12]	@ (8000b90 <HAL_GetTick+0x14>)
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	200000dc 	.word	0x200000dc

08000b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc6:	4a04      	ldr	r2, [pc, #16]	@ (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	60d3      	str	r3, [r2, #12]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be0:	4b04      	ldr	r3, [pc, #16]	@ (8000bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	0a1b      	lsrs	r3, r3, #8
 8000be6:	f003 0307 	and.w	r3, r3, #7
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	db0b      	blt.n	8000c22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	f003 021f 	and.w	r2, r3, #31
 8000c10:	4907      	ldr	r1, [pc, #28]	@ (8000c30 <__NVIC_EnableIRQ+0x38>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	095b      	lsrs	r3, r3, #5
 8000c18:	2001      	movs	r0, #1
 8000c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000e100 	.word	0xe000e100

08000c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db0a      	blt.n	8000c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	490c      	ldr	r1, [pc, #48]	@ (8000c80 <__NVIC_SetPriority+0x4c>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	0112      	lsls	r2, r2, #4
 8000c54:	b2d2      	uxtb	r2, r2
 8000c56:	440b      	add	r3, r1
 8000c58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c5c:	e00a      	b.n	8000c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4908      	ldr	r1, [pc, #32]	@ (8000c84 <__NVIC_SetPriority+0x50>)
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	f003 030f 	and.w	r3, r3, #15
 8000c6a:	3b04      	subs	r3, #4
 8000c6c:	0112      	lsls	r2, r2, #4
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	440b      	add	r3, r1
 8000c72:	761a      	strb	r2, [r3, #24]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000e100 	.word	0xe000e100
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b089      	sub	sp, #36	@ 0x24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	bf28      	it	cs
 8000ca6:	2304      	movcs	r3, #4
 8000ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3304      	adds	r3, #4
 8000cae:	2b06      	cmp	r3, #6
 8000cb0:	d902      	bls.n	8000cb8 <NVIC_EncodePriority+0x30>
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3b03      	subs	r3, #3
 8000cb6:	e000      	b.n	8000cba <NVIC_EncodePriority+0x32>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43da      	mvns	r2, r3
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	401a      	ands	r2, r3
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cda:	43d9      	mvns	r1, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	4313      	orrs	r3, r2
         );
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3724      	adds	r7, #36	@ 0x24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff ff4c 	bl	8000b94 <__NVIC_SetPriorityGrouping>
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d16:	f7ff ff61 	bl	8000bdc <__NVIC_GetPriorityGrouping>
 8000d1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	68b9      	ldr	r1, [r7, #8]
 8000d20:	6978      	ldr	r0, [r7, #20]
 8000d22:	f7ff ffb1 	bl	8000c88 <NVIC_EncodePriority>
 8000d26:	4602      	mov	r2, r0
 8000d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ff80 	bl	8000c34 <__NVIC_SetPriority>
}
 8000d34:	bf00      	nop
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff54 	bl	8000bf8 <__NVIC_EnableIRQ>
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e267      	b.n	800123a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d075      	beq.n	8000e62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000d76:	4b88      	ldr	r3, [pc, #544]	@ (8000f98 <HAL_RCC_OscConfig+0x240>)
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	f003 030c 	and.w	r3, r3, #12
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	d00c      	beq.n	8000d9c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d82:	4b85      	ldr	r3, [pc, #532]	@ (8000f98 <HAL_RCC_OscConfig+0x240>)
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000d8a:	2b08      	cmp	r3, #8
 8000d8c:	d112      	bne.n	8000db4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d8e:	4b82      	ldr	r3, [pc, #520]	@ (8000f98 <HAL_RCC_OscConfig+0x240>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000d9a:	d10b      	bne.n	8000db4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d9c:	4b7e      	ldr	r3, [pc, #504]	@ (8000f98 <HAL_RCC_OscConfig+0x240>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d05b      	beq.n	8000e60 <HAL_RCC_OscConfig+0x108>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d157      	bne.n	8000e60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	e242      	b.n	800123a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dbc:	d106      	bne.n	8000dcc <HAL_RCC_OscConfig+0x74>
 8000dbe:	4b76      	ldr	r3, [pc, #472]	@ (8000f98 <HAL_RCC_OscConfig+0x240>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a75      	ldr	r2, [pc, #468]	@ (8000f98 <HAL_RCC_OscConfig+0x240>)
 8000dc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	e01d      	b.n	8000e08 <HAL_RCC_OscConfig+0xb0>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000dd4:	d10c      	bne.n	8000df0 <HAL_RCC_OscConfig+0x98>
 8000dd6:	4b70      	ldr	r3, [pc, #448]	@ (8000f98 <HAL_RCC_OscConfig+0x240>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a6f      	ldr	r2, [pc, #444]	@ (8000f98 <HAL_RCC_OscConfig+0x240>)
 8000ddc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	4b6d      	ldr	r3, [pc, #436]	@ (8000f98 <HAL_RCC_OscConfig+0x240>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a6c      	ldr	r2, [pc, #432]	@ (8000f98 <HAL_RCC_OscConfig+0x240>)
 8000de8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dec:	6013      	str	r3, [r2, #0]
 8000dee:	e00b      	b.n	8000e08 <HAL_RCC_OscConfig+0xb0>
 8000df0:	4b69      	ldr	r3, [pc, #420]	@ (8000f98 <HAL_RCC_OscConfig+0x240>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a68      	ldr	r2, [pc, #416]	@ (8000f98 <HAL_RCC_OscConfig+0x240>)
 8000df6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	4b66      	ldr	r3, [pc, #408]	@ (8000f98 <HAL_RCC_OscConfig+0x240>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a65      	ldr	r2, [pc, #404]	@ (8000f98 <HAL_RCC_OscConfig+0x240>)
 8000e02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d013      	beq.n	8000e38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e10:	f7ff feb4 	bl	8000b7c <HAL_GetTick>
 8000e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e16:	e008      	b.n	8000e2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e18:	f7ff feb0 	bl	8000b7c <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2b64      	cmp	r3, #100	@ 0x64
 8000e24:	d901      	bls.n	8000e2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000e26:	2303      	movs	r3, #3
 8000e28:	e207      	b.n	800123a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e2a:	4b5b      	ldr	r3, [pc, #364]	@ (8000f98 <HAL_RCC_OscConfig+0x240>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d0f0      	beq.n	8000e18 <HAL_RCC_OscConfig+0xc0>
 8000e36:	e014      	b.n	8000e62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e38:	f7ff fea0 	bl	8000b7c <HAL_GetTick>
 8000e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e3e:	e008      	b.n	8000e52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e40:	f7ff fe9c 	bl	8000b7c <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	2b64      	cmp	r3, #100	@ 0x64
 8000e4c:	d901      	bls.n	8000e52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e1f3      	b.n	800123a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e52:	4b51      	ldr	r3, [pc, #324]	@ (8000f98 <HAL_RCC_OscConfig+0x240>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d1f0      	bne.n	8000e40 <HAL_RCC_OscConfig+0xe8>
 8000e5e:	e000      	b.n	8000e62 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d063      	beq.n	8000f36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000e6e:	4b4a      	ldr	r3, [pc, #296]	@ (8000f98 <HAL_RCC_OscConfig+0x240>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f003 030c 	and.w	r3, r3, #12
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d00b      	beq.n	8000e92 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e7a:	4b47      	ldr	r3, [pc, #284]	@ (8000f98 <HAL_RCC_OscConfig+0x240>)
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000e82:	2b08      	cmp	r3, #8
 8000e84:	d11c      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e86:	4b44      	ldr	r3, [pc, #272]	@ (8000f98 <HAL_RCC_OscConfig+0x240>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d116      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e92:	4b41      	ldr	r3, [pc, #260]	@ (8000f98 <HAL_RCC_OscConfig+0x240>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d005      	beq.n	8000eaa <HAL_RCC_OscConfig+0x152>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d001      	beq.n	8000eaa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e1c7      	b.n	800123a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8000f98 <HAL_RCC_OscConfig+0x240>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	4937      	ldr	r1, [pc, #220]	@ (8000f98 <HAL_RCC_OscConfig+0x240>)
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ebe:	e03a      	b.n	8000f36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d020      	beq.n	8000f0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ec8:	4b34      	ldr	r3, [pc, #208]	@ (8000f9c <HAL_RCC_OscConfig+0x244>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ece:	f7ff fe55 	bl	8000b7c <HAL_GetTick>
 8000ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ed4:	e008      	b.n	8000ee8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ed6:	f7ff fe51 	bl	8000b7c <HAL_GetTick>
 8000eda:	4602      	mov	r2, r0
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d901      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e1a8      	b.n	800123a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8000f98 <HAL_RCC_OscConfig+0x240>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d0f0      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef4:	4b28      	ldr	r3, [pc, #160]	@ (8000f98 <HAL_RCC_OscConfig+0x240>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	4925      	ldr	r1, [pc, #148]	@ (8000f98 <HAL_RCC_OscConfig+0x240>)
 8000f04:	4313      	orrs	r3, r2
 8000f06:	600b      	str	r3, [r1, #0]
 8000f08:	e015      	b.n	8000f36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f0a:	4b24      	ldr	r3, [pc, #144]	@ (8000f9c <HAL_RCC_OscConfig+0x244>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f10:	f7ff fe34 	bl	8000b7c <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f18:	f7ff fe30 	bl	8000b7c <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e187      	b.n	800123a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f98 <HAL_RCC_OscConfig+0x240>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1f0      	bne.n	8000f18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0308 	and.w	r3, r3, #8
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d036      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d016      	beq.n	8000f78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f4a:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <HAL_RCC_OscConfig+0x248>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f50:	f7ff fe14 	bl	8000b7c <HAL_GetTick>
 8000f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f56:	e008      	b.n	8000f6a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f58:	f7ff fe10 	bl	8000b7c <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d901      	bls.n	8000f6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e167      	b.n	800123a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <HAL_RCC_OscConfig+0x240>)
 8000f6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d0f0      	beq.n	8000f58 <HAL_RCC_OscConfig+0x200>
 8000f76:	e01b      	b.n	8000fb0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f78:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <HAL_RCC_OscConfig+0x248>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f7e:	f7ff fdfd 	bl	8000b7c <HAL_GetTick>
 8000f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f84:	e00e      	b.n	8000fa4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f86:	f7ff fdf9 	bl	8000b7c <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d907      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000f94:	2303      	movs	r3, #3
 8000f96:	e150      	b.n	800123a <HAL_RCC_OscConfig+0x4e2>
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	42470000 	.word	0x42470000
 8000fa0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fa4:	4b88      	ldr	r3, [pc, #544]	@ (80011c8 <HAL_RCC_OscConfig+0x470>)
 8000fa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1ea      	bne.n	8000f86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0304 	and.w	r3, r3, #4
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f000 8097 	beq.w	80010ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fc2:	4b81      	ldr	r3, [pc, #516]	@ (80011c8 <HAL_RCC_OscConfig+0x470>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10f      	bne.n	8000fee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	4b7d      	ldr	r3, [pc, #500]	@ (80011c8 <HAL_RCC_OscConfig+0x470>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd6:	4a7c      	ldr	r2, [pc, #496]	@ (80011c8 <HAL_RCC_OscConfig+0x470>)
 8000fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fde:	4b7a      	ldr	r3, [pc, #488]	@ (80011c8 <HAL_RCC_OscConfig+0x470>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fea:	2301      	movs	r3, #1
 8000fec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fee:	4b77      	ldr	r3, [pc, #476]	@ (80011cc <HAL_RCC_OscConfig+0x474>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d118      	bne.n	800102c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ffa:	4b74      	ldr	r3, [pc, #464]	@ (80011cc <HAL_RCC_OscConfig+0x474>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a73      	ldr	r2, [pc, #460]	@ (80011cc <HAL_RCC_OscConfig+0x474>)
 8001000:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001006:	f7ff fdb9 	bl	8000b7c <HAL_GetTick>
 800100a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800100c:	e008      	b.n	8001020 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800100e:	f7ff fdb5 	bl	8000b7c <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e10c      	b.n	800123a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001020:	4b6a      	ldr	r3, [pc, #424]	@ (80011cc <HAL_RCC_OscConfig+0x474>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0f0      	beq.n	800100e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d106      	bne.n	8001042 <HAL_RCC_OscConfig+0x2ea>
 8001034:	4b64      	ldr	r3, [pc, #400]	@ (80011c8 <HAL_RCC_OscConfig+0x470>)
 8001036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001038:	4a63      	ldr	r2, [pc, #396]	@ (80011c8 <HAL_RCC_OscConfig+0x470>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001040:	e01c      	b.n	800107c <HAL_RCC_OscConfig+0x324>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	2b05      	cmp	r3, #5
 8001048:	d10c      	bne.n	8001064 <HAL_RCC_OscConfig+0x30c>
 800104a:	4b5f      	ldr	r3, [pc, #380]	@ (80011c8 <HAL_RCC_OscConfig+0x470>)
 800104c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800104e:	4a5e      	ldr	r2, [pc, #376]	@ (80011c8 <HAL_RCC_OscConfig+0x470>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	6713      	str	r3, [r2, #112]	@ 0x70
 8001056:	4b5c      	ldr	r3, [pc, #368]	@ (80011c8 <HAL_RCC_OscConfig+0x470>)
 8001058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800105a:	4a5b      	ldr	r2, [pc, #364]	@ (80011c8 <HAL_RCC_OscConfig+0x470>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6713      	str	r3, [r2, #112]	@ 0x70
 8001062:	e00b      	b.n	800107c <HAL_RCC_OscConfig+0x324>
 8001064:	4b58      	ldr	r3, [pc, #352]	@ (80011c8 <HAL_RCC_OscConfig+0x470>)
 8001066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001068:	4a57      	ldr	r2, [pc, #348]	@ (80011c8 <HAL_RCC_OscConfig+0x470>)
 800106a:	f023 0301 	bic.w	r3, r3, #1
 800106e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001070:	4b55      	ldr	r3, [pc, #340]	@ (80011c8 <HAL_RCC_OscConfig+0x470>)
 8001072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001074:	4a54      	ldr	r2, [pc, #336]	@ (80011c8 <HAL_RCC_OscConfig+0x470>)
 8001076:	f023 0304 	bic.w	r3, r3, #4
 800107a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d015      	beq.n	80010b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001084:	f7ff fd7a 	bl	8000b7c <HAL_GetTick>
 8001088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800108a:	e00a      	b.n	80010a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800108c:	f7ff fd76 	bl	8000b7c <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800109a:	4293      	cmp	r3, r2
 800109c:	d901      	bls.n	80010a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e0cb      	b.n	800123a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010a2:	4b49      	ldr	r3, [pc, #292]	@ (80011c8 <HAL_RCC_OscConfig+0x470>)
 80010a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d0ee      	beq.n	800108c <HAL_RCC_OscConfig+0x334>
 80010ae:	e014      	b.n	80010da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b0:	f7ff fd64 	bl	8000b7c <HAL_GetTick>
 80010b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010b6:	e00a      	b.n	80010ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010b8:	f7ff fd60 	bl	8000b7c <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e0b5      	b.n	800123a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010ce:	4b3e      	ldr	r3, [pc, #248]	@ (80011c8 <HAL_RCC_OscConfig+0x470>)
 80010d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1ee      	bne.n	80010b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80010da:	7dfb      	ldrb	r3, [r7, #23]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d105      	bne.n	80010ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010e0:	4b39      	ldr	r3, [pc, #228]	@ (80011c8 <HAL_RCC_OscConfig+0x470>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e4:	4a38      	ldr	r2, [pc, #224]	@ (80011c8 <HAL_RCC_OscConfig+0x470>)
 80010e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f000 80a1 	beq.w	8001238 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80010f6:	4b34      	ldr	r3, [pc, #208]	@ (80011c8 <HAL_RCC_OscConfig+0x470>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f003 030c 	and.w	r3, r3, #12
 80010fe:	2b08      	cmp	r3, #8
 8001100:	d05c      	beq.n	80011bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	2b02      	cmp	r3, #2
 8001108:	d141      	bne.n	800118e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800110a:	4b31      	ldr	r3, [pc, #196]	@ (80011d0 <HAL_RCC_OscConfig+0x478>)
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001110:	f7ff fd34 	bl	8000b7c <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001118:	f7ff fd30 	bl	8000b7c <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e087      	b.n	800123a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800112a:	4b27      	ldr	r3, [pc, #156]	@ (80011c8 <HAL_RCC_OscConfig+0x470>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f0      	bne.n	8001118 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69da      	ldr	r2, [r3, #28]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	431a      	orrs	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001144:	019b      	lsls	r3, r3, #6
 8001146:	431a      	orrs	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800114c:	085b      	lsrs	r3, r3, #1
 800114e:	3b01      	subs	r3, #1
 8001150:	041b      	lsls	r3, r3, #16
 8001152:	431a      	orrs	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001158:	061b      	lsls	r3, r3, #24
 800115a:	491b      	ldr	r1, [pc, #108]	@ (80011c8 <HAL_RCC_OscConfig+0x470>)
 800115c:	4313      	orrs	r3, r2
 800115e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001160:	4b1b      	ldr	r3, [pc, #108]	@ (80011d0 <HAL_RCC_OscConfig+0x478>)
 8001162:	2201      	movs	r2, #1
 8001164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001166:	f7ff fd09 	bl	8000b7c <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800116e:	f7ff fd05 	bl	8000b7c <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e05c      	b.n	800123a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001180:	4b11      	ldr	r3, [pc, #68]	@ (80011c8 <HAL_RCC_OscConfig+0x470>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0f0      	beq.n	800116e <HAL_RCC_OscConfig+0x416>
 800118c:	e054      	b.n	8001238 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800118e:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <HAL_RCC_OscConfig+0x478>)
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001194:	f7ff fcf2 	bl	8000b7c <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800119c:	f7ff fcee 	bl	8000b7c <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e045      	b.n	800123a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011ae:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <HAL_RCC_OscConfig+0x470>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f0      	bne.n	800119c <HAL_RCC_OscConfig+0x444>
 80011ba:	e03d      	b.n	8001238 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d107      	bne.n	80011d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e038      	b.n	800123a <HAL_RCC_OscConfig+0x4e2>
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40007000 	.word	0x40007000
 80011d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <HAL_RCC_OscConfig+0x4ec>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d028      	beq.n	8001234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d121      	bne.n	8001234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d11a      	bne.n	8001234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001204:	4013      	ands	r3, r2
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800120a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800120c:	4293      	cmp	r3, r2
 800120e:	d111      	bne.n	8001234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800121a:	085b      	lsrs	r3, r3, #1
 800121c:	3b01      	subs	r3, #1
 800121e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001220:	429a      	cmp	r2, r3
 8001222:	d107      	bne.n	8001234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800122e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001230:	429a      	cmp	r2, r3
 8001232:	d001      	beq.n	8001238 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e000      	b.n	800123a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800

08001248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e0cc      	b.n	80013f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800125c:	4b68      	ldr	r3, [pc, #416]	@ (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	429a      	cmp	r2, r3
 8001268:	d90c      	bls.n	8001284 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800126a:	4b65      	ldr	r3, [pc, #404]	@ (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001272:	4b63      	ldr	r3, [pc, #396]	@ (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	429a      	cmp	r2, r3
 800127e:	d001      	beq.n	8001284 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e0b8      	b.n	80013f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d020      	beq.n	80012d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	2b00      	cmp	r3, #0
 800129a:	d005      	beq.n	80012a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800129c:	4b59      	ldr	r3, [pc, #356]	@ (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	4a58      	ldr	r2, [pc, #352]	@ (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80012a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80012a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0308 	and.w	r3, r3, #8
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d005      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012b4:	4b53      	ldr	r3, [pc, #332]	@ (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	4a52      	ldr	r2, [pc, #328]	@ (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80012ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80012be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012c0:	4b50      	ldr	r3, [pc, #320]	@ (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	494d      	ldr	r1, [pc, #308]	@ (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d044      	beq.n	8001368 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d107      	bne.n	80012f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e6:	4b47      	ldr	r3, [pc, #284]	@ (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d119      	bne.n	8001326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e07f      	b.n	80013f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d003      	beq.n	8001306 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001302:	2b03      	cmp	r3, #3
 8001304:	d107      	bne.n	8001316 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001306:	4b3f      	ldr	r3, [pc, #252]	@ (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d109      	bne.n	8001326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e06f      	b.n	80013f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001316:	4b3b      	ldr	r3, [pc, #236]	@ (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e067      	b.n	80013f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001326:	4b37      	ldr	r3, [pc, #220]	@ (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f023 0203 	bic.w	r2, r3, #3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	4934      	ldr	r1, [pc, #208]	@ (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 8001334:	4313      	orrs	r3, r2
 8001336:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001338:	f7ff fc20 	bl	8000b7c <HAL_GetTick>
 800133c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800133e:	e00a      	b.n	8001356 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001340:	f7ff fc1c 	bl	8000b7c <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800134e:	4293      	cmp	r3, r2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e04f      	b.n	80013f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001356:	4b2b      	ldr	r3, [pc, #172]	@ (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 020c 	and.w	r2, r3, #12
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	429a      	cmp	r2, r3
 8001366:	d1eb      	bne.n	8001340 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001368:	4b25      	ldr	r3, [pc, #148]	@ (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	429a      	cmp	r2, r3
 8001374:	d20c      	bcs.n	8001390 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001376:	4b22      	ldr	r3, [pc, #136]	@ (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800137e:	4b20      	ldr	r3, [pc, #128]	@ (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	429a      	cmp	r2, r3
 800138a:	d001      	beq.n	8001390 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e032      	b.n	80013f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b00      	cmp	r3, #0
 800139a:	d008      	beq.n	80013ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800139c:	4b19      	ldr	r3, [pc, #100]	@ (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	4916      	ldr	r1, [pc, #88]	@ (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d009      	beq.n	80013ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013ba:	4b12      	ldr	r3, [pc, #72]	@ (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	490e      	ldr	r1, [pc, #56]	@ (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013ce:	f000 f821 	bl	8001414 <HAL_RCC_GetSysClockFreq>
 80013d2:	4602      	mov	r2, r0
 80013d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	091b      	lsrs	r3, r3, #4
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	490a      	ldr	r1, [pc, #40]	@ (8001408 <HAL_RCC_ClockConfig+0x1c0>)
 80013e0:	5ccb      	ldrb	r3, [r1, r3]
 80013e2:	fa22 f303 	lsr.w	r3, r2, r3
 80013e6:	4a09      	ldr	r2, [pc, #36]	@ (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80013e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80013ea:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <HAL_RCC_ClockConfig+0x1c8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fa5e 	bl	80008b0 <HAL_InitTick>

  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40023c00 	.word	0x40023c00
 8001404:	40023800 	.word	0x40023800
 8001408:	080059f0 	.word	0x080059f0
 800140c:	20000000 	.word	0x20000000
 8001410:	20000004 	.word	0x20000004

08001414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001418:	b090      	sub	sp, #64	@ 0x40
 800141a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800141c:	2300      	movs	r3, #0
 800141e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001420:	2300      	movs	r3, #0
 8001422:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001428:	2300      	movs	r3, #0
 800142a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800142c:	4b59      	ldr	r3, [pc, #356]	@ (8001594 <HAL_RCC_GetSysClockFreq+0x180>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f003 030c 	and.w	r3, r3, #12
 8001434:	2b08      	cmp	r3, #8
 8001436:	d00d      	beq.n	8001454 <HAL_RCC_GetSysClockFreq+0x40>
 8001438:	2b08      	cmp	r3, #8
 800143a:	f200 80a1 	bhi.w	8001580 <HAL_RCC_GetSysClockFreq+0x16c>
 800143e:	2b00      	cmp	r3, #0
 8001440:	d002      	beq.n	8001448 <HAL_RCC_GetSysClockFreq+0x34>
 8001442:	2b04      	cmp	r3, #4
 8001444:	d003      	beq.n	800144e <HAL_RCC_GetSysClockFreq+0x3a>
 8001446:	e09b      	b.n	8001580 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001448:	4b53      	ldr	r3, [pc, #332]	@ (8001598 <HAL_RCC_GetSysClockFreq+0x184>)
 800144a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800144c:	e09b      	b.n	8001586 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800144e:	4b53      	ldr	r3, [pc, #332]	@ (800159c <HAL_RCC_GetSysClockFreq+0x188>)
 8001450:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001452:	e098      	b.n	8001586 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001454:	4b4f      	ldr	r3, [pc, #316]	@ (8001594 <HAL_RCC_GetSysClockFreq+0x180>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800145c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800145e:	4b4d      	ldr	r3, [pc, #308]	@ (8001594 <HAL_RCC_GetSysClockFreq+0x180>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d028      	beq.n	80014bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800146a:	4b4a      	ldr	r3, [pc, #296]	@ (8001594 <HAL_RCC_GetSysClockFreq+0x180>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	099b      	lsrs	r3, r3, #6
 8001470:	2200      	movs	r2, #0
 8001472:	623b      	str	r3, [r7, #32]
 8001474:	627a      	str	r2, [r7, #36]	@ 0x24
 8001476:	6a3b      	ldr	r3, [r7, #32]
 8001478:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800147c:	2100      	movs	r1, #0
 800147e:	4b47      	ldr	r3, [pc, #284]	@ (800159c <HAL_RCC_GetSysClockFreq+0x188>)
 8001480:	fb03 f201 	mul.w	r2, r3, r1
 8001484:	2300      	movs	r3, #0
 8001486:	fb00 f303 	mul.w	r3, r0, r3
 800148a:	4413      	add	r3, r2
 800148c:	4a43      	ldr	r2, [pc, #268]	@ (800159c <HAL_RCC_GetSysClockFreq+0x188>)
 800148e:	fba0 1202 	umull	r1, r2, r0, r2
 8001492:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001494:	460a      	mov	r2, r1
 8001496:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001498:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800149a:	4413      	add	r3, r2
 800149c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800149e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014a0:	2200      	movs	r2, #0
 80014a2:	61bb      	str	r3, [r7, #24]
 80014a4:	61fa      	str	r2, [r7, #28]
 80014a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80014ae:	f7fe ff37 	bl	8000320 <__aeabi_uldivmod>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4613      	mov	r3, r2
 80014b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014ba:	e053      	b.n	8001564 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014bc:	4b35      	ldr	r3, [pc, #212]	@ (8001594 <HAL_RCC_GetSysClockFreq+0x180>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	099b      	lsrs	r3, r3, #6
 80014c2:	2200      	movs	r2, #0
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	617a      	str	r2, [r7, #20]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80014ce:	f04f 0b00 	mov.w	fp, #0
 80014d2:	4652      	mov	r2, sl
 80014d4:	465b      	mov	r3, fp
 80014d6:	f04f 0000 	mov.w	r0, #0
 80014da:	f04f 0100 	mov.w	r1, #0
 80014de:	0159      	lsls	r1, r3, #5
 80014e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014e4:	0150      	lsls	r0, r2, #5
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	ebb2 080a 	subs.w	r8, r2, sl
 80014ee:	eb63 090b 	sbc.w	r9, r3, fp
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	f04f 0300 	mov.w	r3, #0
 80014fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80014fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001502:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001506:	ebb2 0408 	subs.w	r4, r2, r8
 800150a:	eb63 0509 	sbc.w	r5, r3, r9
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	f04f 0300 	mov.w	r3, #0
 8001516:	00eb      	lsls	r3, r5, #3
 8001518:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800151c:	00e2      	lsls	r2, r4, #3
 800151e:	4614      	mov	r4, r2
 8001520:	461d      	mov	r5, r3
 8001522:	eb14 030a 	adds.w	r3, r4, sl
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	eb45 030b 	adc.w	r3, r5, fp
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	f04f 0300 	mov.w	r3, #0
 8001536:	e9d7 4500 	ldrd	r4, r5, [r7]
 800153a:	4629      	mov	r1, r5
 800153c:	028b      	lsls	r3, r1, #10
 800153e:	4621      	mov	r1, r4
 8001540:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001544:	4621      	mov	r1, r4
 8001546:	028a      	lsls	r2, r1, #10
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800154e:	2200      	movs	r2, #0
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	60fa      	str	r2, [r7, #12]
 8001554:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001558:	f7fe fee2 	bl	8000320 <__aeabi_uldivmod>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4613      	mov	r3, r2
 8001562:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001564:	4b0b      	ldr	r3, [pc, #44]	@ (8001594 <HAL_RCC_GetSysClockFreq+0x180>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	0c1b      	lsrs	r3, r3, #16
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	3301      	adds	r3, #1
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001574:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001578:	fbb2 f3f3 	udiv	r3, r2, r3
 800157c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800157e:	e002      	b.n	8001586 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001580:	4b05      	ldr	r3, [pc, #20]	@ (8001598 <HAL_RCC_GetSysClockFreq+0x184>)
 8001582:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001584:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001588:	4618      	mov	r0, r3
 800158a:	3740      	adds	r7, #64	@ 0x40
 800158c:	46bd      	mov	sp, r7
 800158e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800
 8001598:	00f42400 	.word	0x00f42400
 800159c:	017d7840 	.word	0x017d7840

080015a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015a4:	4b03      	ldr	r3, [pc, #12]	@ (80015b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20000000 	.word	0x20000000

080015b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015bc:	f7ff fff0 	bl	80015a0 <HAL_RCC_GetHCLKFreq>
 80015c0:	4602      	mov	r2, r0
 80015c2:	4b05      	ldr	r3, [pc, #20]	@ (80015d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	0a9b      	lsrs	r3, r3, #10
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	4903      	ldr	r1, [pc, #12]	@ (80015dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80015ce:	5ccb      	ldrb	r3, [r1, r3]
 80015d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40023800 	.word	0x40023800
 80015dc:	08005a00 	.word	0x08005a00

080015e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	220f      	movs	r2, #15
 80015ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80015f0:	4b12      	ldr	r3, [pc, #72]	@ (800163c <HAL_RCC_GetClockConfig+0x5c>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 0203 	and.w	r2, r3, #3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80015fc:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <HAL_RCC_GetClockConfig+0x5c>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001608:	4b0c      	ldr	r3, [pc, #48]	@ (800163c <HAL_RCC_GetClockConfig+0x5c>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001614:	4b09      	ldr	r3, [pc, #36]	@ (800163c <HAL_RCC_GetClockConfig+0x5c>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	08db      	lsrs	r3, r3, #3
 800161a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001622:	4b07      	ldr	r3, [pc, #28]	@ (8001640 <HAL_RCC_GetClockConfig+0x60>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0207 	and.w	r2, r3, #7
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	601a      	str	r2, [r3, #0]
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800
 8001640:	40023c00 	.word	0x40023c00

08001644 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e041      	b.n	80016da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d106      	bne.n	8001670 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f839 	bl	80016e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2202      	movs	r2, #2
 8001674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3304      	adds	r3, #4
 8001680:	4619      	mov	r1, r3
 8001682:	4610      	mov	r0, r2
 8001684:	f000 f9b2 	bl	80019ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001706:	b2db      	uxtb	r3, r3
 8001708:	2b01      	cmp	r3, #1
 800170a:	d001      	beq.n	8001710 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e044      	b.n	800179a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2202      	movs	r2, #2
 8001714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68da      	ldr	r2, [r3, #12]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0201 	orr.w	r2, r2, #1
 8001726:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a1e      	ldr	r2, [pc, #120]	@ (80017a8 <HAL_TIM_Base_Start_IT+0xb0>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d018      	beq.n	8001764 <HAL_TIM_Base_Start_IT+0x6c>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800173a:	d013      	beq.n	8001764 <HAL_TIM_Base_Start_IT+0x6c>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a1a      	ldr	r2, [pc, #104]	@ (80017ac <HAL_TIM_Base_Start_IT+0xb4>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d00e      	beq.n	8001764 <HAL_TIM_Base_Start_IT+0x6c>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a19      	ldr	r2, [pc, #100]	@ (80017b0 <HAL_TIM_Base_Start_IT+0xb8>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d009      	beq.n	8001764 <HAL_TIM_Base_Start_IT+0x6c>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a17      	ldr	r2, [pc, #92]	@ (80017b4 <HAL_TIM_Base_Start_IT+0xbc>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d004      	beq.n	8001764 <HAL_TIM_Base_Start_IT+0x6c>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a16      	ldr	r2, [pc, #88]	@ (80017b8 <HAL_TIM_Base_Start_IT+0xc0>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d111      	bne.n	8001788 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2b06      	cmp	r3, #6
 8001774:	d010      	beq.n	8001798 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f042 0201 	orr.w	r2, r2, #1
 8001784:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001786:	e007      	b.n	8001798 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0201 	orr.w	r2, r2, #1
 8001796:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40010000 	.word	0x40010000
 80017ac:	40000400 	.word	0x40000400
 80017b0:	40000800 	.word	0x40000800
 80017b4:	40000c00 	.word	0x40000c00
 80017b8:	40014000 	.word	0x40014000

080017bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d020      	beq.n	8001820 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d01b      	beq.n	8001820 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f06f 0202 	mvn.w	r2, #2
 80017f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f8d2 	bl	80019b0 <HAL_TIM_IC_CaptureCallback>
 800180c:	e005      	b.n	800181a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f8c4 	bl	800199c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 f8d5 	bl	80019c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	2b00      	cmp	r3, #0
 8001828:	d020      	beq.n	800186c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	d01b      	beq.n	800186c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f06f 0204 	mvn.w	r2, #4
 800183c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2202      	movs	r2, #2
 8001842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f8ac 	bl	80019b0 <HAL_TIM_IC_CaptureCallback>
 8001858:	e005      	b.n	8001866 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f89e 	bl	800199c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f8af 	bl	80019c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	f003 0308 	and.w	r3, r3, #8
 8001872:	2b00      	cmp	r3, #0
 8001874:	d020      	beq.n	80018b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	2b00      	cmp	r3, #0
 800187e:	d01b      	beq.n	80018b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f06f 0208 	mvn.w	r2, #8
 8001888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2204      	movs	r2, #4
 800188e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 f886 	bl	80019b0 <HAL_TIM_IC_CaptureCallback>
 80018a4:	e005      	b.n	80018b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f878 	bl	800199c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 f889 	bl	80019c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	f003 0310 	and.w	r3, r3, #16
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d020      	beq.n	8001904 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f003 0310 	and.w	r3, r3, #16
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d01b      	beq.n	8001904 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f06f 0210 	mvn.w	r2, #16
 80018d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2208      	movs	r2, #8
 80018da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f860 	bl	80019b0 <HAL_TIM_IC_CaptureCallback>
 80018f0:	e005      	b.n	80018fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f852 	bl	800199c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 f863 	bl	80019c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00c      	beq.n	8001928 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	d007      	beq.n	8001928 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f06f 0201 	mvn.w	r2, #1
 8001920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7fe ff84 	bl	8000830 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00c      	beq.n	800194c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001938:	2b00      	cmp	r3, #0
 800193a:	d007      	beq.n	800194c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 f8e6 	bl	8001b18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00c      	beq.n	8001970 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800195c:	2b00      	cmp	r3, #0
 800195e:	d007      	beq.n	8001970 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f834 	bl	80019d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	f003 0320 	and.w	r3, r3, #32
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00c      	beq.n	8001994 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f003 0320 	and.w	r3, r3, #32
 8001980:	2b00      	cmp	r3, #0
 8001982:	d007      	beq.n	8001994 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f06f 0220 	mvn.w	r2, #32
 800198c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f8b8 	bl	8001b04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001994:	bf00      	nop
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a3a      	ldr	r2, [pc, #232]	@ (8001ae8 <TIM_Base_SetConfig+0xfc>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d00f      	beq.n	8001a24 <TIM_Base_SetConfig+0x38>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a0a:	d00b      	beq.n	8001a24 <TIM_Base_SetConfig+0x38>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a37      	ldr	r2, [pc, #220]	@ (8001aec <TIM_Base_SetConfig+0x100>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d007      	beq.n	8001a24 <TIM_Base_SetConfig+0x38>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a36      	ldr	r2, [pc, #216]	@ (8001af0 <TIM_Base_SetConfig+0x104>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d003      	beq.n	8001a24 <TIM_Base_SetConfig+0x38>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a35      	ldr	r2, [pc, #212]	@ (8001af4 <TIM_Base_SetConfig+0x108>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d108      	bne.n	8001a36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a2b      	ldr	r2, [pc, #172]	@ (8001ae8 <TIM_Base_SetConfig+0xfc>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d01b      	beq.n	8001a76 <TIM_Base_SetConfig+0x8a>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a44:	d017      	beq.n	8001a76 <TIM_Base_SetConfig+0x8a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a28      	ldr	r2, [pc, #160]	@ (8001aec <TIM_Base_SetConfig+0x100>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d013      	beq.n	8001a76 <TIM_Base_SetConfig+0x8a>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a27      	ldr	r2, [pc, #156]	@ (8001af0 <TIM_Base_SetConfig+0x104>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d00f      	beq.n	8001a76 <TIM_Base_SetConfig+0x8a>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a26      	ldr	r2, [pc, #152]	@ (8001af4 <TIM_Base_SetConfig+0x108>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d00b      	beq.n	8001a76 <TIM_Base_SetConfig+0x8a>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a25      	ldr	r2, [pc, #148]	@ (8001af8 <TIM_Base_SetConfig+0x10c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d007      	beq.n	8001a76 <TIM_Base_SetConfig+0x8a>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a24      	ldr	r2, [pc, #144]	@ (8001afc <TIM_Base_SetConfig+0x110>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d003      	beq.n	8001a76 <TIM_Base_SetConfig+0x8a>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a23      	ldr	r2, [pc, #140]	@ (8001b00 <TIM_Base_SetConfig+0x114>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d108      	bne.n	8001a88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a0e      	ldr	r2, [pc, #56]	@ (8001ae8 <TIM_Base_SetConfig+0xfc>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d103      	bne.n	8001abc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	691a      	ldr	r2, [r3, #16]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d105      	bne.n	8001ada <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	f023 0201 	bic.w	r2, r3, #1
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	611a      	str	r2, [r3, #16]
  }
}
 8001ada:	bf00      	nop
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40010000 	.word	0x40010000
 8001aec:	40000400 	.word	0x40000400
 8001af0:	40000800 	.word	0x40000800
 8001af4:	40000c00 	.word	0x40000c00
 8001af8:	40014000 	.word	0x40014000
 8001afc:	40014400 	.word	0x40014400
 8001b00:	40014800 	.word	0x40014800

08001b04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f103 0208 	add.w	r2, r3, #8
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b44:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f103 0208 	add.w	r2, r3, #8
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f103 0208 	add.w	r2, r3, #8
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001b86:	b480      	push	{r7}
 8001b88:	b085      	sub	sp, #20
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6892      	ldr	r2, [r2, #8]
 8001b9c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6852      	ldr	r2, [r2, #4]
 8001ba6:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d103      	bne.n	8001bba <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	1e5a      	subs	r2, r3, #1
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b08c      	sub	sp, #48	@ 0x30
 8001bde:	af04      	add	r7, sp, #16
 8001be0:	60f8      	str	r0, [r7, #12]
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	603b      	str	r3, [r7, #0]
 8001be6:	4613      	mov	r3, r2
 8001be8:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001bea:	88fb      	ldrh	r3, [r7, #6]
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f001 f826 	bl	8002c40 <pvPortMalloc>
 8001bf4:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d013      	beq.n	8001c24 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001bfc:	2058      	movs	r0, #88	@ 0x58
 8001bfe:	f001 f81f 	bl	8002c40 <pvPortMalloc>
 8001c02:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d008      	beq.n	8001c1c <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001c0a:	2258      	movs	r2, #88	@ 0x58
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	69f8      	ldr	r0, [r7, #28]
 8001c10:	f003 f849 	bl	8004ca6 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c1a:	e005      	b.n	8001c28 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001c1c:	6978      	ldr	r0, [r7, #20]
 8001c1e:	f001 f8cb 	bl	8002db8 <vPortFree>
 8001c22:	e001      	b.n	8001c28 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d013      	beq.n	8001c56 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001c2e:	88fa      	ldrh	r2, [r7, #6]
 8001c30:	2300      	movs	r3, #0
 8001c32:	9303      	str	r3, [sp, #12]
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	9302      	str	r3, [sp, #8]
 8001c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c3a:	9301      	str	r3, [sp, #4]
 8001c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	68b9      	ldr	r1, [r7, #8]
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f000 f80e 	bl	8001c66 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001c4a:	69f8      	ldr	r0, [r7, #28]
 8001c4c:	f000 f89c 	bl	8001d88 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001c50:	2301      	movs	r3, #1
 8001c52:	61bb      	str	r3, [r7, #24]
 8001c54:	e002      	b.n	8001c5c <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001c56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c5a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001c5c:	69bb      	ldr	r3, [r7, #24]
    }
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3720      	adds	r7, #32
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b088      	sub	sp, #32
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	60f8      	str	r0, [r7, #12]
 8001c6e:	60b9      	str	r1, [r7, #8]
 8001c70:	607a      	str	r2, [r7, #4]
 8001c72:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c76:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	21a5      	movs	r1, #165	@ 0xa5
 8001c80:	f003 f811 	bl	8004ca6 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	f023 0307 	bic.w	r3, r3, #7
 8001c9c:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00b      	beq.n	8001cc0 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8001ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cac:	f383 8811 	msr	BASEPRI, r3
 8001cb0:	f3bf 8f6f 	isb	sy
 8001cb4:	f3bf 8f4f 	dsb	sy
 8001cb8:	617b      	str	r3, [r7, #20]
    }
 8001cba:	bf00      	nop
 8001cbc:	bf00      	nop
 8001cbe:	e7fd      	b.n	8001cbc <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d01e      	beq.n	8001d04 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
 8001cca:	e012      	b.n	8001cf2 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	7819      	ldrb	r1, [r3, #0]
 8001cd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	4413      	add	r3, r2
 8001cda:	3334      	adds	r3, #52	@ 0x34
 8001cdc:	460a      	mov	r2, r1
 8001cde:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d006      	beq.n	8001cfa <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	2b09      	cmp	r3, #9
 8001cf6:	d9e9      	bls.n	8001ccc <prvInitialiseNewTask+0x66>
 8001cf8:	e000      	b.n	8001cfc <prvInitialiseNewTask+0x96>
            {
                break;
 8001cfa:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d90b      	bls.n	8001d22 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8001d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d0e:	f383 8811 	msr	BASEPRI, r3
 8001d12:	f3bf 8f6f 	isb	sy
 8001d16:	f3bf 8f4f 	dsb	sy
 8001d1a:	613b      	str	r3, [r7, #16]
    }
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	e7fd      	b.n	8001d1e <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d901      	bls.n	8001d2c <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001d28:	2304      	movs	r3, #4
 8001d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d30:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d36:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff ff15 	bl	8001b6c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d44:	3318      	adds	r3, #24
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff ff10 	bl	8001b6c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d50:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d54:	f1c3 0205 	rsb	r2, r3, #5
 8001d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d5a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d60:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	68f9      	ldr	r1, [r7, #12]
 8001d66:	69b8      	ldr	r0, [r7, #24]
 8001d68:	f000 fc82 	bl	8002670 <pxPortInitialiseStack>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d70:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d7c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001d7e:	bf00      	nop
 8001d80:	3720      	adds	r7, #32
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001d88:	b5b0      	push	{r4, r5, r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af02      	add	r7, sp, #8
 8001d8e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001d90:	f000 fe24 	bl	80029dc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001d94:	4b4f      	ldr	r3, [pc, #316]	@ (8001ed4 <prvAddNewTaskToReadyList+0x14c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	4a4e      	ldr	r2, [pc, #312]	@ (8001ed4 <prvAddNewTaskToReadyList+0x14c>)
 8001d9c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001d9e:	4b4e      	ldr	r3, [pc, #312]	@ (8001ed8 <prvAddNewTaskToReadyList+0x150>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d109      	bne.n	8001dba <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001da6:	4a4c      	ldr	r2, [pc, #304]	@ (8001ed8 <prvAddNewTaskToReadyList+0x150>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001dac:	4b49      	ldr	r3, [pc, #292]	@ (8001ed4 <prvAddNewTaskToReadyList+0x14c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d110      	bne.n	8001dd6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001db4:	f000 fbc2 	bl	800253c <prvInitialiseTaskLists>
 8001db8:	e00d      	b.n	8001dd6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001dba:	4b48      	ldr	r3, [pc, #288]	@ (8001edc <prvAddNewTaskToReadyList+0x154>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d109      	bne.n	8001dd6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001dc2:	4b45      	ldr	r3, [pc, #276]	@ (8001ed8 <prvAddNewTaskToReadyList+0x150>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d802      	bhi.n	8001dd6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001dd0:	4a41      	ldr	r2, [pc, #260]	@ (8001ed8 <prvAddNewTaskToReadyList+0x150>)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001dd6:	4b42      	ldr	r3, [pc, #264]	@ (8001ee0 <prvAddNewTaskToReadyList+0x158>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	4a40      	ldr	r2, [pc, #256]	@ (8001ee0 <prvAddNewTaskToReadyList+0x158>)
 8001dde:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001de0:	4b3f      	ldr	r3, [pc, #252]	@ (8001ee0 <prvAddNewTaskToReadyList+0x158>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d016      	beq.n	8001e1c <prvAddNewTaskToReadyList+0x94>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f002 fc17 	bl	8004624 <SEGGER_SYSVIEW_OnTaskCreate>
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	461d      	mov	r5, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	461c      	mov	r4, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	1ae3      	subs	r3, r4, r3
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	462b      	mov	r3, r5
 8001e18:	f001 f992 	bl	8003140 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f002 fc84 	bl	800472c <SEGGER_SYSVIEW_OnTaskStartReady>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e28:	2201      	movs	r2, #1
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ee4 <prvAddNewTaskToReadyList+0x15c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	4a2c      	ldr	r2, [pc, #176]	@ (8001ee4 <prvAddNewTaskToReadyList+0x15c>)
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e3a:	492b      	ldr	r1, [pc, #172]	@ (8001ee8 <prvAddNewTaskToReadyList+0x160>)
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	3304      	adds	r3, #4
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	609a      	str	r2, [r3, #8]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	3204      	adds	r2, #4
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	1d1a      	adds	r2, r3, #4
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4a1b      	ldr	r2, [pc, #108]	@ (8001ee8 <prvAddNewTaskToReadyList+0x160>)
 8001e7a:	441a      	add	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	615a      	str	r2, [r3, #20]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e84:	4918      	ldr	r1, [pc, #96]	@ (8001ee8 <prvAddNewTaskToReadyList+0x160>)
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	440b      	add	r3, r1
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	1c59      	adds	r1, r3, #1
 8001e94:	4814      	ldr	r0, [pc, #80]	@ (8001ee8 <prvAddNewTaskToReadyList+0x160>)
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4403      	add	r3, r0
 8001ea0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001ea2:	f000 fdcd 	bl	8002a40 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8001edc <prvAddNewTaskToReadyList+0x154>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00e      	beq.n	8001ecc <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001eae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed8 <prvAddNewTaskToReadyList+0x150>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d207      	bcs.n	8001ecc <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8001eec <prvAddNewTaskToReadyList+0x164>)
 8001ebe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	f3bf 8f4f 	dsb	sy
 8001ec8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001ecc:	bf00      	nop
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ed4:	200001b8 	.word	0x200001b8
 8001ed8:	200000e0 	.word	0x200000e0
 8001edc:	200001c4 	.word	0x200001c4
 8001ee0:	200001d4 	.word	0x200001d4
 8001ee4:	200001c0 	.word	0x200001c0
 8001ee8:	200000e4 	.word	0x200000e4
 8001eec:	e000ed04 	.word	0xe000ed04

08001ef0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8001ef6:	4b27      	ldr	r3, [pc, #156]	@ (8001f94 <vTaskStartScheduler+0xa4>)
 8001ef8:	9301      	str	r3, [sp, #4]
 8001efa:	2300      	movs	r3, #0
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	2300      	movs	r3, #0
 8001f00:	2280      	movs	r2, #128	@ 0x80
 8001f02:	4925      	ldr	r1, [pc, #148]	@ (8001f98 <vTaskStartScheduler+0xa8>)
 8001f04:	4825      	ldr	r0, [pc, #148]	@ (8001f9c <vTaskStartScheduler+0xac>)
 8001f06:	f7ff fe68 	bl	8001bda <xTaskCreate>
 8001f0a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d129      	bne.n	8001f66 <vTaskStartScheduler+0x76>
        __asm volatile
 8001f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f16:	f383 8811 	msr	BASEPRI, r3
 8001f1a:	f3bf 8f6f 	isb	sy
 8001f1e:	f3bf 8f4f 	dsb	sy
 8001f22:	60bb      	str	r3, [r7, #8]
    }
 8001f24:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001f26:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa0 <vTaskStartScheduler+0xb0>)
 8001f28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f2c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa4 <vTaskStartScheduler+0xb4>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001f34:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa8 <vTaskStartScheduler+0xb8>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fac <vTaskStartScheduler+0xbc>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	3334      	adds	r3, #52	@ 0x34
 8001f40:	2205      	movs	r2, #5
 8001f42:	4915      	ldr	r1, [pc, #84]	@ (8001f98 <vTaskStartScheduler+0xa8>)
 8001f44:	4618      	mov	r0, r3
 8001f46:	f002 fe9e 	bl	8004c86 <memcmp>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d005      	beq.n	8001f5c <vTaskStartScheduler+0x6c>
 8001f50:	4b16      	ldr	r3, [pc, #88]	@ (8001fac <vTaskStartScheduler+0xbc>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f002 fba7 	bl	80046a8 <SEGGER_SYSVIEW_OnTaskStartExec>
 8001f5a:	e001      	b.n	8001f60 <vTaskStartScheduler+0x70>
 8001f5c:	f002 fb46 	bl	80045ec <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001f60:	f000 fc18 	bl	8002794 <xPortStartScheduler>
 8001f64:	e00f      	b.n	8001f86 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f6c:	d10b      	bne.n	8001f86 <vTaskStartScheduler+0x96>
        __asm volatile
 8001f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f72:	f383 8811 	msr	BASEPRI, r3
 8001f76:	f3bf 8f6f 	isb	sy
 8001f7a:	f3bf 8f4f 	dsb	sy
 8001f7e:	607b      	str	r3, [r7, #4]
    }
 8001f80:	bf00      	nop
 8001f82:	bf00      	nop
 8001f84:	e7fd      	b.n	8001f82 <vTaskStartScheduler+0x92>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001f86:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb0 <vTaskStartScheduler+0xc0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
}
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200001dc 	.word	0x200001dc
 8001f98:	08005924 	.word	0x08005924
 8001f9c:	0800250d 	.word	0x0800250d
 8001fa0:	200001d8 	.word	0x200001d8
 8001fa4:	200001c4 	.word	0x200001c4
 8001fa8:	200001bc 	.word	0x200001bc
 8001fac:	200000e0 	.word	0x200000e0
 8001fb0:	2000000c 	.word	0x2000000c

08001fb4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001fb8:	4b04      	ldr	r3, [pc, #16]	@ (8001fcc <vTaskSuspendAll+0x18>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	4a03      	ldr	r2, [pc, #12]	@ (8001fcc <vTaskSuspendAll+0x18>)
 8001fc0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001fc2:	bf00      	nop
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	200001e0 	.word	0x200001e0

08001fd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001fde:	4b73      	ldr	r3, [pc, #460]	@ (80021ac <xTaskResumeAll+0x1dc>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10b      	bne.n	8001ffe <xTaskResumeAll+0x2e>
        __asm volatile
 8001fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fea:	f383 8811 	msr	BASEPRI, r3
 8001fee:	f3bf 8f6f 	isb	sy
 8001ff2:	f3bf 8f4f 	dsb	sy
 8001ff6:	607b      	str	r3, [r7, #4]
    }
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	e7fd      	b.n	8001ffa <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001ffe:	f000 fced 	bl	80029dc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002002:	4b6a      	ldr	r3, [pc, #424]	@ (80021ac <xTaskResumeAll+0x1dc>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	3b01      	subs	r3, #1
 8002008:	4a68      	ldr	r2, [pc, #416]	@ (80021ac <xTaskResumeAll+0x1dc>)
 800200a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800200c:	4b67      	ldr	r3, [pc, #412]	@ (80021ac <xTaskResumeAll+0x1dc>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	f040 80c4 	bne.w	800219e <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002016:	4b66      	ldr	r3, [pc, #408]	@ (80021b0 <xTaskResumeAll+0x1e0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 80bf 	beq.w	800219e <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002020:	e08e      	b.n	8002140 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002022:	4b64      	ldr	r3, [pc, #400]	@ (80021b4 <xTaskResumeAll+0x1e4>)
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	69fa      	ldr	r2, [r7, #28]
 8002036:	6a12      	ldr	r2, [r2, #32]
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	69fa      	ldr	r2, [r7, #28]
 8002040:	69d2      	ldr	r2, [r2, #28]
 8002042:	605a      	str	r2, [r3, #4]
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	3318      	adds	r3, #24
 800204c:	429a      	cmp	r2, r3
 800204e:	d103      	bne.n	8002058 <xTaskResumeAll+0x88>
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	6a1a      	ldr	r2, [r3, #32]
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	605a      	str	r2, [r3, #4]
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	2200      	movs	r2, #0
 800205c:	629a      	str	r2, [r3, #40]	@ 0x28
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	1e5a      	subs	r2, r3, #1
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	69fa      	ldr	r2, [r7, #28]
 8002074:	68d2      	ldr	r2, [r2, #12]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	69fa      	ldr	r2, [r7, #28]
 800207e:	6892      	ldr	r2, [r2, #8]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3304      	adds	r3, #4
 800208a:	429a      	cmp	r2, r3
 800208c:	d103      	bne.n	8002096 <xTaskResumeAll+0xc6>
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	2200      	movs	r2, #0
 800209a:	615a      	str	r2, [r3, #20]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	1e5a      	subs	r2, r3, #1
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f002 fb3f 	bl	800472c <SEGGER_SYSVIEW_OnTaskStartReady>
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b2:	2201      	movs	r2, #1
 80020b4:	409a      	lsls	r2, r3
 80020b6:	4b40      	ldr	r3, [pc, #256]	@ (80021b8 <xTaskResumeAll+0x1e8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	4a3e      	ldr	r2, [pc, #248]	@ (80021b8 <xTaskResumeAll+0x1e8>)
 80020be:	6013      	str	r3, [r2, #0]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020c4:	493d      	ldr	r1, [pc, #244]	@ (80021bc <xTaskResumeAll+0x1ec>)
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	3304      	adds	r3, #4
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	68ba      	ldr	r2, [r7, #8]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	60da      	str	r2, [r3, #12]
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	69fa      	ldr	r2, [r7, #28]
 80020ea:	3204      	adds	r2, #4
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	1d1a      	adds	r2, r3, #4
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	609a      	str	r2, [r3, #8]
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4a2e      	ldr	r2, [pc, #184]	@ (80021bc <xTaskResumeAll+0x1ec>)
 8002104:	441a      	add	r2, r3
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	615a      	str	r2, [r3, #20]
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800210e:	492b      	ldr	r1, [pc, #172]	@ (80021bc <xTaskResumeAll+0x1ec>)
 8002110:	4613      	mov	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	1c59      	adds	r1, r3, #1
 800211e:	4827      	ldr	r0, [pc, #156]	@ (80021bc <xTaskResumeAll+0x1ec>)
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4403      	add	r3, r0
 800212a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002130:	4b23      	ldr	r3, [pc, #140]	@ (80021c0 <xTaskResumeAll+0x1f0>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002136:	429a      	cmp	r2, r3
 8002138:	d302      	bcc.n	8002140 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 800213a:	4b22      	ldr	r3, [pc, #136]	@ (80021c4 <xTaskResumeAll+0x1f4>)
 800213c:	2201      	movs	r2, #1
 800213e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002140:	4b1c      	ldr	r3, [pc, #112]	@ (80021b4 <xTaskResumeAll+0x1e4>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	f47f af6c 	bne.w	8002022 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002150:	f000 fa72 	bl	8002638 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002154:	4b1c      	ldr	r3, [pc, #112]	@ (80021c8 <xTaskResumeAll+0x1f8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d010      	beq.n	8002182 <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002160:	f000 f848 	bl	80021f4 <xTaskIncrementTick>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d002      	beq.n	8002170 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 800216a:	4b16      	ldr	r3, [pc, #88]	@ (80021c4 <xTaskResumeAll+0x1f4>)
 800216c:	2201      	movs	r2, #1
 800216e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	3b01      	subs	r3, #1
 8002174:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1f1      	bne.n	8002160 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 800217c:	4b12      	ldr	r3, [pc, #72]	@ (80021c8 <xTaskResumeAll+0x1f8>)
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002182:	4b10      	ldr	r3, [pc, #64]	@ (80021c4 <xTaskResumeAll+0x1f4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d009      	beq.n	800219e <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800218a:	2301      	movs	r3, #1
 800218c:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800218e:	4b0f      	ldr	r3, [pc, #60]	@ (80021cc <xTaskResumeAll+0x1fc>)
 8002190:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	f3bf 8f4f 	dsb	sy
 800219a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800219e:	f000 fc4f 	bl	8002a40 <vPortExitCritical>

    return xAlreadyYielded;
 80021a2:	69bb      	ldr	r3, [r7, #24]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3720      	adds	r7, #32
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	200001e0 	.word	0x200001e0
 80021b0:	200001b8 	.word	0x200001b8
 80021b4:	20000178 	.word	0x20000178
 80021b8:	200001c0 	.word	0x200001c0
 80021bc:	200000e4 	.word	0x200000e4
 80021c0:	200000e0 	.word	0x200000e0
 80021c4:	200001cc 	.word	0x200001cc
 80021c8:	200001c8 	.word	0x200001c8
 80021cc:	e000ed04 	.word	0xe000ed04

080021d0 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80021d6:	f000 fcf1 	bl	8002bbc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80021da:	2300      	movs	r3, #0
 80021dc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80021de:	4b04      	ldr	r3, [pc, #16]	@ (80021f0 <xTaskGetTickCountFromISR+0x20>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80021e4:	683b      	ldr	r3, [r7, #0]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200001bc 	.word	0x200001bc

080021f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08a      	sub	sp, #40	@ 0x28
 80021f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021fe:	4b80      	ldr	r3, [pc, #512]	@ (8002400 <xTaskIncrementTick+0x20c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	f040 80f1 	bne.w	80023ea <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002208:	4b7e      	ldr	r3, [pc, #504]	@ (8002404 <xTaskIncrementTick+0x210>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	3301      	adds	r3, #1
 800220e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002210:	4a7c      	ldr	r2, [pc, #496]	@ (8002404 <xTaskIncrementTick+0x210>)
 8002212:	6a3b      	ldr	r3, [r7, #32]
 8002214:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002216:	6a3b      	ldr	r3, [r7, #32]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d121      	bne.n	8002260 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800221c:	4b7a      	ldr	r3, [pc, #488]	@ (8002408 <xTaskIncrementTick+0x214>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00b      	beq.n	800223e <xTaskIncrementTick+0x4a>
        __asm volatile
 8002226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800222a:	f383 8811 	msr	BASEPRI, r3
 800222e:	f3bf 8f6f 	isb	sy
 8002232:	f3bf 8f4f 	dsb	sy
 8002236:	607b      	str	r3, [r7, #4]
    }
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	e7fd      	b.n	800223a <xTaskIncrementTick+0x46>
 800223e:	4b72      	ldr	r3, [pc, #456]	@ (8002408 <xTaskIncrementTick+0x214>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	61fb      	str	r3, [r7, #28]
 8002244:	4b71      	ldr	r3, [pc, #452]	@ (800240c <xTaskIncrementTick+0x218>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a6f      	ldr	r2, [pc, #444]	@ (8002408 <xTaskIncrementTick+0x214>)
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	4a6f      	ldr	r2, [pc, #444]	@ (800240c <xTaskIncrementTick+0x218>)
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	4b6f      	ldr	r3, [pc, #444]	@ (8002410 <xTaskIncrementTick+0x21c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	3301      	adds	r3, #1
 8002258:	4a6d      	ldr	r2, [pc, #436]	@ (8002410 <xTaskIncrementTick+0x21c>)
 800225a:	6013      	str	r3, [r2, #0]
 800225c:	f000 f9ec 	bl	8002638 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002260:	4b6c      	ldr	r3, [pc, #432]	@ (8002414 <xTaskIncrementTick+0x220>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6a3a      	ldr	r2, [r7, #32]
 8002266:	429a      	cmp	r2, r3
 8002268:	f0c0 80aa 	bcc.w	80023c0 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800226c:	4b66      	ldr	r3, [pc, #408]	@ (8002408 <xTaskIncrementTick+0x214>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d104      	bne.n	8002280 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002276:	4b67      	ldr	r3, [pc, #412]	@ (8002414 <xTaskIncrementTick+0x220>)
 8002278:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800227c:	601a      	str	r2, [r3, #0]
                    break;
 800227e:	e09f      	b.n	80023c0 <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002280:	4b61      	ldr	r3, [pc, #388]	@ (8002408 <xTaskIncrementTick+0x214>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002290:	6a3a      	ldr	r2, [r7, #32]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	429a      	cmp	r2, r3
 8002296:	d203      	bcs.n	80022a0 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002298:	4a5e      	ldr	r2, [pc, #376]	@ (8002414 <xTaskIncrementTick+0x220>)
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800229e:	e08f      	b.n	80023c0 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	68d2      	ldr	r2, [r2, #12]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	6892      	ldr	r2, [r2, #8]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	3304      	adds	r3, #4
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d103      	bne.n	80022ce <xTaskIncrementTick+0xda>
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	2200      	movs	r2, #0
 80022d2:	615a      	str	r2, [r3, #20]
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	1e5a      	subs	r2, r3, #1
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d01e      	beq.n	8002324 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	6a12      	ldr	r2, [r2, #32]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	69d2      	ldr	r2, [r2, #28]
 80022fe:	605a      	str	r2, [r3, #4]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	3318      	adds	r3, #24
 8002308:	429a      	cmp	r2, r3
 800230a:	d103      	bne.n	8002314 <xTaskIncrementTick+0x120>
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	6a1a      	ldr	r2, [r3, #32]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	605a      	str	r2, [r3, #4]
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	2200      	movs	r2, #0
 8002318:	629a      	str	r2, [r3, #40]	@ 0x28
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	1e5a      	subs	r2, r3, #1
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	4618      	mov	r0, r3
 8002328:	f002 fa00 	bl	800472c <SEGGER_SYSVIEW_OnTaskStartReady>
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002330:	2201      	movs	r2, #1
 8002332:	409a      	lsls	r2, r3
 8002334:	4b38      	ldr	r3, [pc, #224]	@ (8002418 <xTaskIncrementTick+0x224>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4313      	orrs	r3, r2
 800233a:	4a37      	ldr	r2, [pc, #220]	@ (8002418 <xTaskIncrementTick+0x224>)
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002342:	4936      	ldr	r1, [pc, #216]	@ (800241c <xTaskIncrementTick+0x228>)
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	3304      	adds	r3, #4
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	609a      	str	r2, [r3, #8]
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	3204      	adds	r2, #4
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	1d1a      	adds	r2, r3, #4
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4a26      	ldr	r2, [pc, #152]	@ (800241c <xTaskIncrementTick+0x228>)
 8002382:	441a      	add	r2, r3
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	615a      	str	r2, [r3, #20]
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800238c:	4923      	ldr	r1, [pc, #140]	@ (800241c <xTaskIncrementTick+0x228>)
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	1c59      	adds	r1, r3, #1
 800239c:	481f      	ldr	r0, [pc, #124]	@ (800241c <xTaskIncrementTick+0x228>)
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4403      	add	r3, r0
 80023a8:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002420 <xTaskIncrementTick+0x22c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b4:	429a      	cmp	r2, r3
 80023b6:	f67f af59 	bls.w	800226c <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 80023ba:	2301      	movs	r3, #1
 80023bc:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80023be:	e755      	b.n	800226c <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80023c0:	4b17      	ldr	r3, [pc, #92]	@ (8002420 <xTaskIncrementTick+0x22c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023c6:	4915      	ldr	r1, [pc, #84]	@ (800241c <xTaskIncrementTick+0x228>)
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d901      	bls.n	80023dc <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 80023d8:	2301      	movs	r3, #1
 80023da:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80023dc:	4b11      	ldr	r3, [pc, #68]	@ (8002424 <xTaskIncrementTick+0x230>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d007      	beq.n	80023f4 <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 80023e4:	2301      	movs	r3, #1
 80023e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80023e8:	e004      	b.n	80023f4 <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80023ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002428 <xTaskIncrementTick+0x234>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	3301      	adds	r3, #1
 80023f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002428 <xTaskIncrementTick+0x234>)
 80023f2:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80023f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3728      	adds	r7, #40	@ 0x28
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	200001e0 	.word	0x200001e0
 8002404:	200001bc 	.word	0x200001bc
 8002408:	20000170 	.word	0x20000170
 800240c:	20000174 	.word	0x20000174
 8002410:	200001d0 	.word	0x200001d0
 8002414:	200001d8 	.word	0x200001d8
 8002418:	200001c0 	.word	0x200001c0
 800241c:	200000e4 	.word	0x200000e4
 8002420:	200000e0 	.word	0x200000e0
 8002424:	200001cc 	.word	0x200001cc
 8002428:	200001c8 	.word	0x200001c8

0800242c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002432:	4b30      	ldr	r3, [pc, #192]	@ (80024f4 <vTaskSwitchContext+0xc8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800243a:	4b2f      	ldr	r3, [pc, #188]	@ (80024f8 <vTaskSwitchContext+0xcc>)
 800243c:	2201      	movs	r2, #1
 800243e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002440:	e053      	b.n	80024ea <vTaskSwitchContext+0xbe>
        xYieldPending = pdFALSE;
 8002442:	4b2d      	ldr	r3, [pc, #180]	@ (80024f8 <vTaskSwitchContext+0xcc>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002448:	4b2c      	ldr	r3, [pc, #176]	@ (80024fc <vTaskSwitchContext+0xd0>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	fab3 f383 	clz	r3, r3
 8002454:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002456:	7afb      	ldrb	r3, [r7, #11]
 8002458:	f1c3 031f 	rsb	r3, r3, #31
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	4928      	ldr	r1, [pc, #160]	@ (8002500 <vTaskSwitchContext+0xd4>)
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	440b      	add	r3, r1
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10b      	bne.n	800248a <vTaskSwitchContext+0x5e>
        __asm volatile
 8002472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002476:	f383 8811 	msr	BASEPRI, r3
 800247a:	f3bf 8f6f 	isb	sy
 800247e:	f3bf 8f4f 	dsb	sy
 8002482:	607b      	str	r3, [r7, #4]
    }
 8002484:	bf00      	nop
 8002486:	bf00      	nop
 8002488:	e7fd      	b.n	8002486 <vTaskSwitchContext+0x5a>
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4a1a      	ldr	r2, [pc, #104]	@ (8002500 <vTaskSwitchContext+0xd4>)
 8002496:	4413      	add	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	3308      	adds	r3, #8
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d104      	bne.n	80024ba <vTaskSwitchContext+0x8e>
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4a10      	ldr	r2, [pc, #64]	@ (8002504 <vTaskSwitchContext+0xd8>)
 80024c2:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80024c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002504 <vTaskSwitchContext+0xd8>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	3334      	adds	r3, #52	@ 0x34
 80024ca:	2205      	movs	r2, #5
 80024cc:	490e      	ldr	r1, [pc, #56]	@ (8002508 <vTaskSwitchContext+0xdc>)
 80024ce:	4618      	mov	r0, r3
 80024d0:	f002 fbd9 	bl	8004c86 <memcmp>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d005      	beq.n	80024e6 <vTaskSwitchContext+0xba>
 80024da:	4b0a      	ldr	r3, [pc, #40]	@ (8002504 <vTaskSwitchContext+0xd8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f002 f8e2 	bl	80046a8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80024e4:	e001      	b.n	80024ea <vTaskSwitchContext+0xbe>
        traceTASK_SWITCHED_IN();
 80024e6:	f002 f881 	bl	80045ec <SEGGER_SYSVIEW_OnIdle>
}
 80024ea:	bf00      	nop
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200001e0 	.word	0x200001e0
 80024f8:	200001cc 	.word	0x200001cc
 80024fc:	200001c0 	.word	0x200001c0
 8002500:	200000e4 	.word	0x200000e4
 8002504:	200000e0 	.word	0x200000e0
 8002508:	08005924 	.word	0x08005924

0800250c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002514:	f000 f852 	bl	80025bc <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002518:	4b06      	ldr	r3, [pc, #24]	@ (8002534 <prvIdleTask+0x28>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d9f9      	bls.n	8002514 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002520:	4b05      	ldr	r3, [pc, #20]	@ (8002538 <prvIdleTask+0x2c>)
 8002522:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	f3bf 8f4f 	dsb	sy
 800252c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002530:	e7f0      	b.n	8002514 <prvIdleTask+0x8>
 8002532:	bf00      	nop
 8002534:	200000e4 	.word	0x200000e4
 8002538:	e000ed04 	.word	0xe000ed04

0800253c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002542:	2300      	movs	r3, #0
 8002544:	607b      	str	r3, [r7, #4]
 8002546:	e00c      	b.n	8002562 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4a12      	ldr	r2, [pc, #72]	@ (800259c <prvInitialiseTaskLists+0x60>)
 8002554:	4413      	add	r3, r2
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fae8 	bl	8001b2c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3301      	adds	r3, #1
 8002560:	607b      	str	r3, [r7, #4]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b04      	cmp	r3, #4
 8002566:	d9ef      	bls.n	8002548 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002568:	480d      	ldr	r0, [pc, #52]	@ (80025a0 <prvInitialiseTaskLists+0x64>)
 800256a:	f7ff fadf 	bl	8001b2c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800256e:	480d      	ldr	r0, [pc, #52]	@ (80025a4 <prvInitialiseTaskLists+0x68>)
 8002570:	f7ff fadc 	bl	8001b2c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002574:	480c      	ldr	r0, [pc, #48]	@ (80025a8 <prvInitialiseTaskLists+0x6c>)
 8002576:	f7ff fad9 	bl	8001b2c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800257a:	480c      	ldr	r0, [pc, #48]	@ (80025ac <prvInitialiseTaskLists+0x70>)
 800257c:	f7ff fad6 	bl	8001b2c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002580:	480b      	ldr	r0, [pc, #44]	@ (80025b0 <prvInitialiseTaskLists+0x74>)
 8002582:	f7ff fad3 	bl	8001b2c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002586:	4b0b      	ldr	r3, [pc, #44]	@ (80025b4 <prvInitialiseTaskLists+0x78>)
 8002588:	4a05      	ldr	r2, [pc, #20]	@ (80025a0 <prvInitialiseTaskLists+0x64>)
 800258a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800258c:	4b0a      	ldr	r3, [pc, #40]	@ (80025b8 <prvInitialiseTaskLists+0x7c>)
 800258e:	4a05      	ldr	r2, [pc, #20]	@ (80025a4 <prvInitialiseTaskLists+0x68>)
 8002590:	601a      	str	r2, [r3, #0]
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	200000e4 	.word	0x200000e4
 80025a0:	20000148 	.word	0x20000148
 80025a4:	2000015c 	.word	0x2000015c
 80025a8:	20000178 	.word	0x20000178
 80025ac:	2000018c 	.word	0x2000018c
 80025b0:	200001a4 	.word	0x200001a4
 80025b4:	20000170 	.word	0x20000170
 80025b8:	20000174 	.word	0x20000174

080025bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80025c2:	e019      	b.n	80025f8 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80025c4:	f000 fa0a 	bl	80029dc <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025c8:	4b10      	ldr	r3, [pc, #64]	@ (800260c <prvCheckTasksWaitingTermination+0x50>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3304      	adds	r3, #4
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff fad6 	bl	8001b86 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80025da:	4b0d      	ldr	r3, [pc, #52]	@ (8002610 <prvCheckTasksWaitingTermination+0x54>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	3b01      	subs	r3, #1
 80025e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002610 <prvCheckTasksWaitingTermination+0x54>)
 80025e2:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80025e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002614 <prvCheckTasksWaitingTermination+0x58>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	3b01      	subs	r3, #1
 80025ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002614 <prvCheckTasksWaitingTermination+0x58>)
 80025ec:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80025ee:	f000 fa27 	bl	8002a40 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f810 	bl	8002618 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80025f8:	4b06      	ldr	r3, [pc, #24]	@ (8002614 <prvCheckTasksWaitingTermination+0x58>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1e1      	bne.n	80025c4 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002600:	bf00      	nop
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	2000018c 	.word	0x2000018c
 8002610:	200001b8 	.word	0x200001b8
 8002614:	200001a0 	.word	0x200001a0

08002618 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002624:	4618      	mov	r0, r3
 8002626:	f000 fbc7 	bl	8002db8 <vPortFree>
            vPortFree( pxTCB );
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 fbc4 	bl	8002db8 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002630:	bf00      	nop
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800263c:	4b0a      	ldr	r3, [pc, #40]	@ (8002668 <prvResetNextTaskUnblockTime+0x30>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d104      	bne.n	8002650 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002646:	4b09      	ldr	r3, [pc, #36]	@ (800266c <prvResetNextTaskUnblockTime+0x34>)
 8002648:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800264c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800264e:	e005      	b.n	800265c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002650:	4b05      	ldr	r3, [pc, #20]	@ (8002668 <prvResetNextTaskUnblockTime+0x30>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a04      	ldr	r2, [pc, #16]	@ (800266c <prvResetNextTaskUnblockTime+0x34>)
 800265a:	6013      	str	r3, [r2, #0]
}
 800265c:	bf00      	nop
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	20000170 	.word	0x20000170
 800266c:	200001d8 	.word	0x200001d8

08002670 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	3b04      	subs	r3, #4
 8002680:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002688:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	3b04      	subs	r3, #4
 800268e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f023 0201 	bic.w	r2, r3, #1
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	3b04      	subs	r3, #4
 800269e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80026a0:	4a0c      	ldr	r2, [pc, #48]	@ (80026d4 <pxPortInitialiseStack+0x64>)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	3b14      	subs	r3, #20
 80026aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	3b04      	subs	r3, #4
 80026b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f06f 0202 	mvn.w	r2, #2
 80026be:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	3b20      	subs	r3, #32
 80026c4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80026c6:	68fb      	ldr	r3, [r7, #12]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	080026d9 	.word	0x080026d9

080026d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80026e2:	4b13      	ldr	r3, [pc, #76]	@ (8002730 <prvTaskExitError+0x58>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026ea:	d00b      	beq.n	8002704 <prvTaskExitError+0x2c>
        __asm volatile
 80026ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026f0:	f383 8811 	msr	BASEPRI, r3
 80026f4:	f3bf 8f6f 	isb	sy
 80026f8:	f3bf 8f4f 	dsb	sy
 80026fc:	60fb      	str	r3, [r7, #12]
    }
 80026fe:	bf00      	nop
 8002700:	bf00      	nop
 8002702:	e7fd      	b.n	8002700 <prvTaskExitError+0x28>
        __asm volatile
 8002704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002708:	f383 8811 	msr	BASEPRI, r3
 800270c:	f3bf 8f6f 	isb	sy
 8002710:	f3bf 8f4f 	dsb	sy
 8002714:	60bb      	str	r3, [r7, #8]
    }
 8002716:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002718:	bf00      	nop
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0fc      	beq.n	800271a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002720:	bf00      	nop
 8002722:	bf00      	nop
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	20000010 	.word	0x20000010
	...

08002740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002740:	4b07      	ldr	r3, [pc, #28]	@ (8002760 <pxCurrentTCBConst2>)
 8002742:	6819      	ldr	r1, [r3, #0]
 8002744:	6808      	ldr	r0, [r1, #0]
 8002746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800274a:	f380 8809 	msr	PSP, r0
 800274e:	f3bf 8f6f 	isb	sy
 8002752:	f04f 0000 	mov.w	r0, #0
 8002756:	f380 8811 	msr	BASEPRI, r0
 800275a:	4770      	bx	lr
 800275c:	f3af 8000 	nop.w

08002760 <pxCurrentTCBConst2>:
 8002760:	200000e0 	.word	0x200000e0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002764:	bf00      	nop
 8002766:	bf00      	nop

08002768 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002768:	4808      	ldr	r0, [pc, #32]	@ (800278c <prvPortStartFirstTask+0x24>)
 800276a:	6800      	ldr	r0, [r0, #0]
 800276c:	6800      	ldr	r0, [r0, #0]
 800276e:	f380 8808 	msr	MSP, r0
 8002772:	f04f 0000 	mov.w	r0, #0
 8002776:	f380 8814 	msr	CONTROL, r0
 800277a:	b662      	cpsie	i
 800277c:	b661      	cpsie	f
 800277e:	f3bf 8f4f 	dsb	sy
 8002782:	f3bf 8f6f 	isb	sy
 8002786:	df00      	svc	0
 8002788:	bf00      	nop
 800278a:	0000      	.short	0x0000
 800278c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002790:	bf00      	nop
 8002792:	bf00      	nop

08002794 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800279a:	4b47      	ldr	r3, [pc, #284]	@ (80028b8 <xPortStartScheduler+0x124>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a47      	ldr	r2, [pc, #284]	@ (80028bc <xPortStartScheduler+0x128>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d10b      	bne.n	80027bc <xPortStartScheduler+0x28>
        __asm volatile
 80027a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027a8:	f383 8811 	msr	BASEPRI, r3
 80027ac:	f3bf 8f6f 	isb	sy
 80027b0:	f3bf 8f4f 	dsb	sy
 80027b4:	613b      	str	r3, [r7, #16]
    }
 80027b6:	bf00      	nop
 80027b8:	bf00      	nop
 80027ba:	e7fd      	b.n	80027b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80027bc:	4b3e      	ldr	r3, [pc, #248]	@ (80028b8 <xPortStartScheduler+0x124>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a3f      	ldr	r2, [pc, #252]	@ (80028c0 <xPortStartScheduler+0x12c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d10b      	bne.n	80027de <xPortStartScheduler+0x4a>
        __asm volatile
 80027c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027ca:	f383 8811 	msr	BASEPRI, r3
 80027ce:	f3bf 8f6f 	isb	sy
 80027d2:	f3bf 8f4f 	dsb	sy
 80027d6:	60fb      	str	r3, [r7, #12]
    }
 80027d8:	bf00      	nop
 80027da:	bf00      	nop
 80027dc:	e7fd      	b.n	80027da <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80027de:	4b39      	ldr	r3, [pc, #228]	@ (80028c4 <xPortStartScheduler+0x130>)
 80027e0:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	22ff      	movs	r2, #255	@ 0xff
 80027ee:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002800:	b2da      	uxtb	r2, r3
 8002802:	4b31      	ldr	r3, [pc, #196]	@ (80028c8 <xPortStartScheduler+0x134>)
 8002804:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002806:	4b31      	ldr	r3, [pc, #196]	@ (80028cc <xPortStartScheduler+0x138>)
 8002808:	2207      	movs	r2, #7
 800280a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800280c:	e009      	b.n	8002822 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 800280e:	4b2f      	ldr	r3, [pc, #188]	@ (80028cc <xPortStartScheduler+0x138>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	3b01      	subs	r3, #1
 8002814:	4a2d      	ldr	r2, [pc, #180]	@ (80028cc <xPortStartScheduler+0x138>)
 8002816:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002818:	78fb      	ldrb	r3, [r7, #3]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	b2db      	uxtb	r3, r3
 8002820:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002822:	78fb      	ldrb	r3, [r7, #3]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800282a:	2b80      	cmp	r3, #128	@ 0x80
 800282c:	d0ef      	beq.n	800280e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800282e:	4b27      	ldr	r3, [pc, #156]	@ (80028cc <xPortStartScheduler+0x138>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f1c3 0307 	rsb	r3, r3, #7
 8002836:	2b04      	cmp	r3, #4
 8002838:	d00b      	beq.n	8002852 <xPortStartScheduler+0xbe>
        __asm volatile
 800283a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800283e:	f383 8811 	msr	BASEPRI, r3
 8002842:	f3bf 8f6f 	isb	sy
 8002846:	f3bf 8f4f 	dsb	sy
 800284a:	60bb      	str	r3, [r7, #8]
    }
 800284c:	bf00      	nop
 800284e:	bf00      	nop
 8002850:	e7fd      	b.n	800284e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002852:	4b1e      	ldr	r3, [pc, #120]	@ (80028cc <xPortStartScheduler+0x138>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	021b      	lsls	r3, r3, #8
 8002858:	4a1c      	ldr	r2, [pc, #112]	@ (80028cc <xPortStartScheduler+0x138>)
 800285a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800285c:	4b1b      	ldr	r3, [pc, #108]	@ (80028cc <xPortStartScheduler+0x138>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002864:	4a19      	ldr	r2, [pc, #100]	@ (80028cc <xPortStartScheduler+0x138>)
 8002866:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	b2da      	uxtb	r2, r3
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002870:	4b17      	ldr	r3, [pc, #92]	@ (80028d0 <xPortStartScheduler+0x13c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a16      	ldr	r2, [pc, #88]	@ (80028d0 <xPortStartScheduler+0x13c>)
 8002876:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800287a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800287c:	4b14      	ldr	r3, [pc, #80]	@ (80028d0 <xPortStartScheduler+0x13c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a13      	ldr	r2, [pc, #76]	@ (80028d0 <xPortStartScheduler+0x13c>)
 8002882:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002886:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002888:	f000 f968 	bl	8002b5c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800288c:	4b11      	ldr	r3, [pc, #68]	@ (80028d4 <xPortStartScheduler+0x140>)
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002892:	f000 f987 	bl	8002ba4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002896:	4b10      	ldr	r3, [pc, #64]	@ (80028d8 <xPortStartScheduler+0x144>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a0f      	ldr	r2, [pc, #60]	@ (80028d8 <xPortStartScheduler+0x144>)
 800289c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80028a0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80028a2:	f7ff ff61 	bl	8002768 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80028a6:	f7ff fdc1 	bl	800242c <vTaskSwitchContext>
    prvTaskExitError();
 80028aa:	f7ff ff15 	bl	80026d8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	e000ed00 	.word	0xe000ed00
 80028bc:	410fc271 	.word	0x410fc271
 80028c0:	410fc270 	.word	0x410fc270
 80028c4:	e000e400 	.word	0xe000e400
 80028c8:	200001e4 	.word	0x200001e4
 80028cc:	200001e8 	.word	0x200001e8
 80028d0:	e000ed20 	.word	0xe000ed20
 80028d4:	20000010 	.word	0x20000010
 80028d8:	e000ef34 	.word	0xe000ef34

080028dc <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80028e2:	4b38      	ldr	r3, [pc, #224]	@ (80029c4 <vInitPrioGroupValue+0xe8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a38      	ldr	r2, [pc, #224]	@ (80029c8 <vInitPrioGroupValue+0xec>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d10b      	bne.n	8002904 <vInitPrioGroupValue+0x28>
        __asm volatile
 80028ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028f0:	f383 8811 	msr	BASEPRI, r3
 80028f4:	f3bf 8f6f 	isb	sy
 80028f8:	f3bf 8f4f 	dsb	sy
 80028fc:	613b      	str	r3, [r7, #16]
    }
 80028fe:	bf00      	nop
 8002900:	bf00      	nop
 8002902:	e7fd      	b.n	8002900 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002904:	4b2f      	ldr	r3, [pc, #188]	@ (80029c4 <vInitPrioGroupValue+0xe8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a30      	ldr	r2, [pc, #192]	@ (80029cc <vInitPrioGroupValue+0xf0>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d10b      	bne.n	8002926 <vInitPrioGroupValue+0x4a>
        __asm volatile
 800290e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002912:	f383 8811 	msr	BASEPRI, r3
 8002916:	f3bf 8f6f 	isb	sy
 800291a:	f3bf 8f4f 	dsb	sy
 800291e:	60fb      	str	r3, [r7, #12]
    }
 8002920:	bf00      	nop
 8002922:	bf00      	nop
 8002924:	e7fd      	b.n	8002922 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002926:	4b2a      	ldr	r3, [pc, #168]	@ (80029d0 <vInitPrioGroupValue+0xf4>)
 8002928:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	22ff      	movs	r2, #255	@ 0xff
 8002936:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002940:	78fb      	ldrb	r3, [r7, #3]
 8002942:	b2db      	uxtb	r3, r3
 8002944:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002948:	b2da      	uxtb	r2, r3
 800294a:	4b22      	ldr	r3, [pc, #136]	@ (80029d4 <vInitPrioGroupValue+0xf8>)
 800294c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800294e:	4b22      	ldr	r3, [pc, #136]	@ (80029d8 <vInitPrioGroupValue+0xfc>)
 8002950:	2207      	movs	r2, #7
 8002952:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002954:	e009      	b.n	800296a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8002956:	4b20      	ldr	r3, [pc, #128]	@ (80029d8 <vInitPrioGroupValue+0xfc>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	3b01      	subs	r3, #1
 800295c:	4a1e      	ldr	r2, [pc, #120]	@ (80029d8 <vInitPrioGroupValue+0xfc>)
 800295e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002960:	78fb      	ldrb	r3, [r7, #3]
 8002962:	b2db      	uxtb	r3, r3
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	b2db      	uxtb	r3, r3
 8002968:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002972:	2b80      	cmp	r3, #128	@ 0x80
 8002974:	d0ef      	beq.n	8002956 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002976:	4b18      	ldr	r3, [pc, #96]	@ (80029d8 <vInitPrioGroupValue+0xfc>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f1c3 0307 	rsb	r3, r3, #7
 800297e:	2b04      	cmp	r3, #4
 8002980:	d00b      	beq.n	800299a <vInitPrioGroupValue+0xbe>
        __asm volatile
 8002982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002986:	f383 8811 	msr	BASEPRI, r3
 800298a:	f3bf 8f6f 	isb	sy
 800298e:	f3bf 8f4f 	dsb	sy
 8002992:	60bb      	str	r3, [r7, #8]
    }
 8002994:	bf00      	nop
 8002996:	bf00      	nop
 8002998:	e7fd      	b.n	8002996 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800299a:	4b0f      	ldr	r3, [pc, #60]	@ (80029d8 <vInitPrioGroupValue+0xfc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	021b      	lsls	r3, r3, #8
 80029a0:	4a0d      	ldr	r2, [pc, #52]	@ (80029d8 <vInitPrioGroupValue+0xfc>)
 80029a2:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80029a4:	4b0c      	ldr	r3, [pc, #48]	@ (80029d8 <vInitPrioGroupValue+0xfc>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80029ac:	4a0a      	ldr	r2, [pc, #40]	@ (80029d8 <vInitPrioGroupValue+0xfc>)
 80029ae:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80029b8:	bf00      	nop
 80029ba:	371c      	adds	r7, #28
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	e000ed00 	.word	0xe000ed00
 80029c8:	410fc271 	.word	0x410fc271
 80029cc:	410fc270 	.word	0x410fc270
 80029d0:	e000e400 	.word	0xe000e400
 80029d4:	200001e4 	.word	0x200001e4
 80029d8:	200001e8 	.word	0x200001e8

080029dc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
        __asm volatile
 80029e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029e6:	f383 8811 	msr	BASEPRI, r3
 80029ea:	f3bf 8f6f 	isb	sy
 80029ee:	f3bf 8f4f 	dsb	sy
 80029f2:	607b      	str	r3, [r7, #4]
    }
 80029f4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80029f6:	4b10      	ldr	r3, [pc, #64]	@ (8002a38 <vPortEnterCritical+0x5c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	3301      	adds	r3, #1
 80029fc:	4a0e      	ldr	r2, [pc, #56]	@ (8002a38 <vPortEnterCritical+0x5c>)
 80029fe:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002a00:	4b0d      	ldr	r3, [pc, #52]	@ (8002a38 <vPortEnterCritical+0x5c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d110      	bne.n	8002a2a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002a08:	4b0c      	ldr	r3, [pc, #48]	@ (8002a3c <vPortEnterCritical+0x60>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00b      	beq.n	8002a2a <vPortEnterCritical+0x4e>
        __asm volatile
 8002a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a16:	f383 8811 	msr	BASEPRI, r3
 8002a1a:	f3bf 8f6f 	isb	sy
 8002a1e:	f3bf 8f4f 	dsb	sy
 8002a22:	603b      	str	r3, [r7, #0]
    }
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	e7fd      	b.n	8002a26 <vPortEnterCritical+0x4a>
    }
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	20000010 	.word	0x20000010
 8002a3c:	e000ed04 	.word	0xe000ed04

08002a40 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002a46:	4b12      	ldr	r3, [pc, #72]	@ (8002a90 <vPortExitCritical+0x50>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10b      	bne.n	8002a66 <vPortExitCritical+0x26>
        __asm volatile
 8002a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a52:	f383 8811 	msr	BASEPRI, r3
 8002a56:	f3bf 8f6f 	isb	sy
 8002a5a:	f3bf 8f4f 	dsb	sy
 8002a5e:	607b      	str	r3, [r7, #4]
    }
 8002a60:	bf00      	nop
 8002a62:	bf00      	nop
 8002a64:	e7fd      	b.n	8002a62 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002a66:	4b0a      	ldr	r3, [pc, #40]	@ (8002a90 <vPortExitCritical+0x50>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	4a08      	ldr	r2, [pc, #32]	@ (8002a90 <vPortExitCritical+0x50>)
 8002a6e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002a70:	4b07      	ldr	r3, [pc, #28]	@ (8002a90 <vPortExitCritical+0x50>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d105      	bne.n	8002a84 <vPortExitCritical+0x44>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002a82:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	20000010 	.word	0x20000010
	...

08002aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002aa0:	f3ef 8009 	mrs	r0, PSP
 8002aa4:	f3bf 8f6f 	isb	sy
 8002aa8:	4b15      	ldr	r3, [pc, #84]	@ (8002b00 <pxCurrentTCBConst>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	f01e 0f10 	tst.w	lr, #16
 8002ab0:	bf08      	it	eq
 8002ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aba:	6010      	str	r0, [r2, #0]
 8002abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002ac0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002ac4:	f380 8811 	msr	BASEPRI, r0
 8002ac8:	f3bf 8f4f 	dsb	sy
 8002acc:	f3bf 8f6f 	isb	sy
 8002ad0:	f7ff fcac 	bl	800242c <vTaskSwitchContext>
 8002ad4:	f04f 0000 	mov.w	r0, #0
 8002ad8:	f380 8811 	msr	BASEPRI, r0
 8002adc:	bc09      	pop	{r0, r3}
 8002ade:	6819      	ldr	r1, [r3, #0]
 8002ae0:	6808      	ldr	r0, [r1, #0]
 8002ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ae6:	f01e 0f10 	tst.w	lr, #16
 8002aea:	bf08      	it	eq
 8002aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002af0:	f380 8809 	msr	PSP, r0
 8002af4:	f3bf 8f6f 	isb	sy
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	f3af 8000 	nop.w

08002b00 <pxCurrentTCBConst>:
 8002b00:	200000e0 	.word	0x200000e0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002b04:	bf00      	nop
 8002b06:	bf00      	nop

08002b08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
        __asm volatile
 8002b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b12:	f383 8811 	msr	BASEPRI, r3
 8002b16:	f3bf 8f6f 	isb	sy
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	607b      	str	r3, [r7, #4]
    }
 8002b20:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002b22:	f001 fce9 	bl	80044f8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002b26:	f7ff fb65 	bl	80021f4 <xTaskIncrementTick>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d006      	beq.n	8002b3e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002b30:	f001 fd40 	bl	80045b4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002b34:	4b08      	ldr	r3, [pc, #32]	@ (8002b58 <SysTick_Handler+0x50>)
 8002b36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	e001      	b.n	8002b42 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002b3e:	f001 fd1d 	bl	800457c <SEGGER_SYSVIEW_RecordExitISR>
 8002b42:	2300      	movs	r3, #0
 8002b44:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	f383 8811 	msr	BASEPRI, r3
    }
 8002b4c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	e000ed04 	.word	0xe000ed04

08002b5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002b60:	4b0b      	ldr	r3, [pc, #44]	@ (8002b90 <vPortSetupTimerInterrupt+0x34>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002b66:	4b0b      	ldr	r3, [pc, #44]	@ (8002b94 <vPortSetupTimerInterrupt+0x38>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b98 <vPortSetupTimerInterrupt+0x3c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a0a      	ldr	r2, [pc, #40]	@ (8002b9c <vPortSetupTimerInterrupt+0x40>)
 8002b72:	fba2 2303 	umull	r2, r3, r2, r3
 8002b76:	099b      	lsrs	r3, r3, #6
 8002b78:	4a09      	ldr	r2, [pc, #36]	@ (8002ba0 <vPortSetupTimerInterrupt+0x44>)
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002b7e:	4b04      	ldr	r3, [pc, #16]	@ (8002b90 <vPortSetupTimerInterrupt+0x34>)
 8002b80:	2207      	movs	r2, #7
 8002b82:	601a      	str	r2, [r3, #0]
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	e000e010 	.word	0xe000e010
 8002b94:	e000e018 	.word	0xe000e018
 8002b98:	20000000 	.word	0x20000000
 8002b9c:	10624dd3 	.word	0x10624dd3
 8002ba0:	e000e014 	.word	0xe000e014

08002ba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002ba4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002bb4 <vPortEnableVFP+0x10>
 8002ba8:	6801      	ldr	r1, [r0, #0]
 8002baa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002bae:	6001      	str	r1, [r0, #0]
 8002bb0:	4770      	bx	lr
 8002bb2:	0000      	.short	0x0000
 8002bb4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002bb8:	bf00      	nop
 8002bba:	bf00      	nop

08002bbc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002bc2:	f3ef 8305 	mrs	r3, IPSR
 8002bc6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2b0f      	cmp	r3, #15
 8002bcc:	d915      	bls.n	8002bfa <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002bce:	4a18      	ldr	r2, [pc, #96]	@ (8002c30 <vPortValidateInterruptPriority+0x74>)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002bd8:	4b16      	ldr	r3, [pc, #88]	@ (8002c34 <vPortValidateInterruptPriority+0x78>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	7afa      	ldrb	r2, [r7, #11]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d20b      	bcs.n	8002bfa <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8002be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002be6:	f383 8811 	msr	BASEPRI, r3
 8002bea:	f3bf 8f6f 	isb	sy
 8002bee:	f3bf 8f4f 	dsb	sy
 8002bf2:	607b      	str	r3, [r7, #4]
    }
 8002bf4:	bf00      	nop
 8002bf6:	bf00      	nop
 8002bf8:	e7fd      	b.n	8002bf6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8002c38 <vPortValidateInterruptPriority+0x7c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002c02:	4b0e      	ldr	r3, [pc, #56]	@ (8002c3c <vPortValidateInterruptPriority+0x80>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d90b      	bls.n	8002c22 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8002c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c0e:	f383 8811 	msr	BASEPRI, r3
 8002c12:	f3bf 8f6f 	isb	sy
 8002c16:	f3bf 8f4f 	dsb	sy
 8002c1a:	603b      	str	r3, [r7, #0]
    }
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	e7fd      	b.n	8002c1e <vPortValidateInterruptPriority+0x62>
    }
 8002c22:	bf00      	nop
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	e000e3f0 	.word	0xe000e3f0
 8002c34:	200001e4 	.word	0x200001e4
 8002c38:	e000ed0c 	.word	0xe000ed0c
 8002c3c:	200001e8 	.word	0x200001e8

08002c40 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08a      	sub	sp, #40	@ 0x28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002c4c:	f7ff f9b2 	bl	8001fb4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002c50:	4b54      	ldr	r3, [pc, #336]	@ (8002da4 <pvPortMalloc+0x164>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002c58:	f000 f90c 	bl	8002e74 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d012      	beq.n	8002c88 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002c62:	2208      	movs	r2, #8
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	3308      	adds	r3, #8
 8002c6e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	43db      	mvns	r3, r3
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d804      	bhi.n	8002c84 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	4413      	add	r3, r2
 8002c80:	607b      	str	r3, [r7, #4]
 8002c82:	e001      	b.n	8002c88 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	db71      	blt.n	8002d72 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d06e      	beq.n	8002d72 <pvPortMalloc+0x132>
 8002c94:	4b44      	ldr	r3, [pc, #272]	@ (8002da8 <pvPortMalloc+0x168>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d869      	bhi.n	8002d72 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002c9e:	4b43      	ldr	r3, [pc, #268]	@ (8002dac <pvPortMalloc+0x16c>)
 8002ca0:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002ca2:	4b42      	ldr	r3, [pc, #264]	@ (8002dac <pvPortMalloc+0x16c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002ca8:	e004      	b.n	8002cb4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cac:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d903      	bls.n	8002cc6 <pvPortMalloc+0x86>
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f1      	bne.n	8002caa <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002cc6:	4b37      	ldr	r3, [pc, #220]	@ (8002da4 <pvPortMalloc+0x164>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d050      	beq.n	8002d72 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2208      	movs	r2, #8
 8002cd6:	4413      	add	r3, r2
 8002cd8:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	1ad2      	subs	r2, r2, r3
 8002cea:	2308      	movs	r3, #8
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d920      	bls.n	8002d34 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002cf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00b      	beq.n	8002d1c <pvPortMalloc+0xdc>
        __asm volatile
 8002d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d08:	f383 8811 	msr	BASEPRI, r3
 8002d0c:	f3bf 8f6f 	isb	sy
 8002d10:	f3bf 8f4f 	dsb	sy
 8002d14:	613b      	str	r3, [r7, #16]
    }
 8002d16:	bf00      	nop
 8002d18:	bf00      	nop
 8002d1a:	e7fd      	b.n	8002d18 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	1ad2      	subs	r2, r2, r3
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002d2e:	6978      	ldr	r0, [r7, #20]
 8002d30:	f000 f8fc 	bl	8002f2c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002d34:	4b1c      	ldr	r3, [pc, #112]	@ (8002da8 <pvPortMalloc+0x168>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	4a1a      	ldr	r2, [pc, #104]	@ (8002da8 <pvPortMalloc+0x168>)
 8002d40:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002d42:	4b19      	ldr	r3, [pc, #100]	@ (8002da8 <pvPortMalloc+0x168>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	4b1a      	ldr	r3, [pc, #104]	@ (8002db0 <pvPortMalloc+0x170>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d203      	bcs.n	8002d56 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002d4e:	4b16      	ldr	r3, [pc, #88]	@ (8002da8 <pvPortMalloc+0x168>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a17      	ldr	r2, [pc, #92]	@ (8002db0 <pvPortMalloc+0x170>)
 8002d54:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d60:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002d68:	4b12      	ldr	r3, [pc, #72]	@ (8002db4 <pvPortMalloc+0x174>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	4a11      	ldr	r2, [pc, #68]	@ (8002db4 <pvPortMalloc+0x174>)
 8002d70:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002d72:	f7ff f92d 	bl	8001fd0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00b      	beq.n	8002d98 <pvPortMalloc+0x158>
        __asm volatile
 8002d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d84:	f383 8811 	msr	BASEPRI, r3
 8002d88:	f3bf 8f6f 	isb	sy
 8002d8c:	f3bf 8f4f 	dsb	sy
 8002d90:	60fb      	str	r3, [r7, #12]
    }
 8002d92:	bf00      	nop
 8002d94:	bf00      	nop
 8002d96:	e7fd      	b.n	8002d94 <pvPortMalloc+0x154>
    return pvReturn;
 8002d98:	69fb      	ldr	r3, [r7, #28]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3728      	adds	r7, #40	@ 0x28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	200081f4 	.word	0x200081f4
 8002da8:	200081f8 	.word	0x200081f8
 8002dac:	200081ec 	.word	0x200081ec
 8002db0:	200081fc 	.word	0x200081fc
 8002db4:	20008200 	.word	0x20008200

08002db8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d04b      	beq.n	8002e62 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002dca:	2308      	movs	r3, #8
 8002dcc:	425b      	negs	r3, r3
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	db0b      	blt.n	8002df8 <vPortFree+0x40>
        __asm volatile
 8002de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002de4:	f383 8811 	msr	BASEPRI, r3
 8002de8:	f3bf 8f6f 	isb	sy
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	60fb      	str	r3, [r7, #12]
    }
 8002df2:	bf00      	nop
 8002df4:	bf00      	nop
 8002df6:	e7fd      	b.n	8002df4 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00b      	beq.n	8002e18 <vPortFree+0x60>
        __asm volatile
 8002e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e04:	f383 8811 	msr	BASEPRI, r3
 8002e08:	f3bf 8f6f 	isb	sy
 8002e0c:	f3bf 8f4f 	dsb	sy
 8002e10:	60bb      	str	r3, [r7, #8]
    }
 8002e12:	bf00      	nop
 8002e14:	bf00      	nop
 8002e16:	e7fd      	b.n	8002e14 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	0fdb      	lsrs	r3, r3, #31
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d01c      	beq.n	8002e62 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d118      	bne.n	8002e62 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002e3c:	f7ff f8ba 	bl	8001fb4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	4b09      	ldr	r3, [pc, #36]	@ (8002e6c <vPortFree+0xb4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4413      	add	r3, r2
 8002e4a:	4a08      	ldr	r2, [pc, #32]	@ (8002e6c <vPortFree+0xb4>)
 8002e4c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002e4e:	6938      	ldr	r0, [r7, #16]
 8002e50:	f000 f86c 	bl	8002f2c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002e54:	4b06      	ldr	r3, [pc, #24]	@ (8002e70 <vPortFree+0xb8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	4a05      	ldr	r2, [pc, #20]	@ (8002e70 <vPortFree+0xb8>)
 8002e5c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002e5e:	f7ff f8b7 	bl	8001fd0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002e62:	bf00      	nop
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	200081f8 	.word	0x200081f8
 8002e70:	20008204 	.word	0x20008204

08002e74 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002e7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e7e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002e80:	4b25      	ldr	r3, [pc, #148]	@ (8002f18 <prvHeapInit+0xa4>)
 8002e82:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00c      	beq.n	8002ea8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	3307      	adds	r3, #7
 8002e92:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0307 	bic.w	r3, r3, #7
 8002e9a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	4a1d      	ldr	r2, [pc, #116]	@ (8002f18 <prvHeapInit+0xa4>)
 8002ea4:	4413      	add	r3, r2
 8002ea6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002eac:	4a1b      	ldr	r2, [pc, #108]	@ (8002f1c <prvHeapInit+0xa8>)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f1c <prvHeapInit+0xa8>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002ec0:	2208      	movs	r2, #8
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1a9b      	subs	r3, r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f023 0307 	bic.w	r3, r3, #7
 8002ece:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4a13      	ldr	r2, [pc, #76]	@ (8002f20 <prvHeapInit+0xac>)
 8002ed4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002ed6:	4b12      	ldr	r3, [pc, #72]	@ (8002f20 <prvHeapInit+0xac>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2200      	movs	r2, #0
 8002edc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002ede:	4b10      	ldr	r3, [pc, #64]	@ (8002f20 <prvHeapInit+0xac>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	1ad2      	subs	r2, r2, r3
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8002f20 <prvHeapInit+0xac>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	4a08      	ldr	r2, [pc, #32]	@ (8002f24 <prvHeapInit+0xb0>)
 8002f02:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	4a07      	ldr	r2, [pc, #28]	@ (8002f28 <prvHeapInit+0xb4>)
 8002f0a:	6013      	str	r3, [r2, #0]
}
 8002f0c:	bf00      	nop
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	200001ec 	.word	0x200001ec
 8002f1c:	200081ec 	.word	0x200081ec
 8002f20:	200081f4 	.word	0x200081f4
 8002f24:	200081fc 	.word	0x200081fc
 8002f28:	200081f8 	.word	0x200081f8

08002f2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002f34:	4b28      	ldr	r3, [pc, #160]	@ (8002fd8 <prvInsertBlockIntoFreeList+0xac>)
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	e002      	b.n	8002f40 <prvInsertBlockIntoFreeList+0x14>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d8f7      	bhi.n	8002f3a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	4413      	add	r3, r2
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d108      	bne.n	8002f6e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	441a      	add	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	441a      	add	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d118      	bne.n	8002fb4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	4b15      	ldr	r3, [pc, #84]	@ (8002fdc <prvInsertBlockIntoFreeList+0xb0>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d00d      	beq.n	8002faa <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	441a      	add	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	e008      	b.n	8002fbc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002faa:	4b0c      	ldr	r3, [pc, #48]	@ (8002fdc <prvInsertBlockIntoFreeList+0xb0>)
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	e003      	b.n	8002fbc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d002      	beq.n	8002fca <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002fca:	bf00      	nop
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	200081ec 	.word	0x200081ec
 8002fdc:	200081f4 	.word	0x200081f4

08002fe0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8002fe4:	4803      	ldr	r0, [pc, #12]	@ (8002ff4 <_cbSendSystemDesc+0x14>)
 8002fe6:	f001 fa31 	bl	800444c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8002fea:	4803      	ldr	r0, [pc, #12]	@ (8002ff8 <_cbSendSystemDesc+0x18>)
 8002fec:	f001 fa2e 	bl	800444c <SEGGER_SYSVIEW_SendSysDesc>
}
 8002ff0:	bf00      	nop
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	0800592c 	.word	0x0800592c
 8002ff8:	0800596c 	.word	0x0800596c

08002ffc <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003000:	4b06      	ldr	r3, [pc, #24]	@ (800301c <SEGGER_SYSVIEW_Conf+0x20>)
 8003002:	6818      	ldr	r0, [r3, #0]
 8003004:	4b05      	ldr	r3, [pc, #20]	@ (800301c <SEGGER_SYSVIEW_Conf+0x20>)
 8003006:	6819      	ldr	r1, [r3, #0]
 8003008:	4b05      	ldr	r3, [pc, #20]	@ (8003020 <SEGGER_SYSVIEW_Conf+0x24>)
 800300a:	4a06      	ldr	r2, [pc, #24]	@ (8003024 <SEGGER_SYSVIEW_Conf+0x28>)
 800300c:	f000 fea4 	bl	8003d58 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003010:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8003014:	f000 fee4 	bl	8003de0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003018:	bf00      	nop
 800301a:	bd80      	pop	{r7, pc}
 800301c:	20000000 	.word	0x20000000
 8003020:	08002fe1 	.word	0x08002fe1
 8003024:	08005a08 	.word	0x08005a08

08003028 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800302a:	b085      	sub	sp, #20
 800302c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800302e:	2300      	movs	r3, #0
 8003030:	607b      	str	r3, [r7, #4]
 8003032:	e033      	b.n	800309c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003034:	491e      	ldr	r1, [pc, #120]	@ (80030b0 <_cbSendTaskList+0x88>)
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	491a      	ldr	r1, [pc, #104]	@ (80030b0 <_cbSendTaskList+0x88>)
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	3304      	adds	r3, #4
 8003054:	6819      	ldr	r1, [r3, #0]
 8003056:	4c16      	ldr	r4, [pc, #88]	@ (80030b0 <_cbSendTaskList+0x88>)
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4423      	add	r3, r4
 8003064:	3308      	adds	r3, #8
 8003066:	681c      	ldr	r4, [r3, #0]
 8003068:	4d11      	ldr	r5, [pc, #68]	@ (80030b0 <_cbSendTaskList+0x88>)
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	442b      	add	r3, r5
 8003076:	330c      	adds	r3, #12
 8003078:	681d      	ldr	r5, [r3, #0]
 800307a:	4e0d      	ldr	r6, [pc, #52]	@ (80030b0 <_cbSendTaskList+0x88>)
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4433      	add	r3, r6
 8003088:	3310      	adds	r3, #16
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	462b      	mov	r3, r5
 8003090:	4622      	mov	r2, r4
 8003092:	f000 f8bd 	bl	8003210 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3301      	adds	r3, #1
 800309a:	607b      	str	r3, [r7, #4]
 800309c:	4b05      	ldr	r3, [pc, #20]	@ (80030b4 <_cbSendTaskList+0x8c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d3c6      	bcc.n	8003034 <_cbSendTaskList+0xc>
  }
}
 80030a6:	bf00      	nop
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030b0:	20008208 	.word	0x20008208
 80030b4:	200082a8 	.word	0x200082a8

080030b8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80030b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030bc:	b082      	sub	sp, #8
 80030be:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80030c0:	f7ff f886 	bl	80021d0 <xTaskGetTickCountFromISR>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2200      	movs	r2, #0
 80030c8:	469a      	mov	sl, r3
 80030ca:	4693      	mov	fp, r2
 80030cc:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80030d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	f04f 0a00 	mov.w	sl, #0
 80030dc:	f04f 0b00 	mov.w	fp, #0
 80030e0:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80030e4:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80030e8:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80030ec:	4652      	mov	r2, sl
 80030ee:	465b      	mov	r3, fp
 80030f0:	1a14      	subs	r4, r2, r0
 80030f2:	eb63 0501 	sbc.w	r5, r3, r1
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	00ab      	lsls	r3, r5, #2
 8003100:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003104:	00a2      	lsls	r2, r4, #2
 8003106:	4614      	mov	r4, r2
 8003108:	461d      	mov	r5, r3
 800310a:	eb14 0800 	adds.w	r8, r4, r0
 800310e:	eb45 0901 	adc.w	r9, r5, r1
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	f04f 0300 	mov.w	r3, #0
 800311a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800311e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003122:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003126:	4690      	mov	r8, r2
 8003128:	4699      	mov	r9, r3
 800312a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800312e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003132:	4610      	mov	r0, r2
 8003134:	4619      	mov	r1, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003140 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af02      	add	r7, sp, #8
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800314e:	2205      	movs	r2, #5
 8003150:	492b      	ldr	r1, [pc, #172]	@ (8003200 <SYSVIEW_AddTask+0xc0>)
 8003152:	68b8      	ldr	r0, [r7, #8]
 8003154:	f001 fd97 	bl	8004c86 <memcmp>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d04b      	beq.n	80031f6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800315e:	4b29      	ldr	r3, [pc, #164]	@ (8003204 <SYSVIEW_AddTask+0xc4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2b07      	cmp	r3, #7
 8003164:	d903      	bls.n	800316e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003166:	4828      	ldr	r0, [pc, #160]	@ (8003208 <SYSVIEW_AddTask+0xc8>)
 8003168:	f001 fc08 	bl	800497c <SEGGER_SYSVIEW_Warn>
    return;
 800316c:	e044      	b.n	80031f8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800316e:	4b25      	ldr	r3, [pc, #148]	@ (8003204 <SYSVIEW_AddTask+0xc4>)
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	4926      	ldr	r1, [pc, #152]	@ (800320c <SYSVIEW_AddTask+0xcc>)
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003182:	4b20      	ldr	r3, [pc, #128]	@ (8003204 <SYSVIEW_AddTask+0xc4>)
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	4921      	ldr	r1, [pc, #132]	@ (800320c <SYSVIEW_AddTask+0xcc>)
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	3304      	adds	r3, #4
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003198:	4b1a      	ldr	r3, [pc, #104]	@ (8003204 <SYSVIEW_AddTask+0xc4>)
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	491b      	ldr	r1, [pc, #108]	@ (800320c <SYSVIEW_AddTask+0xcc>)
 800319e:	4613      	mov	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	3308      	adds	r3, #8
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80031ae:	4b15      	ldr	r3, [pc, #84]	@ (8003204 <SYSVIEW_AddTask+0xc4>)
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	4916      	ldr	r1, [pc, #88]	@ (800320c <SYSVIEW_AddTask+0xcc>)
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	330c      	adds	r3, #12
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80031c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003204 <SYSVIEW_AddTask+0xc4>)
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	4910      	ldr	r1, [pc, #64]	@ (800320c <SYSVIEW_AddTask+0xcc>)
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	3310      	adds	r3, #16
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80031da:	4b0a      	ldr	r3, [pc, #40]	@ (8003204 <SYSVIEW_AddTask+0xc4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3301      	adds	r3, #1
 80031e0:	4a08      	ldr	r2, [pc, #32]	@ (8003204 <SYSVIEW_AddTask+0xc4>)
 80031e2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	68b9      	ldr	r1, [r7, #8]
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 f80e 	bl	8003210 <SYSVIEW_SendTaskInfo>
 80031f4:	e000      	b.n	80031f8 <SYSVIEW_AddTask+0xb8>
    return;
 80031f6:	bf00      	nop

}
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	0800597c 	.word	0x0800597c
 8003204:	200082a8 	.word	0x200082a8
 8003208:	08005984 	.word	0x08005984
 800320c:	20008208 	.word	0x20008208

08003210 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003210:	b580      	push	{r7, lr}
 8003212:	b08a      	sub	sp, #40	@ 0x28
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
 800321c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800321e:	f107 0310 	add.w	r3, r7, #16
 8003222:	2218      	movs	r2, #24
 8003224:	2100      	movs	r1, #0
 8003226:	4618      	mov	r0, r3
 8003228:	f001 fd3d 	bl	8004ca6 <memset>
  TaskInfo.TaskID     = TaskID;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 800323c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800323e:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003240:	f107 0310 	add.w	r3, r7, #16
 8003244:	4618      	mov	r0, r3
 8003246:	f001 f809 	bl	800425c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800324a:	bf00      	nop
 800324c:	3728      	adds	r7, #40	@ 0x28
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800325a:	4b26      	ldr	r3, [pc, #152]	@ (80032f4 <_DoInit+0xa0>)
 800325c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800325e:	22a8      	movs	r2, #168	@ 0xa8
 8003260:	2100      	movs	r1, #0
 8003262:	6838      	ldr	r0, [r7, #0]
 8003264:	f001 fd1f 	bl	8004ca6 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2203      	movs	r2, #3
 800326c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2203      	movs	r2, #3
 8003272:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	4a20      	ldr	r2, [pc, #128]	@ (80032f8 <_DoInit+0xa4>)
 8003278:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	4a1f      	ldr	r2, [pc, #124]	@ (80032fc <_DoInit+0xa8>)
 800327e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003286:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	2200      	movs	r2, #0
 800328c:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2200      	movs	r2, #0
 8003292:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	2200      	movs	r2, #0
 8003298:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	4a16      	ldr	r2, [pc, #88]	@ (80032f8 <_DoInit+0xa4>)
 800329e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	4a17      	ldr	r2, [pc, #92]	@ (8003300 <_DoInit+0xac>)
 80032a4:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2210      	movs	r2, #16
 80032aa:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	2200      	movs	r2, #0
 80032b0:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2200      	movs	r2, #0
 80032b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	2200      	movs	r2, #0
 80032bc:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80032be:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80032c2:	2300      	movs	r3, #0
 80032c4:	607b      	str	r3, [r7, #4]
 80032c6:	e00c      	b.n	80032e2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f1c3 030f 	rsb	r3, r3, #15
 80032ce:	4a0d      	ldr	r2, [pc, #52]	@ (8003304 <_DoInit+0xb0>)
 80032d0:	5cd1      	ldrb	r1, [r2, r3]
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4413      	add	r3, r2
 80032d8:	460a      	mov	r2, r1
 80032da:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3301      	adds	r3, #1
 80032e0:	607b      	str	r3, [r7, #4]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b0f      	cmp	r3, #15
 80032e6:	d9ef      	bls.n	80032c8 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80032e8:	f3bf 8f5f 	dmb	sy
}
 80032ec:	bf00      	nop
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	200082ac 	.word	0x200082ac
 80032f8:	080059d4 	.word	0x080059d4
 80032fc:	20008354 	.word	0x20008354
 8003300:	20008754 	.word	0x20008754
 8003304:	08005a10 	.word	0x08005a10

08003308 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003308:	b580      	push	{r7, lr}
 800330a:	b08a      	sub	sp, #40	@ 0x28
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003314:	2300      	movs	r3, #0
 8003316:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	429a      	cmp	r2, r3
 800332a:	d905      	bls.n	8003338 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	3b01      	subs	r3, #1
 8003334:	627b      	str	r3, [r7, #36]	@ 0x24
 8003336:	e007      	b.n	8003348 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	69b9      	ldr	r1, [r7, #24]
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	1acb      	subs	r3, r1, r3
 8003342:	4413      	add	r3, r2
 8003344:	3b01      	subs	r3, #1
 8003346:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003352:	4293      	cmp	r3, r2
 8003354:	bf28      	it	cs
 8003356:	4613      	movcs	r3, r2
 8003358:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800335a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4293      	cmp	r3, r2
 8003360:	bf28      	it	cs
 8003362:	4613      	movcs	r3, r2
 8003364:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	4413      	add	r3, r2
 800336e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003370:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	6978      	ldr	r0, [r7, #20]
 8003376:	f001 fcfa 	bl	8004d6e <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800337a:	6a3a      	ldr	r2, [r7, #32]
 800337c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337e:	4413      	add	r3, r2
 8003380:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003386:	4413      	add	r3, r2
 8003388:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003392:	69fa      	ldr	r2, [r7, #28]
 8003394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003396:	4413      	add	r3, r2
 8003398:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	69fa      	ldr	r2, [r7, #28]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d101      	bne.n	80033a8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80033a4:	2300      	movs	r3, #0
 80033a6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80033a8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	69fa      	ldr	r2, [r7, #28]
 80033b0:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1b2      	bne.n	800331e <_WriteBlocking+0x16>
  return NumBytesWritten;
 80033b8:	6a3b      	ldr	r3, [r7, #32]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3728      	adds	r7, #40	@ 0x28
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b088      	sub	sp, #32
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d911      	bls.n	800340a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	4413      	add	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	6938      	ldr	r0, [r7, #16]
 80033f6:	f001 fcba 	bl	8004d6e <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80033fa:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80033fe:	69fa      	ldr	r2, [r7, #28]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	441a      	add	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003408:	e01f      	b.n	800344a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	4413      	add	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	68b9      	ldr	r1, [r7, #8]
 800341c:	6938      	ldr	r0, [r7, #16]
 800341e:	f001 fca6 	bl	8004d6e <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	4413      	add	r3, r2
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	4619      	mov	r1, r3
 800343a:	6938      	ldr	r0, [r7, #16]
 800343c:	f001 fc97 	bl	8004d6e <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003440:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	60da      	str	r2, [r3, #12]
}
 800344a:	bf00      	nop
 800344c:	3720      	adds	r7, #32
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003452:	b480      	push	{r7}
 8003454:	b087      	sub	sp, #28
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	429a      	cmp	r2, r3
 800346c:	d808      	bhi.n	8003480 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	1ad2      	subs	r2, r2, r3
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4413      	add	r3, r2
 800347a:	3b01      	subs	r3, #1
 800347c:	617b      	str	r3, [r7, #20]
 800347e:	e004      	b.n	800348a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	3b01      	subs	r3, #1
 8003488:	617b      	str	r3, [r7, #20]
  }
  return r;
 800348a:	697b      	ldr	r3, [r7, #20]
}
 800348c:	4618      	mov	r0, r3
 800348e:	371c      	adds	r7, #28
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003498:	b580      	push	{r7, lr}
 800349a:	b08c      	sub	sp, #48	@ 0x30
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80034a4:	4b3e      	ldr	r3, [pc, #248]	@ (80035a0 <SEGGER_RTT_ReadNoLock+0x108>)
 80034a6:	623b      	str	r3, [r7, #32]
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b53      	cmp	r3, #83	@ 0x53
 80034b0:	d001      	beq.n	80034b6 <SEGGER_RTT_ReadNoLock+0x1e>
 80034b2:	f7ff fecf 	bl	8003254 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	4613      	mov	r3, r2
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	4413      	add	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	3360      	adds	r3, #96	@ 0x60
 80034c2:	4a37      	ldr	r2, [pc, #220]	@ (80035a0 <SEGGER_RTT_ReadNoLock+0x108>)
 80034c4:	4413      	add	r3, r2
 80034c6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80034d8:	2300      	movs	r3, #0
 80034da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80034dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d92b      	bls.n	800353c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4293      	cmp	r3, r2
 80034f4:	bf28      	it	cs
 80034f6:	4613      	movcs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003500:	4413      	add	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	6939      	ldr	r1, [r7, #16]
 8003508:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800350a:	f001 fc30 	bl	8004d6e <memcpy>
    NumBytesRead += NumBytesRem;
 800350e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	4413      	add	r3, r2
 8003514:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	4413      	add	r3, r2
 800351c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003526:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	4413      	add	r3, r2
 800352c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003534:	429a      	cmp	r2, r3
 8003536:	d101      	bne.n	800353c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003538:	2300      	movs	r3, #0
 800353a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4293      	cmp	r3, r2
 800354a:	bf28      	it	cs
 800354c:	4613      	movcs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d019      	beq.n	800358a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800355c:	4413      	add	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	6939      	ldr	r1, [r7, #16]
 8003564:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003566:	f001 fc02 	bl	8004d6e <memcpy>
    NumBytesRead += NumBytesRem;
 800356a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	4413      	add	r3, r2
 8003570:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	4413      	add	r3, r2
 8003578:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003582:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	4413      	add	r3, r2
 8003588:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800358a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003594:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003598:	4618      	mov	r0, r3
 800359a:	3730      	adds	r7, #48	@ 0x30
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	200082ac 	.word	0x200082ac

080035a4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	4613      	mov	r3, r2
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	4413      	add	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003640 <SEGGER_RTT_WriteNoLock+0x9c>)
 80035c2:	4413      	add	r3, r2
 80035c4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d029      	beq.n	8003622 <SEGGER_RTT_WriteNoLock+0x7e>
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d82e      	bhi.n	8003630 <SEGGER_RTT_WriteNoLock+0x8c>
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <SEGGER_RTT_WriteNoLock+0x38>
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d013      	beq.n	8003602 <SEGGER_RTT_WriteNoLock+0x5e>
 80035da:	e029      	b.n	8003630 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80035dc:	6978      	ldr	r0, [r7, #20]
 80035de:	f7ff ff38 	bl	8003452 <_GetAvailWriteSpace>
 80035e2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d202      	bcs.n	80035f2 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80035ec:	2300      	movs	r3, #0
 80035ee:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80035f0:	e021      	b.n	8003636 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	69b9      	ldr	r1, [r7, #24]
 80035fa:	6978      	ldr	r0, [r7, #20]
 80035fc:	f7ff fee1 	bl	80033c2 <_WriteNoCheck>
    break;
 8003600:	e019      	b.n	8003636 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003602:	6978      	ldr	r0, [r7, #20]
 8003604:	f7ff ff25 	bl	8003452 <_GetAvailWriteSpace>
 8003608:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	4293      	cmp	r3, r2
 8003610:	bf28      	it	cs
 8003612:	4613      	movcs	r3, r2
 8003614:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003616:	69fa      	ldr	r2, [r7, #28]
 8003618:	69b9      	ldr	r1, [r7, #24]
 800361a:	6978      	ldr	r0, [r7, #20]
 800361c:	f7ff fed1 	bl	80033c2 <_WriteNoCheck>
    break;
 8003620:	e009      	b.n	8003636 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	69b9      	ldr	r1, [r7, #24]
 8003626:	6978      	ldr	r0, [r7, #20]
 8003628:	f7ff fe6e 	bl	8003308 <_WriteBlocking>
 800362c:	61f8      	str	r0, [r7, #28]
    break;
 800362e:	e002      	b.n	8003636 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8003630:	2300      	movs	r3, #0
 8003632:	61fb      	str	r3, [r7, #28]
    break;
 8003634:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003636:	69fb      	ldr	r3, [r7, #28]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3720      	adds	r7, #32
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	200082ac 	.word	0x200082ac

08003644 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003650:	4b0e      	ldr	r3, [pc, #56]	@ (800368c <SEGGER_RTT_Write+0x48>)
 8003652:	61fb      	str	r3, [r7, #28]
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b53      	cmp	r3, #83	@ 0x53
 800365c:	d001      	beq.n	8003662 <SEGGER_RTT_Write+0x1e>
 800365e:	f7ff fdf9 	bl	8003254 <_DoInit>
  SEGGER_RTT_LOCK();
 8003662:	f3ef 8311 	mrs	r3, BASEPRI
 8003666:	f04f 0120 	mov.w	r1, #32
 800366a:	f381 8811 	msr	BASEPRI, r1
 800366e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	68b9      	ldr	r1, [r7, #8]
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f7ff ff95 	bl	80035a4 <SEGGER_RTT_WriteNoLock>
 800367a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003682:	697b      	ldr	r3, [r7, #20]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3720      	adds	r7, #32
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	200082ac 	.word	0x200082ac

08003690 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
 800369c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800369e:	4b3d      	ldr	r3, [pc, #244]	@ (8003794 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80036a0:	61bb      	str	r3, [r7, #24]
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b53      	cmp	r3, #83	@ 0x53
 80036aa:	d001      	beq.n	80036b0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80036ac:	f7ff fdd2 	bl	8003254 <_DoInit>
  SEGGER_RTT_LOCK();
 80036b0:	f3ef 8311 	mrs	r3, BASEPRI
 80036b4:	f04f 0120 	mov.w	r1, #32
 80036b8:	f381 8811 	msr	BASEPRI, r1
 80036bc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80036be:	4b35      	ldr	r3, [pc, #212]	@ (8003794 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80036c0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80036c6:	6939      	ldr	r1, [r7, #16]
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	4613      	mov	r3, r2
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	4413      	add	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	440b      	add	r3, r1
 80036d6:	3304      	adds	r3, #4
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d008      	beq.n	80036f0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	3301      	adds	r3, #1
 80036e2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	69fa      	ldr	r2, [r7, #28]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	dbeb      	blt.n	80036c6 <SEGGER_RTT_AllocUpBuffer+0x36>
 80036ee:	e000      	b.n	80036f2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80036f0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	69fa      	ldr	r2, [r7, #28]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	da3f      	bge.n	800377c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80036fc:	6939      	ldr	r1, [r7, #16]
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	1c5a      	adds	r2, r3, #1
 8003702:	4613      	mov	r3, r2
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	4413      	add	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	440b      	add	r3, r1
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003710:	6939      	ldr	r1, [r7, #16]
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	4613      	mov	r3, r2
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	4413      	add	r3, r2
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	440b      	add	r3, r1
 8003720:	3304      	adds	r3, #4
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003726:	6939      	ldr	r1, [r7, #16]
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	4613      	mov	r3, r2
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	4413      	add	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	440b      	add	r3, r1
 8003734:	3320      	adds	r3, #32
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800373a:	6939      	ldr	r1, [r7, #16]
 800373c:	69fa      	ldr	r2, [r7, #28]
 800373e:	4613      	mov	r3, r2
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	4413      	add	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	440b      	add	r3, r1
 8003748:	3328      	adds	r3, #40	@ 0x28
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800374e:	6939      	ldr	r1, [r7, #16]
 8003750:	69fa      	ldr	r2, [r7, #28]
 8003752:	4613      	mov	r3, r2
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	4413      	add	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	440b      	add	r3, r1
 800375c:	3324      	adds	r3, #36	@ 0x24
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003762:	6939      	ldr	r1, [r7, #16]
 8003764:	69fa      	ldr	r2, [r7, #28]
 8003766:	4613      	mov	r3, r2
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	4413      	add	r3, r2
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	440b      	add	r3, r1
 8003770:	332c      	adds	r3, #44	@ 0x2c
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003776:	f3bf 8f5f 	dmb	sy
 800377a:	e002      	b.n	8003782 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800377c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003780:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003788:	69fb      	ldr	r3, [r7, #28]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3720      	adds	r7, #32
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	200082ac 	.word	0x200082ac

08003798 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003798:	b580      	push	{r7, lr}
 800379a:	b08a      	sub	sp, #40	@ 0x28
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80037a6:	4b21      	ldr	r3, [pc, #132]	@ (800382c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80037a8:	623b      	str	r3, [r7, #32]
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b53      	cmp	r3, #83	@ 0x53
 80037b2:	d001      	beq.n	80037b8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80037b4:	f7ff fd4e 	bl	8003254 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80037b8:	4b1c      	ldr	r3, [pc, #112]	@ (800382c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80037ba:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d82c      	bhi.n	800381c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80037c2:	f3ef 8311 	mrs	r3, BASEPRI
 80037c6:	f04f 0120 	mov.w	r1, #32
 80037ca:	f381 8811 	msr	BASEPRI, r1
 80037ce:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	4613      	mov	r3, r2
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	4413      	add	r3, r2
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	3360      	adds	r3, #96	@ 0x60
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	4413      	add	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00e      	beq.n	8003806 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2200      	movs	r2, #0
 80037fe:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	2200      	movs	r2, #0
 8003804:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800380a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800380c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003816:	2300      	movs	r3, #0
 8003818:	627b      	str	r3, [r7, #36]	@ 0x24
 800381a:	e002      	b.n	8003822 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800381c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003820:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8003822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003824:	4618      	mov	r0, r3
 8003826:	3728      	adds	r7, #40	@ 0x28
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	200082ac 	.word	0x200082ac

08003830 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d105      	bne.n	800384e <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	1c5a      	adds	r2, r3, #1
 8003846:	60fa      	str	r2, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	701a      	strb	r2, [r3, #0]
 800384c:	e022      	b.n	8003894 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	60fa      	str	r2, [r7, #12]
 8003858:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b80      	cmp	r3, #128	@ 0x80
 800385e:	d90a      	bls.n	8003876 <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8003860:	2380      	movs	r3, #128	@ 0x80
 8003862:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8003864:	e007      	b.n	8003876 <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	1c53      	adds	r3, r2, #1
 800386a:	60bb      	str	r3, [r7, #8]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	1c59      	adds	r1, r3, #1
 8003870:	60f9      	str	r1, [r7, #12]
 8003872:	7812      	ldrb	r2, [r2, #0]
 8003874:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	1e5a      	subs	r2, r3, #1
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <_EncodeStr+0x58>
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1ee      	bne.n	8003866 <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	b2da      	uxtb	r2, r3
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8003894:	68fb      	ldr	r3, [r7, #12]
}
 8003896:	4618      	mov	r0, r3
 8003898:	371c      	adds	r7, #28
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3307      	adds	r3, #7
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
	...

080038bc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80038c2:	4b34      	ldr	r3, [pc, #208]	@ (8003994 <_HandleIncomingPacket+0xd8>)
 80038c4:	7e1b      	ldrb	r3, [r3, #24]
 80038c6:	4618      	mov	r0, r3
 80038c8:	1cfb      	adds	r3, r7, #3
 80038ca:	2201      	movs	r2, #1
 80038cc:	4619      	mov	r1, r3
 80038ce:	f7ff fde3 	bl	8003498 <SEGGER_RTT_ReadNoLock>
 80038d2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d057      	beq.n	800398a <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80038da:	78fb      	ldrb	r3, [r7, #3]
 80038dc:	2b80      	cmp	r3, #128	@ 0x80
 80038de:	d031      	beq.n	8003944 <_HandleIncomingPacket+0x88>
 80038e0:	2b80      	cmp	r3, #128	@ 0x80
 80038e2:	dc40      	bgt.n	8003966 <_HandleIncomingPacket+0xaa>
 80038e4:	2b07      	cmp	r3, #7
 80038e6:	dc15      	bgt.n	8003914 <_HandleIncomingPacket+0x58>
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	dd3c      	ble.n	8003966 <_HandleIncomingPacket+0xaa>
 80038ec:	3b01      	subs	r3, #1
 80038ee:	2b06      	cmp	r3, #6
 80038f0:	d839      	bhi.n	8003966 <_HandleIncomingPacket+0xaa>
 80038f2:	a201      	add	r2, pc, #4	@ (adr r2, 80038f8 <_HandleIncomingPacket+0x3c>)
 80038f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f8:	0800391b 	.word	0x0800391b
 80038fc:	08003921 	.word	0x08003921
 8003900:	08003927 	.word	0x08003927
 8003904:	0800392d 	.word	0x0800392d
 8003908:	08003933 	.word	0x08003933
 800390c:	08003939 	.word	0x08003939
 8003910:	0800393f 	.word	0x0800393f
 8003914:	2b7f      	cmp	r3, #127	@ 0x7f
 8003916:	d033      	beq.n	8003980 <_HandleIncomingPacket+0xc4>
 8003918:	e025      	b.n	8003966 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800391a:	f000 fb25 	bl	8003f68 <SEGGER_SYSVIEW_Start>
      break;
 800391e:	e034      	b.n	800398a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003920:	f000 fbdc 	bl	80040dc <SEGGER_SYSVIEW_Stop>
      break;
 8003924:	e031      	b.n	800398a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003926:	f000 fdb5 	bl	8004494 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800392a:	e02e      	b.n	800398a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800392c:	f000 fd7a 	bl	8004424 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003930:	e02b      	b.n	800398a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003932:	f000 fbf9 	bl	8004128 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003936:	e028      	b.n	800398a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003938:	f000 ffe2 	bl	8004900 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800393c:	e025      	b.n	800398a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800393e:	f000 ffc1 	bl	80048c4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003942:	e022      	b.n	800398a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003944:	4b13      	ldr	r3, [pc, #76]	@ (8003994 <_HandleIncomingPacket+0xd8>)
 8003946:	7e1b      	ldrb	r3, [r3, #24]
 8003948:	4618      	mov	r0, r3
 800394a:	1cfb      	adds	r3, r7, #3
 800394c:	2201      	movs	r2, #1
 800394e:	4619      	mov	r1, r3
 8003950:	f7ff fda2 	bl	8003498 <SEGGER_RTT_ReadNoLock>
 8003954:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d013      	beq.n	8003984 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	4618      	mov	r0, r3
 8003960:	f000 ff26 	bl	80047b0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003964:	e00e      	b.n	8003984 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003966:	78fb      	ldrb	r3, [r7, #3]
 8003968:	b25b      	sxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	da0c      	bge.n	8003988 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800396e:	4b09      	ldr	r3, [pc, #36]	@ (8003994 <_HandleIncomingPacket+0xd8>)
 8003970:	7e1b      	ldrb	r3, [r3, #24]
 8003972:	4618      	mov	r0, r3
 8003974:	1cfb      	adds	r3, r7, #3
 8003976:	2201      	movs	r2, #1
 8003978:	4619      	mov	r1, r3
 800397a:	f7ff fd8d 	bl	8003498 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800397e:	e003      	b.n	8003988 <_HandleIncomingPacket+0xcc>
      break;
 8003980:	bf00      	nop
 8003982:	e002      	b.n	800398a <_HandleIncomingPacket+0xce>
      break;
 8003984:	bf00      	nop
 8003986:	e000      	b.n	800398a <_HandleIncomingPacket+0xce>
      break;
 8003988:	bf00      	nop
    }
  }
}
 800398a:	bf00      	nop
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	2000976c 	.word	0x2000976c

08003998 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003998:	b580      	push	{r7, lr}
 800399a:	b08c      	sub	sp, #48	@ 0x30
 800399c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800399e:	2301      	movs	r3, #1
 80039a0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80039a2:	1d3b      	adds	r3, r7, #4
 80039a4:	3301      	adds	r3, #1
 80039a6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039ac:	4b31      	ldr	r3, [pc, #196]	@ (8003a74 <_TrySendOverflowPacket+0xdc>)
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039b2:	e00b      	b.n	80039cc <_TrySendOverflowPacket+0x34>
 80039b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ba:	1c59      	adds	r1, r3, #1
 80039bc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80039be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	701a      	strb	r2, [r3, #0]
 80039c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c8:	09db      	lsrs	r3, r3, #7
 80039ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80039d0:	d8f0      	bhi.n	80039b4 <_TrySendOverflowPacket+0x1c>
 80039d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	701a      	strb	r2, [r3, #0]
 80039de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039e0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80039e2:	4b25      	ldr	r3, [pc, #148]	@ (8003a78 <_TrySendOverflowPacket+0xe0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 80039e8:	4b22      	ldr	r3, [pc, #136]	@ (8003a74 <_TrySendOverflowPacket+0xdc>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	623b      	str	r3, [r7, #32]
 80039fa:	e00b      	b.n	8003a14 <_TrySendOverflowPacket+0x7c>
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a02:	1c59      	adds	r1, r3, #1
 8003a04:	6279      	str	r1, [r7, #36]	@ 0x24
 8003a06:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	701a      	strb	r2, [r3, #0]
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	09db      	lsrs	r3, r3, #7
 8003a12:	623b      	str	r3, [r7, #32]
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	2b7f      	cmp	r3, #127	@ 0x7f
 8003a18:	d8f0      	bhi.n	80039fc <_TrySendOverflowPacket+0x64>
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a20:	6a3a      	ldr	r2, [r7, #32]
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	701a      	strb	r2, [r3, #0]
 8003a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a28:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8003a2a:	4b12      	ldr	r3, [pc, #72]	@ (8003a74 <_TrySendOverflowPacket+0xdc>)
 8003a2c:	785b      	ldrb	r3, [r3, #1]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	1d3b      	adds	r3, r7, #4
 8003a32:	69fa      	ldr	r2, [r7, #28]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	461a      	mov	r2, r3
 8003a38:	1d3b      	adds	r3, r7, #4
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	f7fc fbd0 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003a40:	4603      	mov	r3, r0
 8003a42:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d009      	beq.n	8003a5e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a74 <_TrySendOverflowPacket+0xdc>)
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003a50:	4b08      	ldr	r3, [pc, #32]	@ (8003a74 <_TrySendOverflowPacket+0xdc>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	4b06      	ldr	r3, [pc, #24]	@ (8003a74 <_TrySendOverflowPacket+0xdc>)
 8003a5a:	701a      	strb	r2, [r3, #0]
 8003a5c:	e004      	b.n	8003a68 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003a5e:	4b05      	ldr	r3, [pc, #20]	@ (8003a74 <_TrySendOverflowPacket+0xdc>)
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	3301      	adds	r3, #1
 8003a64:	4a03      	ldr	r2, [pc, #12]	@ (8003a74 <_TrySendOverflowPacket+0xdc>)
 8003a66:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003a68:	693b      	ldr	r3, [r7, #16]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3730      	adds	r7, #48	@ 0x30
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	2000976c 	.word	0x2000976c
 8003a78:	e0001004 	.word	0xe0001004

08003a7c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08a      	sub	sp, #40	@ 0x28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003a88:	4b98      	ldr	r3, [pc, #608]	@ (8003cec <_SendPacket+0x270>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d010      	beq.n	8003ab2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003a90:	4b96      	ldr	r3, [pc, #600]	@ (8003cec <_SendPacket+0x270>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 812d 	beq.w	8003cf4 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003a9a:	4b94      	ldr	r3, [pc, #592]	@ (8003cec <_SendPacket+0x270>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d109      	bne.n	8003ab6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003aa2:	f7ff ff79 	bl	8003998 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003aa6:	4b91      	ldr	r3, [pc, #580]	@ (8003cec <_SendPacket+0x270>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	f040 8124 	bne.w	8003cf8 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8003ab0:	e001      	b.n	8003ab6 <_SendPacket+0x3a>
    goto Send;
 8003ab2:	bf00      	nop
 8003ab4:	e000      	b.n	8003ab8 <_SendPacket+0x3c>
Send:
 8003ab6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b1f      	cmp	r3, #31
 8003abc:	d809      	bhi.n	8003ad2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003abe:	4b8b      	ldr	r3, [pc, #556]	@ (8003cec <_SendPacket+0x270>)
 8003ac0:	69da      	ldr	r2, [r3, #28]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f040 8115 	bne.w	8003cfc <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b17      	cmp	r3, #23
 8003ad6:	d807      	bhi.n	8003ae8 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	701a      	strb	r2, [r3, #0]
 8003ae6:	e0c4      	b.n	8003c72 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	2b7f      	cmp	r3, #127	@ 0x7f
 8003af4:	d912      	bls.n	8003b1c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	09da      	lsrs	r2, r3, #7
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	3b01      	subs	r3, #1
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	3a01      	subs	r2, #1
 8003b0e:	60fa      	str	r2, [r7, #12]
 8003b10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	701a      	strb	r2, [r3, #0]
 8003b1a:	e006      	b.n	8003b2a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b7e      	cmp	r3, #126	@ 0x7e
 8003b2e:	d807      	bhi.n	8003b40 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	701a      	strb	r2, [r3, #0]
 8003b3e:	e098      	b.n	8003c72 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b46:	d212      	bcs.n	8003b6e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	09da      	lsrs	r2, r3, #7
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	3a01      	subs	r2, #1
 8003b60:	60fa      	str	r2, [r7, #12]
 8003b62:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	701a      	strb	r2, [r3, #0]
 8003b6c:	e081      	b.n	8003c72 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b74:	d21d      	bcs.n	8003bb2 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	0b9a      	lsrs	r2, r3, #14
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	09db      	lsrs	r3, r3, #7
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	3a01      	subs	r2, #1
 8003b90:	60fa      	str	r2, [r7, #12]
 8003b92:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	3a01      	subs	r2, #1
 8003ba4:	60fa      	str	r2, [r7, #12]
 8003ba6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	701a      	strb	r2, [r3, #0]
 8003bb0:	e05f      	b.n	8003c72 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bb8:	d228      	bcs.n	8003c0c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	0d5a      	lsrs	r2, r3, #21
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	0b9b      	lsrs	r3, r3, #14
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	3a01      	subs	r2, #1
 8003bd4:	60fa      	str	r2, [r7, #12]
 8003bd6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	09db      	lsrs	r3, r3, #7
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	3a01      	subs	r2, #1
 8003bea:	60fa      	str	r2, [r7, #12]
 8003bec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	3a01      	subs	r2, #1
 8003bfe:	60fa      	str	r2, [r7, #12]
 8003c00:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	701a      	strb	r2, [r3, #0]
 8003c0a:	e032      	b.n	8003c72 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	0f1a      	lsrs	r2, r3, #28
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	0d5b      	lsrs	r3, r3, #21
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	3a01      	subs	r2, #1
 8003c26:	60fa      	str	r2, [r7, #12]
 8003c28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	0b9b      	lsrs	r3, r3, #14
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	3a01      	subs	r2, #1
 8003c3c:	60fa      	str	r2, [r7, #12]
 8003c3e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	09db      	lsrs	r3, r3, #7
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	3a01      	subs	r2, #1
 8003c52:	60fa      	str	r2, [r7, #12]
 8003c54:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	3a01      	subs	r2, #1
 8003c66:	60fa      	str	r2, [r7, #12]
 8003c68:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003c72:	4b1f      	ldr	r3, [pc, #124]	@ (8003cf0 <_SendPacket+0x274>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003c78:	4b1c      	ldr	r3, [pc, #112]	@ (8003cec <_SendPacket+0x270>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	623b      	str	r3, [r7, #32]
 8003c8a:	e00b      	b.n	8003ca4 <_SendPacket+0x228>
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c92:	1c59      	adds	r1, r3, #1
 8003c94:	6279      	str	r1, [r7, #36]	@ 0x24
 8003c96:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	701a      	strb	r2, [r3, #0]
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	09db      	lsrs	r3, r3, #7
 8003ca2:	623b      	str	r3, [r7, #32]
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ca8:	d8f0      	bhi.n	8003c8c <_SendPacket+0x210>
 8003caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	627a      	str	r2, [r7, #36]	@ 0x24
 8003cb0:	6a3a      	ldr	r2, [r7, #32]
 8003cb2:	b2d2      	uxtb	r2, r2
 8003cb4:	701a      	strb	r2, [r3, #0]
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb8:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8003cba:	4b0c      	ldr	r3, [pc, #48]	@ (8003cec <_SendPacket+0x270>)
 8003cbc:	785b      	ldrb	r3, [r3, #1]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68f9      	ldr	r1, [r7, #12]
 8003cca:	f7fc fa89 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003cce:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003cd6:	4a05      	ldr	r2, [pc, #20]	@ (8003cec <_SendPacket+0x270>)
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	60d3      	str	r3, [r2, #12]
 8003cdc:	e00f      	b.n	8003cfe <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003cde:	4b03      	ldr	r3, [pc, #12]	@ (8003cec <_SendPacket+0x270>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	4b01      	ldr	r3, [pc, #4]	@ (8003cec <_SendPacket+0x270>)
 8003ce8:	701a      	strb	r2, [r3, #0]
 8003cea:	e008      	b.n	8003cfe <_SendPacket+0x282>
 8003cec:	2000976c 	.word	0x2000976c
 8003cf0:	e0001004 	.word	0xe0001004
    goto SendDone;
 8003cf4:	bf00      	nop
 8003cf6:	e002      	b.n	8003cfe <_SendPacket+0x282>
      goto SendDone;
 8003cf8:	bf00      	nop
 8003cfa:	e000      	b.n	8003cfe <_SendPacket+0x282>
      goto SendDone;
 8003cfc:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003cfe:	4b14      	ldr	r3, [pc, #80]	@ (8003d50 <_SendPacket+0x2d4>)
 8003d00:	7e1b      	ldrb	r3, [r3, #24]
 8003d02:	4619      	mov	r1, r3
 8003d04:	4a13      	ldr	r2, [pc, #76]	@ (8003d54 <_SendPacket+0x2d8>)
 8003d06:	460b      	mov	r3, r1
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	440b      	add	r3, r1
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	4413      	add	r3, r2
 8003d10:	336c      	adds	r3, #108	@ 0x6c
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	4b0e      	ldr	r3, [pc, #56]	@ (8003d50 <_SendPacket+0x2d4>)
 8003d16:	7e1b      	ldrb	r3, [r3, #24]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	490e      	ldr	r1, [pc, #56]	@ (8003d54 <_SendPacket+0x2d8>)
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	4403      	add	r3, r0
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	440b      	add	r3, r1
 8003d26:	3370      	adds	r3, #112	@ 0x70
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d00b      	beq.n	8003d46 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003d2e:	4b08      	ldr	r3, [pc, #32]	@ (8003d50 <_SendPacket+0x2d4>)
 8003d30:	789b      	ldrb	r3, [r3, #2]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d107      	bne.n	8003d46 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003d36:	4b06      	ldr	r3, [pc, #24]	@ (8003d50 <_SendPacket+0x2d4>)
 8003d38:	2201      	movs	r2, #1
 8003d3a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003d3c:	f7ff fdbe 	bl	80038bc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003d40:	4b03      	ldr	r3, [pc, #12]	@ (8003d50 <_SendPacket+0x2d4>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003d46:	bf00      	nop
 8003d48:	3728      	adds	r7, #40	@ 0x28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	2000976c 	.word	0x2000976c
 8003d54:	200082ac 	.word	0x200082ac

08003d58 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
 8003d64:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003d66:	2300      	movs	r3, #0
 8003d68:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003d6c:	4917      	ldr	r1, [pc, #92]	@ (8003dcc <SEGGER_SYSVIEW_Init+0x74>)
 8003d6e:	4818      	ldr	r0, [pc, #96]	@ (8003dd0 <SEGGER_SYSVIEW_Init+0x78>)
 8003d70:	f7ff fc8e 	bl	8003690 <SEGGER_RTT_AllocUpBuffer>
 8003d74:	4603      	mov	r3, r0
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	4b16      	ldr	r3, [pc, #88]	@ (8003dd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003d7a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8003d7c:	4b15      	ldr	r3, [pc, #84]	@ (8003dd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003d7e:	785a      	ldrb	r2, [r3, #1]
 8003d80:	4b14      	ldr	r3, [pc, #80]	@ (8003dd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003d82:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003d84:	4b13      	ldr	r3, [pc, #76]	@ (8003dd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003d86:	7e1b      	ldrb	r3, [r3, #24]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	2308      	movs	r3, #8
 8003d90:	4a11      	ldr	r2, [pc, #68]	@ (8003dd8 <SEGGER_SYSVIEW_Init+0x80>)
 8003d92:	490f      	ldr	r1, [pc, #60]	@ (8003dd0 <SEGGER_SYSVIEW_Init+0x78>)
 8003d94:	f7ff fd00 	bl	8003798 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003d98:	4b0e      	ldr	r3, [pc, #56]	@ (8003dd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8003ddc <SEGGER_SYSVIEW_Init+0x84>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a0c      	ldr	r2, [pc, #48]	@ (8003dd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003da4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8003da6:	4a0b      	ldr	r2, [pc, #44]	@ (8003dd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003dac:	4a09      	ldr	r2, [pc, #36]	@ (8003dd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003db2:	4a08      	ldr	r2, [pc, #32]	@ (8003dd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003db8:	4a06      	ldr	r2, [pc, #24]	@ (8003dd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003dbe:	4b05      	ldr	r3, [pc, #20]	@ (8003dd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003dc4:	bf00      	nop
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	20008764 	.word	0x20008764
 8003dd0:	080059e8 	.word	0x080059e8
 8003dd4:	2000976c 	.word	0x2000976c
 8003dd8:	20009764 	.word	0x20009764
 8003ddc:	e0001004 	.word	0xe0001004

08003de0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003de8:	4a04      	ldr	r2, [pc, #16]	@ (8003dfc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6113      	str	r3, [r2, #16]
}
 8003dee:	bf00      	nop
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	2000976c 	.word	0x2000976c

08003e00 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003e08:	f3ef 8311 	mrs	r3, BASEPRI
 8003e0c:	f04f 0120 	mov.w	r1, #32
 8003e10:	f381 8811 	msr	BASEPRI, r1
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	4808      	ldr	r0, [pc, #32]	@ (8003e38 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003e18:	f7ff fd43 	bl	80038a2 <_PreparePacket>
 8003e1c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	68b9      	ldr	r1, [r7, #8]
 8003e22:	68b8      	ldr	r0, [r7, #8]
 8003e24:	f7ff fe2a 	bl	8003a7c <_SendPacket>
  RECORD_END();
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f383 8811 	msr	BASEPRI, r3
}
 8003e2e:	bf00      	nop
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	2000979c 	.word	0x2000979c

08003e3c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003e46:	f3ef 8311 	mrs	r3, BASEPRI
 8003e4a:	f04f 0120 	mov.w	r1, #32
 8003e4e:	f381 8811 	msr	BASEPRI, r1
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	4816      	ldr	r0, [pc, #88]	@ (8003eb0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003e56:	f7ff fd24 	bl	80038a2 <_PreparePacket>
 8003e5a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	61fb      	str	r3, [r7, #28]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	61bb      	str	r3, [r7, #24]
 8003e68:	e00b      	b.n	8003e82 <SEGGER_SYSVIEW_RecordU32+0x46>
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	1c59      	adds	r1, r3, #1
 8003e72:	61f9      	str	r1, [r7, #28]
 8003e74:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	701a      	strb	r2, [r3, #0]
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	09db      	lsrs	r3, r3, #7
 8003e80:	61bb      	str	r3, [r7, #24]
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e86:	d8f0      	bhi.n	8003e6a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	61fa      	str	r2, [r7, #28]
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	701a      	strb	r2, [r3, #0]
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	68f9      	ldr	r1, [r7, #12]
 8003e9c:	6938      	ldr	r0, [r7, #16]
 8003e9e:	f7ff fded 	bl	8003a7c <_SendPacket>
  RECORD_END();
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f383 8811 	msr	BASEPRI, r3
}
 8003ea8:	bf00      	nop
 8003eaa:	3720      	adds	r7, #32
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	2000979c 	.word	0x2000979c

08003eb4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b08c      	sub	sp, #48	@ 0x30
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003ec0:	f3ef 8311 	mrs	r3, BASEPRI
 8003ec4:	f04f 0120 	mov.w	r1, #32
 8003ec8:	f381 8811 	msr	BASEPRI, r1
 8003ecc:	61fb      	str	r3, [r7, #28]
 8003ece:	4825      	ldr	r0, [pc, #148]	@ (8003f64 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003ed0:	f7ff fce7 	bl	80038a2 <_PreparePacket>
 8003ed4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ee2:	e00b      	b.n	8003efc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eea:	1c59      	adds	r1, r3, #1
 8003eec:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003eee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	701a      	strb	r2, [r3, #0]
 8003ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef8:	09db      	lsrs	r3, r3, #7
 8003efa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efe:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f00:	d8f0      	bhi.n	8003ee4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f0a:	b2d2      	uxtb	r2, r2
 8003f0c:	701a      	strb	r2, [r3, #0]
 8003f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f10:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	623b      	str	r3, [r7, #32]
 8003f1a:	e00b      	b.n	8003f34 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f22:	1c59      	adds	r1, r3, #1
 8003f24:	6279      	str	r1, [r7, #36]	@ 0x24
 8003f26:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	701a      	strb	r2, [r3, #0]
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	09db      	lsrs	r3, r3, #7
 8003f32:	623b      	str	r3, [r7, #32]
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f38:	d8f0      	bhi.n	8003f1c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003f40:	6a3a      	ldr	r2, [r7, #32]
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	701a      	strb	r2, [r3, #0]
 8003f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f48:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	6979      	ldr	r1, [r7, #20]
 8003f4e:	69b8      	ldr	r0, [r7, #24]
 8003f50:	f7ff fd94 	bl	8003a7c <_SendPacket>
  RECORD_END();
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f383 8811 	msr	BASEPRI, r3
}
 8003f5a:	bf00      	nop
 8003f5c:	3730      	adds	r7, #48	@ 0x30
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	2000979c 	.word	0x2000979c

08003f68 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08c      	sub	sp, #48	@ 0x30
 8003f6c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003f6e:	4b58      	ldr	r3, [pc, #352]	@ (80040d0 <SEGGER_SYSVIEW_Start+0x168>)
 8003f70:	2201      	movs	r2, #1
 8003f72:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003f74:	f3ef 8311 	mrs	r3, BASEPRI
 8003f78:	f04f 0120 	mov.w	r1, #32
 8003f7c:	f381 8811 	msr	BASEPRI, r1
 8003f80:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003f82:	4b53      	ldr	r3, [pc, #332]	@ (80040d0 <SEGGER_SYSVIEW_Start+0x168>)
 8003f84:	785b      	ldrb	r3, [r3, #1]
 8003f86:	220a      	movs	r2, #10
 8003f88:	4952      	ldr	r1, [pc, #328]	@ (80040d4 <SEGGER_SYSVIEW_Start+0x16c>)
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fc f928 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003f96:	200a      	movs	r0, #10
 8003f98:	f7ff ff32 	bl	8003e00 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003f9c:	f3ef 8311 	mrs	r3, BASEPRI
 8003fa0:	f04f 0120 	mov.w	r1, #32
 8003fa4:	f381 8811 	msr	BASEPRI, r1
 8003fa8:	60bb      	str	r3, [r7, #8]
 8003faa:	484b      	ldr	r0, [pc, #300]	@ (80040d8 <SEGGER_SYSVIEW_Start+0x170>)
 8003fac:	f7ff fc79 	bl	80038a2 <_PreparePacket>
 8003fb0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fba:	4b45      	ldr	r3, [pc, #276]	@ (80040d0 <SEGGER_SYSVIEW_Start+0x168>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fc0:	e00b      	b.n	8003fda <SEGGER_SYSVIEW_Start+0x72>
 8003fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc8:	1c59      	adds	r1, r3, #1
 8003fca:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003fcc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003fd0:	b2d2      	uxtb	r2, r2
 8003fd2:	701a      	strb	r2, [r3, #0]
 8003fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd6:	09db      	lsrs	r3, r3, #7
 8003fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fdc:	2b7f      	cmp	r3, #127	@ 0x7f
 8003fde:	d8f0      	bhi.n	8003fc2 <SEGGER_SYSVIEW_Start+0x5a>
 8003fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fe6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fe8:	b2d2      	uxtb	r2, r2
 8003fea:	701a      	strb	r2, [r3, #0]
 8003fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fee:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ff4:	4b36      	ldr	r3, [pc, #216]	@ (80040d0 <SEGGER_SYSVIEW_Start+0x168>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	623b      	str	r3, [r7, #32]
 8003ffa:	e00b      	b.n	8004014 <SEGGER_SYSVIEW_Start+0xac>
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004002:	1c59      	adds	r1, r3, #1
 8004004:	6279      	str	r1, [r7, #36]	@ 0x24
 8004006:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800400a:	b2d2      	uxtb	r2, r2
 800400c:	701a      	strb	r2, [r3, #0]
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	09db      	lsrs	r3, r3, #7
 8004012:	623b      	str	r3, [r7, #32]
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	2b7f      	cmp	r3, #127	@ 0x7f
 8004018:	d8f0      	bhi.n	8003ffc <SEGGER_SYSVIEW_Start+0x94>
 800401a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004020:	6a3a      	ldr	r2, [r7, #32]
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	701a      	strb	r2, [r3, #0]
 8004026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004028:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	61fb      	str	r3, [r7, #28]
 800402e:	4b28      	ldr	r3, [pc, #160]	@ (80040d0 <SEGGER_SYSVIEW_Start+0x168>)
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	61bb      	str	r3, [r7, #24]
 8004034:	e00b      	b.n	800404e <SEGGER_SYSVIEW_Start+0xe6>
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	b2da      	uxtb	r2, r3
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	1c59      	adds	r1, r3, #1
 800403e:	61f9      	str	r1, [r7, #28]
 8004040:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	701a      	strb	r2, [r3, #0]
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	09db      	lsrs	r3, r3, #7
 800404c:	61bb      	str	r3, [r7, #24]
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	2b7f      	cmp	r3, #127	@ 0x7f
 8004052:	d8f0      	bhi.n	8004036 <SEGGER_SYSVIEW_Start+0xce>
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	1c5a      	adds	r2, r3, #1
 8004058:	61fa      	str	r2, [r7, #28]
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	b2d2      	uxtb	r2, r2
 800405e:	701a      	strb	r2, [r3, #0]
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	2300      	movs	r3, #0
 800406a:	613b      	str	r3, [r7, #16]
 800406c:	e00b      	b.n	8004086 <SEGGER_SYSVIEW_Start+0x11e>
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	b2da      	uxtb	r2, r3
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	1c59      	adds	r1, r3, #1
 8004076:	6179      	str	r1, [r7, #20]
 8004078:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	701a      	strb	r2, [r3, #0]
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	09db      	lsrs	r3, r3, #7
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	2b7f      	cmp	r3, #127	@ 0x7f
 800408a:	d8f0      	bhi.n	800406e <SEGGER_SYSVIEW_Start+0x106>
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	617a      	str	r2, [r7, #20]
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	701a      	strb	r2, [r3, #0]
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800409c:	2218      	movs	r2, #24
 800409e:	6839      	ldr	r1, [r7, #0]
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7ff fceb 	bl	8003a7c <_SendPacket>
      RECORD_END();
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80040ac:	4b08      	ldr	r3, [pc, #32]	@ (80040d0 <SEGGER_SYSVIEW_Start+0x168>)
 80040ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80040b4:	4b06      	ldr	r3, [pc, #24]	@ (80040d0 <SEGGER_SYSVIEW_Start+0x168>)
 80040b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80040ba:	f000 f9eb 	bl	8004494 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80040be:	f000 f9b1 	bl	8004424 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80040c2:	f000 fc1d 	bl	8004900 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80040c6:	bf00      	nop
 80040c8:	3730      	adds	r7, #48	@ 0x30
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	2000976c 	.word	0x2000976c
 80040d4:	08005a24 	.word	0x08005a24
 80040d8:	2000979c 	.word	0x2000979c

080040dc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80040e2:	f3ef 8311 	mrs	r3, BASEPRI
 80040e6:	f04f 0120 	mov.w	r1, #32
 80040ea:	f381 8811 	msr	BASEPRI, r1
 80040ee:	607b      	str	r3, [r7, #4]
 80040f0:	480b      	ldr	r0, [pc, #44]	@ (8004120 <SEGGER_SYSVIEW_Stop+0x44>)
 80040f2:	f7ff fbd6 	bl	80038a2 <_PreparePacket>
 80040f6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80040f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004124 <SEGGER_SYSVIEW_Stop+0x48>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d007      	beq.n	8004110 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004100:	220b      	movs	r2, #11
 8004102:	6839      	ldr	r1, [r7, #0]
 8004104:	6838      	ldr	r0, [r7, #0]
 8004106:	f7ff fcb9 	bl	8003a7c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800410a:	4b06      	ldr	r3, [pc, #24]	@ (8004124 <SEGGER_SYSVIEW_Stop+0x48>)
 800410c:	2200      	movs	r2, #0
 800410e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f383 8811 	msr	BASEPRI, r3
}
 8004116:	bf00      	nop
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	2000979c 	.word	0x2000979c
 8004124:	2000976c 	.word	0x2000976c

08004128 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004128:	b580      	push	{r7, lr}
 800412a:	b08c      	sub	sp, #48	@ 0x30
 800412c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800412e:	f3ef 8311 	mrs	r3, BASEPRI
 8004132:	f04f 0120 	mov.w	r1, #32
 8004136:	f381 8811 	msr	BASEPRI, r1
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	4845      	ldr	r0, [pc, #276]	@ (8004254 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800413e:	f7ff fbb0 	bl	80038a2 <_PreparePacket>
 8004142:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800414c:	4b42      	ldr	r3, [pc, #264]	@ (8004258 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004152:	e00b      	b.n	800416c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004156:	b2da      	uxtb	r2, r3
 8004158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800415a:	1c59      	adds	r1, r3, #1
 800415c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800415e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	701a      	strb	r2, [r3, #0]
 8004166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004168:	09db      	lsrs	r3, r3, #7
 800416a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800416c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800416e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004170:	d8f0      	bhi.n	8004154 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004178:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800417a:	b2d2      	uxtb	r2, r2
 800417c:	701a      	strb	r2, [r3, #0]
 800417e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004180:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	627b      	str	r3, [r7, #36]	@ 0x24
 8004186:	4b34      	ldr	r3, [pc, #208]	@ (8004258 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	623b      	str	r3, [r7, #32]
 800418c:	e00b      	b.n	80041a6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	b2da      	uxtb	r2, r3
 8004192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004194:	1c59      	adds	r1, r3, #1
 8004196:	6279      	str	r1, [r7, #36]	@ 0x24
 8004198:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	701a      	strb	r2, [r3, #0]
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	09db      	lsrs	r3, r3, #7
 80041a4:	623b      	str	r3, [r7, #32]
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80041aa:	d8f0      	bhi.n	800418e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80041ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80041b2:	6a3a      	ldr	r2, [r7, #32]
 80041b4:	b2d2      	uxtb	r2, r2
 80041b6:	701a      	strb	r2, [r3, #0]
 80041b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	61fb      	str	r3, [r7, #28]
 80041c0:	4b25      	ldr	r3, [pc, #148]	@ (8004258 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	61bb      	str	r3, [r7, #24]
 80041c6:	e00b      	b.n	80041e0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	1c59      	adds	r1, r3, #1
 80041d0:	61f9      	str	r1, [r7, #28]
 80041d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	701a      	strb	r2, [r3, #0]
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	09db      	lsrs	r3, r3, #7
 80041de:	61bb      	str	r3, [r7, #24]
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80041e4:	d8f0      	bhi.n	80041c8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	1c5a      	adds	r2, r3, #1
 80041ea:	61fa      	str	r2, [r7, #28]
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	701a      	strb	r2, [r3, #0]
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	617b      	str	r3, [r7, #20]
 80041fa:	2300      	movs	r3, #0
 80041fc:	613b      	str	r3, [r7, #16]
 80041fe:	e00b      	b.n	8004218 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	b2da      	uxtb	r2, r3
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	1c59      	adds	r1, r3, #1
 8004208:	6179      	str	r1, [r7, #20]
 800420a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	701a      	strb	r2, [r3, #0]
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	09db      	lsrs	r3, r3, #7
 8004216:	613b      	str	r3, [r7, #16]
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	2b7f      	cmp	r3, #127	@ 0x7f
 800421c:	d8f0      	bhi.n	8004200 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	617a      	str	r2, [r7, #20]
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	701a      	strb	r2, [r3, #0]
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800422e:	2218      	movs	r2, #24
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	68b8      	ldr	r0, [r7, #8]
 8004234:	f7ff fc22 	bl	8003a7c <_SendPacket>
  RECORD_END();
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800423e:	4b06      	ldr	r3, [pc, #24]	@ (8004258 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004242:	2b00      	cmp	r3, #0
 8004244:	d002      	beq.n	800424c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004246:	4b04      	ldr	r3, [pc, #16]	@ (8004258 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424a:	4798      	blx	r3
  }
}
 800424c:	bf00      	nop
 800424e:	3730      	adds	r7, #48	@ 0x30
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	2000979c 	.word	0x2000979c
 8004258:	2000976c 	.word	0x2000976c

0800425c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800425c:	b580      	push	{r7, lr}
 800425e:	b092      	sub	sp, #72	@ 0x48
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004264:	f3ef 8311 	mrs	r3, BASEPRI
 8004268:	f04f 0120 	mov.w	r1, #32
 800426c:	f381 8811 	msr	BASEPRI, r1
 8004270:	617b      	str	r3, [r7, #20]
 8004272:	486a      	ldr	r0, [pc, #424]	@ (800441c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004274:	f7ff fb15 	bl	80038a2 <_PreparePacket>
 8004278:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	647b      	str	r3, [r7, #68]	@ 0x44
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	4b66      	ldr	r3, [pc, #408]	@ (8004420 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	643b      	str	r3, [r7, #64]	@ 0x40
 800428e:	e00b      	b.n	80042a8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004290:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004292:	b2da      	uxtb	r2, r3
 8004294:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004296:	1c59      	adds	r1, r3, #1
 8004298:	6479      	str	r1, [r7, #68]	@ 0x44
 800429a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	701a      	strb	r2, [r3, #0]
 80042a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042a4:	09db      	lsrs	r3, r3, #7
 80042a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80042a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80042ac:	d8f0      	bhi.n	8004290 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80042ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80042b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	701a      	strb	r2, [r3, #0]
 80042ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042c8:	e00b      	b.n	80042e2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80042ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042d0:	1c59      	adds	r1, r3, #1
 80042d2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80042d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	701a      	strb	r2, [r3, #0]
 80042dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042de:	09db      	lsrs	r3, r3, #7
 80042e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80042e6:	d8f0      	bhi.n	80042ca <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80042e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80042ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	701a      	strb	r2, [r3, #0]
 80042f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042f6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	4619      	mov	r1, r3
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f7ff fa95 	bl	8003830 <_EncodeStr>
 8004306:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004308:	2209      	movs	r2, #9
 800430a:	68f9      	ldr	r1, [r7, #12]
 800430c:	6938      	ldr	r0, [r7, #16]
 800430e:	f7ff fbb5 	bl	8003a7c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	637b      	str	r3, [r7, #52]	@ 0x34
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	4b40      	ldr	r3, [pc, #256]	@ (8004420 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	633b      	str	r3, [r7, #48]	@ 0x30
 8004326:	e00b      	b.n	8004340 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800432a:	b2da      	uxtb	r2, r3
 800432c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800432e:	1c59      	adds	r1, r3, #1
 8004330:	6379      	str	r1, [r7, #52]	@ 0x34
 8004332:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004336:	b2d2      	uxtb	r2, r2
 8004338:	701a      	strb	r2, [r3, #0]
 800433a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433c:	09db      	lsrs	r3, r3, #7
 800433e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004342:	2b7f      	cmp	r3, #127	@ 0x7f
 8004344:	d8f0      	bhi.n	8004328 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	637a      	str	r2, [r7, #52]	@ 0x34
 800434c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	701a      	strb	r2, [r3, #0]
 8004352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004354:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004360:	e00b      	b.n	800437a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004364:	b2da      	uxtb	r2, r3
 8004366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004368:	1c59      	adds	r1, r3, #1
 800436a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800436c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	701a      	strb	r2, [r3, #0]
 8004374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004376:	09db      	lsrs	r3, r3, #7
 8004378:	62bb      	str	r3, [r7, #40]	@ 0x28
 800437a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437c:	2b7f      	cmp	r3, #127	@ 0x7f
 800437e:	d8f0      	bhi.n	8004362 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004386:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	701a      	strb	r2, [r3, #0]
 800438c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800438e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	627b      	str	r3, [r7, #36]	@ 0x24
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	623b      	str	r3, [r7, #32]
 800439a:	e00b      	b.n	80043b4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a2:	1c59      	adds	r1, r3, #1
 80043a4:	6279      	str	r1, [r7, #36]	@ 0x24
 80043a6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	701a      	strb	r2, [r3, #0]
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	09db      	lsrs	r3, r3, #7
 80043b2:	623b      	str	r3, [r7, #32]
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80043b8:	d8f0      	bhi.n	800439c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80043ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	627a      	str	r2, [r7, #36]	@ 0x24
 80043c0:	6a3a      	ldr	r2, [r7, #32]
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	701a      	strb	r2, [r3, #0]
 80043c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	61fb      	str	r3, [r7, #28]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	61bb      	str	r3, [r7, #24]
 80043d4:	e00b      	b.n	80043ee <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	1c59      	adds	r1, r3, #1
 80043de:	61f9      	str	r1, [r7, #28]
 80043e0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	701a      	strb	r2, [r3, #0]
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	09db      	lsrs	r3, r3, #7
 80043ec:	61bb      	str	r3, [r7, #24]
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80043f2:	d8f0      	bhi.n	80043d6 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	61fa      	str	r2, [r7, #28]
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	b2d2      	uxtb	r2, r2
 80043fe:	701a      	strb	r2, [r3, #0]
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004404:	2215      	movs	r2, #21
 8004406:	68f9      	ldr	r1, [r7, #12]
 8004408:	6938      	ldr	r0, [r7, #16]
 800440a:	f7ff fb37 	bl	8003a7c <_SendPacket>
  RECORD_END();
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f383 8811 	msr	BASEPRI, r3
}
 8004414:	bf00      	nop
 8004416:	3748      	adds	r7, #72	@ 0x48
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	2000979c 	.word	0x2000979c
 8004420:	2000976c 	.word	0x2000976c

08004424 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004428:	4b07      	ldr	r3, [pc, #28]	@ (8004448 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d008      	beq.n	8004442 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004430:	4b05      	ldr	r3, [pc, #20]	@ (8004448 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800443a:	4b03      	ldr	r3, [pc, #12]	@ (8004448 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	4798      	blx	r3
  }
}
 8004442:	bf00      	nop
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	2000976c 	.word	0x2000976c

0800444c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004454:	f3ef 8311 	mrs	r3, BASEPRI
 8004458:	f04f 0120 	mov.w	r1, #32
 800445c:	f381 8811 	msr	BASEPRI, r1
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	480b      	ldr	r0, [pc, #44]	@ (8004490 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004464:	f7ff fa1d 	bl	80038a2 <_PreparePacket>
 8004468:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800446a:	2280      	movs	r2, #128	@ 0x80
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	6938      	ldr	r0, [r7, #16]
 8004470:	f7ff f9de 	bl	8003830 <_EncodeStr>
 8004474:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004476:	220e      	movs	r2, #14
 8004478:	68f9      	ldr	r1, [r7, #12]
 800447a:	6938      	ldr	r0, [r7, #16]
 800447c:	f7ff fafe 	bl	8003a7c <_SendPacket>
  RECORD_END();
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f383 8811 	msr	BASEPRI, r3
}
 8004486:	bf00      	nop
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	2000979c 	.word	0x2000979c

08004494 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004494:	b590      	push	{r4, r7, lr}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800449a:	4b15      	ldr	r3, [pc, #84]	@ (80044f0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d01a      	beq.n	80044d8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80044a2:	4b13      	ldr	r3, [pc, #76]	@ (80044f0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d015      	beq.n	80044d8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80044ac:	4b10      	ldr	r3, [pc, #64]	@ (80044f0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4798      	blx	r3
 80044b4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80044b8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80044ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044be:	f04f 0200 	mov.w	r2, #0
 80044c2:	f04f 0300 	mov.w	r3, #0
 80044c6:	000a      	movs	r2, r1
 80044c8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80044ca:	4613      	mov	r3, r2
 80044cc:	461a      	mov	r2, r3
 80044ce:	4621      	mov	r1, r4
 80044d0:	200d      	movs	r0, #13
 80044d2:	f7ff fcef 	bl	8003eb4 <SEGGER_SYSVIEW_RecordU32x2>
 80044d6:	e006      	b.n	80044e6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80044d8:	4b06      	ldr	r3, [pc, #24]	@ (80044f4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4619      	mov	r1, r3
 80044de:	200c      	movs	r0, #12
 80044e0:	f7ff fcac 	bl	8003e3c <SEGGER_SYSVIEW_RecordU32>
  }
}
 80044e4:	bf00      	nop
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd90      	pop	{r4, r7, pc}
 80044ee:	bf00      	nop
 80044f0:	2000976c 	.word	0x2000976c
 80044f4:	e0001004 	.word	0xe0001004

080044f8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80044fe:	f3ef 8311 	mrs	r3, BASEPRI
 8004502:	f04f 0120 	mov.w	r1, #32
 8004506:	f381 8811 	msr	BASEPRI, r1
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	4819      	ldr	r0, [pc, #100]	@ (8004574 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800450e:	f7ff f9c8 	bl	80038a2 <_PreparePacket>
 8004512:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004518:	4b17      	ldr	r3, [pc, #92]	@ (8004578 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004520:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	613b      	str	r3, [r7, #16]
 800452a:	e00b      	b.n	8004544 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	b2da      	uxtb	r2, r3
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	1c59      	adds	r1, r3, #1
 8004534:	6179      	str	r1, [r7, #20]
 8004536:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	701a      	strb	r2, [r3, #0]
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	09db      	lsrs	r3, r3, #7
 8004542:	613b      	str	r3, [r7, #16]
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	2b7f      	cmp	r3, #127	@ 0x7f
 8004548:	d8f0      	bhi.n	800452c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	617a      	str	r2, [r7, #20]
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	701a      	strb	r2, [r3, #0]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800455a:	2202      	movs	r2, #2
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	68b8      	ldr	r0, [r7, #8]
 8004560:	f7ff fa8c 	bl	8003a7c <_SendPacket>
  RECORD_END();
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f383 8811 	msr	BASEPRI, r3
}
 800456a:	bf00      	nop
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	2000979c 	.word	0x2000979c
 8004578:	e000ed04 	.word	0xe000ed04

0800457c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004582:	f3ef 8311 	mrs	r3, BASEPRI
 8004586:	f04f 0120 	mov.w	r1, #32
 800458a:	f381 8811 	msr	BASEPRI, r1
 800458e:	607b      	str	r3, [r7, #4]
 8004590:	4807      	ldr	r0, [pc, #28]	@ (80045b0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004592:	f7ff f986 	bl	80038a2 <_PreparePacket>
 8004596:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004598:	2203      	movs	r2, #3
 800459a:	6839      	ldr	r1, [r7, #0]
 800459c:	6838      	ldr	r0, [r7, #0]
 800459e:	f7ff fa6d 	bl	8003a7c <_SendPacket>
  RECORD_END();
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f383 8811 	msr	BASEPRI, r3
}
 80045a8:	bf00      	nop
 80045aa:	3708      	adds	r7, #8
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	2000979c 	.word	0x2000979c

080045b4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80045ba:	f3ef 8311 	mrs	r3, BASEPRI
 80045be:	f04f 0120 	mov.w	r1, #32
 80045c2:	f381 8811 	msr	BASEPRI, r1
 80045c6:	607b      	str	r3, [r7, #4]
 80045c8:	4807      	ldr	r0, [pc, #28]	@ (80045e8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80045ca:	f7ff f96a 	bl	80038a2 <_PreparePacket>
 80045ce:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80045d0:	2212      	movs	r2, #18
 80045d2:	6839      	ldr	r1, [r7, #0]
 80045d4:	6838      	ldr	r0, [r7, #0]
 80045d6:	f7ff fa51 	bl	8003a7c <_SendPacket>
  RECORD_END();
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f383 8811 	msr	BASEPRI, r3
}
 80045e0:	bf00      	nop
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	2000979c 	.word	0x2000979c

080045ec <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80045f2:	f3ef 8311 	mrs	r3, BASEPRI
 80045f6:	f04f 0120 	mov.w	r1, #32
 80045fa:	f381 8811 	msr	BASEPRI, r1
 80045fe:	607b      	str	r3, [r7, #4]
 8004600:	4807      	ldr	r0, [pc, #28]	@ (8004620 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004602:	f7ff f94e 	bl	80038a2 <_PreparePacket>
 8004606:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004608:	2211      	movs	r2, #17
 800460a:	6839      	ldr	r1, [r7, #0]
 800460c:	6838      	ldr	r0, [r7, #0]
 800460e:	f7ff fa35 	bl	8003a7c <_SendPacket>
  RECORD_END();
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f383 8811 	msr	BASEPRI, r3
}
 8004618:	bf00      	nop
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	2000979c 	.word	0x2000979c

08004624 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004624:	b580      	push	{r7, lr}
 8004626:	b088      	sub	sp, #32
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800462c:	f3ef 8311 	mrs	r3, BASEPRI
 8004630:	f04f 0120 	mov.w	r1, #32
 8004634:	f381 8811 	msr	BASEPRI, r1
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	4819      	ldr	r0, [pc, #100]	@ (80046a0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800463c:	f7ff f931 	bl	80038a2 <_PreparePacket>
 8004640:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004646:	4b17      	ldr	r3, [pc, #92]	@ (80046a4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	61fb      	str	r3, [r7, #28]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	61bb      	str	r3, [r7, #24]
 8004658:	e00b      	b.n	8004672 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	b2da      	uxtb	r2, r3
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	1c59      	adds	r1, r3, #1
 8004662:	61f9      	str	r1, [r7, #28]
 8004664:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004668:	b2d2      	uxtb	r2, r2
 800466a:	701a      	strb	r2, [r3, #0]
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	09db      	lsrs	r3, r3, #7
 8004670:	61bb      	str	r3, [r7, #24]
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	2b7f      	cmp	r3, #127	@ 0x7f
 8004676:	d8f0      	bhi.n	800465a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	1c5a      	adds	r2, r3, #1
 800467c:	61fa      	str	r2, [r7, #28]
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	701a      	strb	r2, [r3, #0]
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004688:	2208      	movs	r2, #8
 800468a:	68f9      	ldr	r1, [r7, #12]
 800468c:	6938      	ldr	r0, [r7, #16]
 800468e:	f7ff f9f5 	bl	8003a7c <_SendPacket>
  RECORD_END();
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f383 8811 	msr	BASEPRI, r3
}
 8004698:	bf00      	nop
 800469a:	3720      	adds	r7, #32
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	2000979c 	.word	0x2000979c
 80046a4:	2000976c 	.word	0x2000976c

080046a8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b088      	sub	sp, #32
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80046b0:	f3ef 8311 	mrs	r3, BASEPRI
 80046b4:	f04f 0120 	mov.w	r1, #32
 80046b8:	f381 8811 	msr	BASEPRI, r1
 80046bc:	617b      	str	r3, [r7, #20]
 80046be:	4819      	ldr	r0, [pc, #100]	@ (8004724 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80046c0:	f7ff f8ef 	bl	80038a2 <_PreparePacket>
 80046c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80046ca:	4b17      	ldr	r3, [pc, #92]	@ (8004728 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	61bb      	str	r3, [r7, #24]
 80046dc:	e00b      	b.n	80046f6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	1c59      	adds	r1, r3, #1
 80046e6:	61f9      	str	r1, [r7, #28]
 80046e8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80046ec:	b2d2      	uxtb	r2, r2
 80046ee:	701a      	strb	r2, [r3, #0]
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	09db      	lsrs	r3, r3, #7
 80046f4:	61bb      	str	r3, [r7, #24]
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80046fa:	d8f0      	bhi.n	80046de <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	61fa      	str	r2, [r7, #28]
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	b2d2      	uxtb	r2, r2
 8004706:	701a      	strb	r2, [r3, #0]
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800470c:	2204      	movs	r2, #4
 800470e:	68f9      	ldr	r1, [r7, #12]
 8004710:	6938      	ldr	r0, [r7, #16]
 8004712:	f7ff f9b3 	bl	8003a7c <_SendPacket>
  RECORD_END();
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f383 8811 	msr	BASEPRI, r3
}
 800471c:	bf00      	nop
 800471e:	3720      	adds	r7, #32
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	2000979c 	.word	0x2000979c
 8004728:	2000976c 	.word	0x2000976c

0800472c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800472c:	b580      	push	{r7, lr}
 800472e:	b088      	sub	sp, #32
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004734:	f3ef 8311 	mrs	r3, BASEPRI
 8004738:	f04f 0120 	mov.w	r1, #32
 800473c:	f381 8811 	msr	BASEPRI, r1
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	4819      	ldr	r0, [pc, #100]	@ (80047a8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004744:	f7ff f8ad 	bl	80038a2 <_PreparePacket>
 8004748:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800474e:	4b17      	ldr	r3, [pc, #92]	@ (80047ac <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	61fb      	str	r3, [r7, #28]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	61bb      	str	r3, [r7, #24]
 8004760:	e00b      	b.n	800477a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	b2da      	uxtb	r2, r3
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	1c59      	adds	r1, r3, #1
 800476a:	61f9      	str	r1, [r7, #28]
 800476c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	701a      	strb	r2, [r3, #0]
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	09db      	lsrs	r3, r3, #7
 8004778:	61bb      	str	r3, [r7, #24]
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	2b7f      	cmp	r3, #127	@ 0x7f
 800477e:	d8f0      	bhi.n	8004762 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	61fa      	str	r2, [r7, #28]
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	b2d2      	uxtb	r2, r2
 800478a:	701a      	strb	r2, [r3, #0]
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004790:	2206      	movs	r2, #6
 8004792:	68f9      	ldr	r1, [r7, #12]
 8004794:	6938      	ldr	r0, [r7, #16]
 8004796:	f7ff f971 	bl	8003a7c <_SendPacket>
  RECORD_END();
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f383 8811 	msr	BASEPRI, r3
}
 80047a0:	bf00      	nop
 80047a2:	3720      	adds	r7, #32
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	2000979c 	.word	0x2000979c
 80047ac:	2000976c 	.word	0x2000976c

080047b0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b08c      	sub	sp, #48	@ 0x30
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	4603      	mov	r3, r0
 80047b8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80047ba:	4b40      	ldr	r3, [pc, #256]	@ (80048bc <SEGGER_SYSVIEW_SendModule+0x10c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d077      	beq.n	80048b2 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80047c2:	4b3e      	ldr	r3, [pc, #248]	@ (80048bc <SEGGER_SYSVIEW_SendModule+0x10c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80047c8:	2300      	movs	r3, #0
 80047ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047cc:	e008      	b.n	80047e0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80047ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 80047d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d007      	beq.n	80047ea <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80047da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047dc:	3301      	adds	r3, #1
 80047de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047e0:	79fb      	ldrb	r3, [r7, #7]
 80047e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d3f2      	bcc.n	80047ce <SEGGER_SYSVIEW_SendModule+0x1e>
 80047e8:	e000      	b.n	80047ec <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80047ea:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80047ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d055      	beq.n	800489e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80047f2:	f3ef 8311 	mrs	r3, BASEPRI
 80047f6:	f04f 0120 	mov.w	r1, #32
 80047fa:	f381 8811 	msr	BASEPRI, r1
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	482f      	ldr	r0, [pc, #188]	@ (80048c0 <SEGGER_SYSVIEW_SendModule+0x110>)
 8004802:	f7ff f84e 	bl	80038a2 <_PreparePacket>
 8004806:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004810:	79fb      	ldrb	r3, [r7, #7]
 8004812:	623b      	str	r3, [r7, #32]
 8004814:	e00b      	b.n	800482e <SEGGER_SYSVIEW_SendModule+0x7e>
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	b2da      	uxtb	r2, r3
 800481a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481c:	1c59      	adds	r1, r3, #1
 800481e:	6279      	str	r1, [r7, #36]	@ 0x24
 8004820:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004824:	b2d2      	uxtb	r2, r2
 8004826:	701a      	strb	r2, [r3, #0]
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	09db      	lsrs	r3, r3, #7
 800482c:	623b      	str	r3, [r7, #32]
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	2b7f      	cmp	r3, #127	@ 0x7f
 8004832:	d8f0      	bhi.n	8004816 <SEGGER_SYSVIEW_SendModule+0x66>
 8004834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004836:	1c5a      	adds	r2, r3, #1
 8004838:	627a      	str	r2, [r7, #36]	@ 0x24
 800483a:	6a3a      	ldr	r2, [r7, #32]
 800483c:	b2d2      	uxtb	r2, r2
 800483e:	701a      	strb	r2, [r3, #0]
 8004840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004842:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	61fb      	str	r3, [r7, #28]
 8004848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	e00b      	b.n	8004868 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	b2da      	uxtb	r2, r3
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	1c59      	adds	r1, r3, #1
 8004858:	61f9      	str	r1, [r7, #28]
 800485a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	701a      	strb	r2, [r3, #0]
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	09db      	lsrs	r3, r3, #7
 8004866:	61bb      	str	r3, [r7, #24]
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	2b7f      	cmp	r3, #127	@ 0x7f
 800486c:	d8f0      	bhi.n	8004850 <SEGGER_SYSVIEW_SendModule+0xa0>
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	61fa      	str	r2, [r7, #28]
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	701a      	strb	r2, [r3, #0]
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800487e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2280      	movs	r2, #128	@ 0x80
 8004884:	4619      	mov	r1, r3
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f7fe ffd2 	bl	8003830 <_EncodeStr>
 800488c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800488e:	2216      	movs	r2, #22
 8004890:	68f9      	ldr	r1, [r7, #12]
 8004892:	6938      	ldr	r0, [r7, #16]
 8004894:	f7ff f8f2 	bl	8003a7c <_SendPacket>
      RECORD_END();
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800489e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d006      	beq.n	80048b2 <SEGGER_SYSVIEW_SendModule+0x102>
 80048a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d002      	beq.n	80048b2 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80048ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	4798      	blx	r3
    }
  }
}
 80048b2:	bf00      	nop
 80048b4:	3730      	adds	r7, #48	@ 0x30
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	20009794 	.word	0x20009794
 80048c0:	2000979c 	.word	0x2000979c

080048c4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80048ca:	4b0c      	ldr	r3, [pc, #48]	@ (80048fc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00f      	beq.n	80048f2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80048d2:	4b0a      	ldr	r3, [pc, #40]	@ (80048fc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1f2      	bne.n	80048d8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80048f2:	bf00      	nop
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	20009794 	.word	0x20009794

08004900 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004906:	f3ef 8311 	mrs	r3, BASEPRI
 800490a:	f04f 0120 	mov.w	r1, #32
 800490e:	f381 8811 	msr	BASEPRI, r1
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	4817      	ldr	r0, [pc, #92]	@ (8004974 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004916:	f7fe ffc4 	bl	80038a2 <_PreparePacket>
 800491a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	617b      	str	r3, [r7, #20]
 8004924:	4b14      	ldr	r3, [pc, #80]	@ (8004978 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	613b      	str	r3, [r7, #16]
 800492a:	e00b      	b.n	8004944 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	b2da      	uxtb	r2, r3
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	1c59      	adds	r1, r3, #1
 8004934:	6179      	str	r1, [r7, #20]
 8004936:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800493a:	b2d2      	uxtb	r2, r2
 800493c:	701a      	strb	r2, [r3, #0]
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	09db      	lsrs	r3, r3, #7
 8004942:	613b      	str	r3, [r7, #16]
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	2b7f      	cmp	r3, #127	@ 0x7f
 8004948:	d8f0      	bhi.n	800492c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	617a      	str	r2, [r7, #20]
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	701a      	strb	r2, [r3, #0]
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800495a:	221b      	movs	r2, #27
 800495c:	6879      	ldr	r1, [r7, #4]
 800495e:	68b8      	ldr	r0, [r7, #8]
 8004960:	f7ff f88c 	bl	8003a7c <_SendPacket>
  RECORD_END();
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f383 8811 	msr	BASEPRI, r3
}
 800496a:	bf00      	nop
 800496c:	3718      	adds	r7, #24
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	2000979c 	.word	0x2000979c
 8004978:	20009798 	.word	0x20009798

0800497c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800497c:	b580      	push	{r7, lr}
 800497e:	b08a      	sub	sp, #40	@ 0x28
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004984:	f3ef 8311 	mrs	r3, BASEPRI
 8004988:	f04f 0120 	mov.w	r1, #32
 800498c:	f381 8811 	msr	BASEPRI, r1
 8004990:	617b      	str	r3, [r7, #20]
 8004992:	4827      	ldr	r0, [pc, #156]	@ (8004a30 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004994:	f7fe ff85 	bl	80038a2 <_PreparePacket>
 8004998:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800499a:	2280      	movs	r2, #128	@ 0x80
 800499c:	6879      	ldr	r1, [r7, #4]
 800499e:	6938      	ldr	r0, [r7, #16]
 80049a0:	f7fe ff46 	bl	8003830 <_EncodeStr>
 80049a4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80049aa:	2301      	movs	r3, #1
 80049ac:	623b      	str	r3, [r7, #32]
 80049ae:	e00b      	b.n	80049c8 <SEGGER_SYSVIEW_Warn+0x4c>
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b6:	1c59      	adds	r1, r3, #1
 80049b8:	6279      	str	r1, [r7, #36]	@ 0x24
 80049ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	09db      	lsrs	r3, r3, #7
 80049c6:	623b      	str	r3, [r7, #32]
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80049cc:	d8f0      	bhi.n	80049b0 <SEGGER_SYSVIEW_Warn+0x34>
 80049ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d0:	1c5a      	adds	r2, r3, #1
 80049d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80049d4:	6a3a      	ldr	r2, [r7, #32]
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	701a      	strb	r2, [r3, #0]
 80049da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	61fb      	str	r3, [r7, #28]
 80049e2:	2300      	movs	r3, #0
 80049e4:	61bb      	str	r3, [r7, #24]
 80049e6:	e00b      	b.n	8004a00 <SEGGER_SYSVIEW_Warn+0x84>
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	1c59      	adds	r1, r3, #1
 80049f0:	61f9      	str	r1, [r7, #28]
 80049f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	701a      	strb	r2, [r3, #0]
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	09db      	lsrs	r3, r3, #7
 80049fe:	61bb      	str	r3, [r7, #24]
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a04:	d8f0      	bhi.n	80049e8 <SEGGER_SYSVIEW_Warn+0x6c>
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	61fa      	str	r2, [r7, #28]
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	701a      	strb	r2, [r3, #0]
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004a16:	221a      	movs	r2, #26
 8004a18:	68f9      	ldr	r1, [r7, #12]
 8004a1a:	6938      	ldr	r0, [r7, #16]
 8004a1c:	f7ff f82e 	bl	8003a7c <_SendPacket>
  RECORD_END();
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f383 8811 	msr	BASEPRI, r3
}
 8004a26:	bf00      	nop
 8004a28:	3728      	adds	r7, #40	@ 0x28
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	2000979c 	.word	0x2000979c

08004a34 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	2000      	movs	r0, #0
 8004a48:	f7fe fdfc 	bl	8003644 <SEGGER_RTT_Write>
  return len;
 8004a4c:	683b      	ldr	r3, [r7, #0]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
	...

08004a58 <std>:
 8004a58:	2300      	movs	r3, #0
 8004a5a:	b510      	push	{r4, lr}
 8004a5c:	4604      	mov	r4, r0
 8004a5e:	e9c0 3300 	strd	r3, r3, [r0]
 8004a62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a66:	6083      	str	r3, [r0, #8]
 8004a68:	8181      	strh	r1, [r0, #12]
 8004a6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004a6c:	81c2      	strh	r2, [r0, #14]
 8004a6e:	6183      	str	r3, [r0, #24]
 8004a70:	4619      	mov	r1, r3
 8004a72:	2208      	movs	r2, #8
 8004a74:	305c      	adds	r0, #92	@ 0x5c
 8004a76:	f000 f916 	bl	8004ca6 <memset>
 8004a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab0 <std+0x58>)
 8004a7c:	6263      	str	r3, [r4, #36]	@ 0x24
 8004a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab4 <std+0x5c>)
 8004a80:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004a82:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab8 <std+0x60>)
 8004a84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004a86:	4b0d      	ldr	r3, [pc, #52]	@ (8004abc <std+0x64>)
 8004a88:	6323      	str	r3, [r4, #48]	@ 0x30
 8004a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac0 <std+0x68>)
 8004a8c:	6224      	str	r4, [r4, #32]
 8004a8e:	429c      	cmp	r4, r3
 8004a90:	d006      	beq.n	8004aa0 <std+0x48>
 8004a92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004a96:	4294      	cmp	r4, r2
 8004a98:	d002      	beq.n	8004aa0 <std+0x48>
 8004a9a:	33d0      	adds	r3, #208	@ 0xd0
 8004a9c:	429c      	cmp	r4, r3
 8004a9e:	d105      	bne.n	8004aac <std+0x54>
 8004aa0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004aa8:	f000 b95e 	b.w	8004d68 <__retarget_lock_init_recursive>
 8004aac:	bd10      	pop	{r4, pc}
 8004aae:	bf00      	nop
 8004ab0:	08004c01 	.word	0x08004c01
 8004ab4:	08004c23 	.word	0x08004c23
 8004ab8:	08004c5b 	.word	0x08004c5b
 8004abc:	08004c7f 	.word	0x08004c7f
 8004ac0:	20009880 	.word	0x20009880

08004ac4 <stdio_exit_handler>:
 8004ac4:	4a02      	ldr	r2, [pc, #8]	@ (8004ad0 <stdio_exit_handler+0xc>)
 8004ac6:	4903      	ldr	r1, [pc, #12]	@ (8004ad4 <stdio_exit_handler+0x10>)
 8004ac8:	4803      	ldr	r0, [pc, #12]	@ (8004ad8 <stdio_exit_handler+0x14>)
 8004aca:	f000 b869 	b.w	8004ba0 <_fwalk_sglue>
 8004ace:	bf00      	nop
 8004ad0:	20000014 	.word	0x20000014
 8004ad4:	08005625 	.word	0x08005625
 8004ad8:	20000024 	.word	0x20000024

08004adc <cleanup_stdio>:
 8004adc:	6841      	ldr	r1, [r0, #4]
 8004ade:	4b0c      	ldr	r3, [pc, #48]	@ (8004b10 <cleanup_stdio+0x34>)
 8004ae0:	4299      	cmp	r1, r3
 8004ae2:	b510      	push	{r4, lr}
 8004ae4:	4604      	mov	r4, r0
 8004ae6:	d001      	beq.n	8004aec <cleanup_stdio+0x10>
 8004ae8:	f000 fd9c 	bl	8005624 <_fflush_r>
 8004aec:	68a1      	ldr	r1, [r4, #8]
 8004aee:	4b09      	ldr	r3, [pc, #36]	@ (8004b14 <cleanup_stdio+0x38>)
 8004af0:	4299      	cmp	r1, r3
 8004af2:	d002      	beq.n	8004afa <cleanup_stdio+0x1e>
 8004af4:	4620      	mov	r0, r4
 8004af6:	f000 fd95 	bl	8005624 <_fflush_r>
 8004afa:	68e1      	ldr	r1, [r4, #12]
 8004afc:	4b06      	ldr	r3, [pc, #24]	@ (8004b18 <cleanup_stdio+0x3c>)
 8004afe:	4299      	cmp	r1, r3
 8004b00:	d004      	beq.n	8004b0c <cleanup_stdio+0x30>
 8004b02:	4620      	mov	r0, r4
 8004b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b08:	f000 bd8c 	b.w	8005624 <_fflush_r>
 8004b0c:	bd10      	pop	{r4, pc}
 8004b0e:	bf00      	nop
 8004b10:	20009880 	.word	0x20009880
 8004b14:	200098e8 	.word	0x200098e8
 8004b18:	20009950 	.word	0x20009950

08004b1c <global_stdio_init.part.0>:
 8004b1c:	b510      	push	{r4, lr}
 8004b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b4c <global_stdio_init.part.0+0x30>)
 8004b20:	4c0b      	ldr	r4, [pc, #44]	@ (8004b50 <global_stdio_init.part.0+0x34>)
 8004b22:	4a0c      	ldr	r2, [pc, #48]	@ (8004b54 <global_stdio_init.part.0+0x38>)
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	4620      	mov	r0, r4
 8004b28:	2200      	movs	r2, #0
 8004b2a:	2104      	movs	r1, #4
 8004b2c:	f7ff ff94 	bl	8004a58 <std>
 8004b30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004b34:	2201      	movs	r2, #1
 8004b36:	2109      	movs	r1, #9
 8004b38:	f7ff ff8e 	bl	8004a58 <std>
 8004b3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004b40:	2202      	movs	r2, #2
 8004b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b46:	2112      	movs	r1, #18
 8004b48:	f7ff bf86 	b.w	8004a58 <std>
 8004b4c:	200099b8 	.word	0x200099b8
 8004b50:	20009880 	.word	0x20009880
 8004b54:	08004ac5 	.word	0x08004ac5

08004b58 <__sfp_lock_acquire>:
 8004b58:	4801      	ldr	r0, [pc, #4]	@ (8004b60 <__sfp_lock_acquire+0x8>)
 8004b5a:	f000 b906 	b.w	8004d6a <__retarget_lock_acquire_recursive>
 8004b5e:	bf00      	nop
 8004b60:	200099c1 	.word	0x200099c1

08004b64 <__sfp_lock_release>:
 8004b64:	4801      	ldr	r0, [pc, #4]	@ (8004b6c <__sfp_lock_release+0x8>)
 8004b66:	f000 b901 	b.w	8004d6c <__retarget_lock_release_recursive>
 8004b6a:	bf00      	nop
 8004b6c:	200099c1 	.word	0x200099c1

08004b70 <__sinit>:
 8004b70:	b510      	push	{r4, lr}
 8004b72:	4604      	mov	r4, r0
 8004b74:	f7ff fff0 	bl	8004b58 <__sfp_lock_acquire>
 8004b78:	6a23      	ldr	r3, [r4, #32]
 8004b7a:	b11b      	cbz	r3, 8004b84 <__sinit+0x14>
 8004b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b80:	f7ff bff0 	b.w	8004b64 <__sfp_lock_release>
 8004b84:	4b04      	ldr	r3, [pc, #16]	@ (8004b98 <__sinit+0x28>)
 8004b86:	6223      	str	r3, [r4, #32]
 8004b88:	4b04      	ldr	r3, [pc, #16]	@ (8004b9c <__sinit+0x2c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1f5      	bne.n	8004b7c <__sinit+0xc>
 8004b90:	f7ff ffc4 	bl	8004b1c <global_stdio_init.part.0>
 8004b94:	e7f2      	b.n	8004b7c <__sinit+0xc>
 8004b96:	bf00      	nop
 8004b98:	08004add 	.word	0x08004add
 8004b9c:	200099b8 	.word	0x200099b8

08004ba0 <_fwalk_sglue>:
 8004ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ba4:	4607      	mov	r7, r0
 8004ba6:	4688      	mov	r8, r1
 8004ba8:	4614      	mov	r4, r2
 8004baa:	2600      	movs	r6, #0
 8004bac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bb0:	f1b9 0901 	subs.w	r9, r9, #1
 8004bb4:	d505      	bpl.n	8004bc2 <_fwalk_sglue+0x22>
 8004bb6:	6824      	ldr	r4, [r4, #0]
 8004bb8:	2c00      	cmp	r4, #0
 8004bba:	d1f7      	bne.n	8004bac <_fwalk_sglue+0xc>
 8004bbc:	4630      	mov	r0, r6
 8004bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bc2:	89ab      	ldrh	r3, [r5, #12]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d907      	bls.n	8004bd8 <_fwalk_sglue+0x38>
 8004bc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	d003      	beq.n	8004bd8 <_fwalk_sglue+0x38>
 8004bd0:	4629      	mov	r1, r5
 8004bd2:	4638      	mov	r0, r7
 8004bd4:	47c0      	blx	r8
 8004bd6:	4306      	orrs	r6, r0
 8004bd8:	3568      	adds	r5, #104	@ 0x68
 8004bda:	e7e9      	b.n	8004bb0 <_fwalk_sglue+0x10>

08004bdc <iprintf>:
 8004bdc:	b40f      	push	{r0, r1, r2, r3}
 8004bde:	b507      	push	{r0, r1, r2, lr}
 8004be0:	4906      	ldr	r1, [pc, #24]	@ (8004bfc <iprintf+0x20>)
 8004be2:	ab04      	add	r3, sp, #16
 8004be4:	6808      	ldr	r0, [r1, #0]
 8004be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bea:	6881      	ldr	r1, [r0, #8]
 8004bec:	9301      	str	r3, [sp, #4]
 8004bee:	f000 f9ef 	bl	8004fd0 <_vfiprintf_r>
 8004bf2:	b003      	add	sp, #12
 8004bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bf8:	b004      	add	sp, #16
 8004bfa:	4770      	bx	lr
 8004bfc:	20000020 	.word	0x20000020

08004c00 <__sread>:
 8004c00:	b510      	push	{r4, lr}
 8004c02:	460c      	mov	r4, r1
 8004c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c08:	f000 f878 	bl	8004cfc <_read_r>
 8004c0c:	2800      	cmp	r0, #0
 8004c0e:	bfab      	itete	ge
 8004c10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004c12:	89a3      	ldrhlt	r3, [r4, #12]
 8004c14:	181b      	addge	r3, r3, r0
 8004c16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004c1a:	bfac      	ite	ge
 8004c1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004c1e:	81a3      	strhlt	r3, [r4, #12]
 8004c20:	bd10      	pop	{r4, pc}

08004c22 <__swrite>:
 8004c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c26:	461f      	mov	r7, r3
 8004c28:	898b      	ldrh	r3, [r1, #12]
 8004c2a:	05db      	lsls	r3, r3, #23
 8004c2c:	4605      	mov	r5, r0
 8004c2e:	460c      	mov	r4, r1
 8004c30:	4616      	mov	r6, r2
 8004c32:	d505      	bpl.n	8004c40 <__swrite+0x1e>
 8004c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c38:	2302      	movs	r3, #2
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f000 f84c 	bl	8004cd8 <_lseek_r>
 8004c40:	89a3      	ldrh	r3, [r4, #12]
 8004c42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c4a:	81a3      	strh	r3, [r4, #12]
 8004c4c:	4632      	mov	r2, r6
 8004c4e:	463b      	mov	r3, r7
 8004c50:	4628      	mov	r0, r5
 8004c52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c56:	f7ff beed 	b.w	8004a34 <_write_r>

08004c5a <__sseek>:
 8004c5a:	b510      	push	{r4, lr}
 8004c5c:	460c      	mov	r4, r1
 8004c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c62:	f000 f839 	bl	8004cd8 <_lseek_r>
 8004c66:	1c43      	adds	r3, r0, #1
 8004c68:	89a3      	ldrh	r3, [r4, #12]
 8004c6a:	bf15      	itete	ne
 8004c6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004c6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004c72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004c76:	81a3      	strheq	r3, [r4, #12]
 8004c78:	bf18      	it	ne
 8004c7a:	81a3      	strhne	r3, [r4, #12]
 8004c7c:	bd10      	pop	{r4, pc}

08004c7e <__sclose>:
 8004c7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c82:	f000 b819 	b.w	8004cb8 <_close_r>

08004c86 <memcmp>:
 8004c86:	b510      	push	{r4, lr}
 8004c88:	3901      	subs	r1, #1
 8004c8a:	4402      	add	r2, r0
 8004c8c:	4290      	cmp	r0, r2
 8004c8e:	d101      	bne.n	8004c94 <memcmp+0xe>
 8004c90:	2000      	movs	r0, #0
 8004c92:	e005      	b.n	8004ca0 <memcmp+0x1a>
 8004c94:	7803      	ldrb	r3, [r0, #0]
 8004c96:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004c9a:	42a3      	cmp	r3, r4
 8004c9c:	d001      	beq.n	8004ca2 <memcmp+0x1c>
 8004c9e:	1b18      	subs	r0, r3, r4
 8004ca0:	bd10      	pop	{r4, pc}
 8004ca2:	3001      	adds	r0, #1
 8004ca4:	e7f2      	b.n	8004c8c <memcmp+0x6>

08004ca6 <memset>:
 8004ca6:	4402      	add	r2, r0
 8004ca8:	4603      	mov	r3, r0
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d100      	bne.n	8004cb0 <memset+0xa>
 8004cae:	4770      	bx	lr
 8004cb0:	f803 1b01 	strb.w	r1, [r3], #1
 8004cb4:	e7f9      	b.n	8004caa <memset+0x4>
	...

08004cb8 <_close_r>:
 8004cb8:	b538      	push	{r3, r4, r5, lr}
 8004cba:	4d06      	ldr	r5, [pc, #24]	@ (8004cd4 <_close_r+0x1c>)
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	4604      	mov	r4, r0
 8004cc0:	4608      	mov	r0, r1
 8004cc2:	602b      	str	r3, [r5, #0]
 8004cc4:	f7fb feb3 	bl	8000a2e <_close>
 8004cc8:	1c43      	adds	r3, r0, #1
 8004cca:	d102      	bne.n	8004cd2 <_close_r+0x1a>
 8004ccc:	682b      	ldr	r3, [r5, #0]
 8004cce:	b103      	cbz	r3, 8004cd2 <_close_r+0x1a>
 8004cd0:	6023      	str	r3, [r4, #0]
 8004cd2:	bd38      	pop	{r3, r4, r5, pc}
 8004cd4:	200099bc 	.word	0x200099bc

08004cd8 <_lseek_r>:
 8004cd8:	b538      	push	{r3, r4, r5, lr}
 8004cda:	4d07      	ldr	r5, [pc, #28]	@ (8004cf8 <_lseek_r+0x20>)
 8004cdc:	4604      	mov	r4, r0
 8004cde:	4608      	mov	r0, r1
 8004ce0:	4611      	mov	r1, r2
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	602a      	str	r2, [r5, #0]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	f7fb fec8 	bl	8000a7c <_lseek>
 8004cec:	1c43      	adds	r3, r0, #1
 8004cee:	d102      	bne.n	8004cf6 <_lseek_r+0x1e>
 8004cf0:	682b      	ldr	r3, [r5, #0]
 8004cf2:	b103      	cbz	r3, 8004cf6 <_lseek_r+0x1e>
 8004cf4:	6023      	str	r3, [r4, #0]
 8004cf6:	bd38      	pop	{r3, r4, r5, pc}
 8004cf8:	200099bc 	.word	0x200099bc

08004cfc <_read_r>:
 8004cfc:	b538      	push	{r3, r4, r5, lr}
 8004cfe:	4d07      	ldr	r5, [pc, #28]	@ (8004d1c <_read_r+0x20>)
 8004d00:	4604      	mov	r4, r0
 8004d02:	4608      	mov	r0, r1
 8004d04:	4611      	mov	r1, r2
 8004d06:	2200      	movs	r2, #0
 8004d08:	602a      	str	r2, [r5, #0]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	f7fb fe72 	bl	80009f4 <_read>
 8004d10:	1c43      	adds	r3, r0, #1
 8004d12:	d102      	bne.n	8004d1a <_read_r+0x1e>
 8004d14:	682b      	ldr	r3, [r5, #0]
 8004d16:	b103      	cbz	r3, 8004d1a <_read_r+0x1e>
 8004d18:	6023      	str	r3, [r4, #0]
 8004d1a:	bd38      	pop	{r3, r4, r5, pc}
 8004d1c:	200099bc 	.word	0x200099bc

08004d20 <__libc_init_array>:
 8004d20:	b570      	push	{r4, r5, r6, lr}
 8004d22:	4d0d      	ldr	r5, [pc, #52]	@ (8004d58 <__libc_init_array+0x38>)
 8004d24:	4c0d      	ldr	r4, [pc, #52]	@ (8004d5c <__libc_init_array+0x3c>)
 8004d26:	1b64      	subs	r4, r4, r5
 8004d28:	10a4      	asrs	r4, r4, #2
 8004d2a:	2600      	movs	r6, #0
 8004d2c:	42a6      	cmp	r6, r4
 8004d2e:	d109      	bne.n	8004d44 <__libc_init_array+0x24>
 8004d30:	4d0b      	ldr	r5, [pc, #44]	@ (8004d60 <__libc_init_array+0x40>)
 8004d32:	4c0c      	ldr	r4, [pc, #48]	@ (8004d64 <__libc_init_array+0x44>)
 8004d34:	f000 fdd4 	bl	80058e0 <_init>
 8004d38:	1b64      	subs	r4, r4, r5
 8004d3a:	10a4      	asrs	r4, r4, #2
 8004d3c:	2600      	movs	r6, #0
 8004d3e:	42a6      	cmp	r6, r4
 8004d40:	d105      	bne.n	8004d4e <__libc_init_array+0x2e>
 8004d42:	bd70      	pop	{r4, r5, r6, pc}
 8004d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d48:	4798      	blx	r3
 8004d4a:	3601      	adds	r6, #1
 8004d4c:	e7ee      	b.n	8004d2c <__libc_init_array+0xc>
 8004d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d52:	4798      	blx	r3
 8004d54:	3601      	adds	r6, #1
 8004d56:	e7f2      	b.n	8004d3e <__libc_init_array+0x1e>
 8004d58:	08005a6c 	.word	0x08005a6c
 8004d5c:	08005a6c 	.word	0x08005a6c
 8004d60:	08005a6c 	.word	0x08005a6c
 8004d64:	08005a70 	.word	0x08005a70

08004d68 <__retarget_lock_init_recursive>:
 8004d68:	4770      	bx	lr

08004d6a <__retarget_lock_acquire_recursive>:
 8004d6a:	4770      	bx	lr

08004d6c <__retarget_lock_release_recursive>:
 8004d6c:	4770      	bx	lr

08004d6e <memcpy>:
 8004d6e:	440a      	add	r2, r1
 8004d70:	4291      	cmp	r1, r2
 8004d72:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004d76:	d100      	bne.n	8004d7a <memcpy+0xc>
 8004d78:	4770      	bx	lr
 8004d7a:	b510      	push	{r4, lr}
 8004d7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d84:	4291      	cmp	r1, r2
 8004d86:	d1f9      	bne.n	8004d7c <memcpy+0xe>
 8004d88:	bd10      	pop	{r4, pc}
	...

08004d8c <_free_r>:
 8004d8c:	b538      	push	{r3, r4, r5, lr}
 8004d8e:	4605      	mov	r5, r0
 8004d90:	2900      	cmp	r1, #0
 8004d92:	d041      	beq.n	8004e18 <_free_r+0x8c>
 8004d94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d98:	1f0c      	subs	r4, r1, #4
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	bfb8      	it	lt
 8004d9e:	18e4      	addlt	r4, r4, r3
 8004da0:	f000 f8e0 	bl	8004f64 <__malloc_lock>
 8004da4:	4a1d      	ldr	r2, [pc, #116]	@ (8004e1c <_free_r+0x90>)
 8004da6:	6813      	ldr	r3, [r2, #0]
 8004da8:	b933      	cbnz	r3, 8004db8 <_free_r+0x2c>
 8004daa:	6063      	str	r3, [r4, #4]
 8004dac:	6014      	str	r4, [r2, #0]
 8004dae:	4628      	mov	r0, r5
 8004db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004db4:	f000 b8dc 	b.w	8004f70 <__malloc_unlock>
 8004db8:	42a3      	cmp	r3, r4
 8004dba:	d908      	bls.n	8004dce <_free_r+0x42>
 8004dbc:	6820      	ldr	r0, [r4, #0]
 8004dbe:	1821      	adds	r1, r4, r0
 8004dc0:	428b      	cmp	r3, r1
 8004dc2:	bf01      	itttt	eq
 8004dc4:	6819      	ldreq	r1, [r3, #0]
 8004dc6:	685b      	ldreq	r3, [r3, #4]
 8004dc8:	1809      	addeq	r1, r1, r0
 8004dca:	6021      	streq	r1, [r4, #0]
 8004dcc:	e7ed      	b.n	8004daa <_free_r+0x1e>
 8004dce:	461a      	mov	r2, r3
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	b10b      	cbz	r3, 8004dd8 <_free_r+0x4c>
 8004dd4:	42a3      	cmp	r3, r4
 8004dd6:	d9fa      	bls.n	8004dce <_free_r+0x42>
 8004dd8:	6811      	ldr	r1, [r2, #0]
 8004dda:	1850      	adds	r0, r2, r1
 8004ddc:	42a0      	cmp	r0, r4
 8004dde:	d10b      	bne.n	8004df8 <_free_r+0x6c>
 8004de0:	6820      	ldr	r0, [r4, #0]
 8004de2:	4401      	add	r1, r0
 8004de4:	1850      	adds	r0, r2, r1
 8004de6:	4283      	cmp	r3, r0
 8004de8:	6011      	str	r1, [r2, #0]
 8004dea:	d1e0      	bne.n	8004dae <_free_r+0x22>
 8004dec:	6818      	ldr	r0, [r3, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	6053      	str	r3, [r2, #4]
 8004df2:	4408      	add	r0, r1
 8004df4:	6010      	str	r0, [r2, #0]
 8004df6:	e7da      	b.n	8004dae <_free_r+0x22>
 8004df8:	d902      	bls.n	8004e00 <_free_r+0x74>
 8004dfa:	230c      	movs	r3, #12
 8004dfc:	602b      	str	r3, [r5, #0]
 8004dfe:	e7d6      	b.n	8004dae <_free_r+0x22>
 8004e00:	6820      	ldr	r0, [r4, #0]
 8004e02:	1821      	adds	r1, r4, r0
 8004e04:	428b      	cmp	r3, r1
 8004e06:	bf04      	itt	eq
 8004e08:	6819      	ldreq	r1, [r3, #0]
 8004e0a:	685b      	ldreq	r3, [r3, #4]
 8004e0c:	6063      	str	r3, [r4, #4]
 8004e0e:	bf04      	itt	eq
 8004e10:	1809      	addeq	r1, r1, r0
 8004e12:	6021      	streq	r1, [r4, #0]
 8004e14:	6054      	str	r4, [r2, #4]
 8004e16:	e7ca      	b.n	8004dae <_free_r+0x22>
 8004e18:	bd38      	pop	{r3, r4, r5, pc}
 8004e1a:	bf00      	nop
 8004e1c:	200099c8 	.word	0x200099c8

08004e20 <sbrk_aligned>:
 8004e20:	b570      	push	{r4, r5, r6, lr}
 8004e22:	4e0f      	ldr	r6, [pc, #60]	@ (8004e60 <sbrk_aligned+0x40>)
 8004e24:	460c      	mov	r4, r1
 8004e26:	6831      	ldr	r1, [r6, #0]
 8004e28:	4605      	mov	r5, r0
 8004e2a:	b911      	cbnz	r1, 8004e32 <sbrk_aligned+0x12>
 8004e2c:	f000 fcb6 	bl	800579c <_sbrk_r>
 8004e30:	6030      	str	r0, [r6, #0]
 8004e32:	4621      	mov	r1, r4
 8004e34:	4628      	mov	r0, r5
 8004e36:	f000 fcb1 	bl	800579c <_sbrk_r>
 8004e3a:	1c43      	adds	r3, r0, #1
 8004e3c:	d103      	bne.n	8004e46 <sbrk_aligned+0x26>
 8004e3e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004e42:	4620      	mov	r0, r4
 8004e44:	bd70      	pop	{r4, r5, r6, pc}
 8004e46:	1cc4      	adds	r4, r0, #3
 8004e48:	f024 0403 	bic.w	r4, r4, #3
 8004e4c:	42a0      	cmp	r0, r4
 8004e4e:	d0f8      	beq.n	8004e42 <sbrk_aligned+0x22>
 8004e50:	1a21      	subs	r1, r4, r0
 8004e52:	4628      	mov	r0, r5
 8004e54:	f000 fca2 	bl	800579c <_sbrk_r>
 8004e58:	3001      	adds	r0, #1
 8004e5a:	d1f2      	bne.n	8004e42 <sbrk_aligned+0x22>
 8004e5c:	e7ef      	b.n	8004e3e <sbrk_aligned+0x1e>
 8004e5e:	bf00      	nop
 8004e60:	200099c4 	.word	0x200099c4

08004e64 <_malloc_r>:
 8004e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e68:	1ccd      	adds	r5, r1, #3
 8004e6a:	f025 0503 	bic.w	r5, r5, #3
 8004e6e:	3508      	adds	r5, #8
 8004e70:	2d0c      	cmp	r5, #12
 8004e72:	bf38      	it	cc
 8004e74:	250c      	movcc	r5, #12
 8004e76:	2d00      	cmp	r5, #0
 8004e78:	4606      	mov	r6, r0
 8004e7a:	db01      	blt.n	8004e80 <_malloc_r+0x1c>
 8004e7c:	42a9      	cmp	r1, r5
 8004e7e:	d904      	bls.n	8004e8a <_malloc_r+0x26>
 8004e80:	230c      	movs	r3, #12
 8004e82:	6033      	str	r3, [r6, #0]
 8004e84:	2000      	movs	r0, #0
 8004e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f60 <_malloc_r+0xfc>
 8004e8e:	f000 f869 	bl	8004f64 <__malloc_lock>
 8004e92:	f8d8 3000 	ldr.w	r3, [r8]
 8004e96:	461c      	mov	r4, r3
 8004e98:	bb44      	cbnz	r4, 8004eec <_malloc_r+0x88>
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	4630      	mov	r0, r6
 8004e9e:	f7ff ffbf 	bl	8004e20 <sbrk_aligned>
 8004ea2:	1c43      	adds	r3, r0, #1
 8004ea4:	4604      	mov	r4, r0
 8004ea6:	d158      	bne.n	8004f5a <_malloc_r+0xf6>
 8004ea8:	f8d8 4000 	ldr.w	r4, [r8]
 8004eac:	4627      	mov	r7, r4
 8004eae:	2f00      	cmp	r7, #0
 8004eb0:	d143      	bne.n	8004f3a <_malloc_r+0xd6>
 8004eb2:	2c00      	cmp	r4, #0
 8004eb4:	d04b      	beq.n	8004f4e <_malloc_r+0xea>
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	4639      	mov	r1, r7
 8004eba:	4630      	mov	r0, r6
 8004ebc:	eb04 0903 	add.w	r9, r4, r3
 8004ec0:	f000 fc6c 	bl	800579c <_sbrk_r>
 8004ec4:	4581      	cmp	r9, r0
 8004ec6:	d142      	bne.n	8004f4e <_malloc_r+0xea>
 8004ec8:	6821      	ldr	r1, [r4, #0]
 8004eca:	1a6d      	subs	r5, r5, r1
 8004ecc:	4629      	mov	r1, r5
 8004ece:	4630      	mov	r0, r6
 8004ed0:	f7ff ffa6 	bl	8004e20 <sbrk_aligned>
 8004ed4:	3001      	adds	r0, #1
 8004ed6:	d03a      	beq.n	8004f4e <_malloc_r+0xea>
 8004ed8:	6823      	ldr	r3, [r4, #0]
 8004eda:	442b      	add	r3, r5
 8004edc:	6023      	str	r3, [r4, #0]
 8004ede:	f8d8 3000 	ldr.w	r3, [r8]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	bb62      	cbnz	r2, 8004f40 <_malloc_r+0xdc>
 8004ee6:	f8c8 7000 	str.w	r7, [r8]
 8004eea:	e00f      	b.n	8004f0c <_malloc_r+0xa8>
 8004eec:	6822      	ldr	r2, [r4, #0]
 8004eee:	1b52      	subs	r2, r2, r5
 8004ef0:	d420      	bmi.n	8004f34 <_malloc_r+0xd0>
 8004ef2:	2a0b      	cmp	r2, #11
 8004ef4:	d917      	bls.n	8004f26 <_malloc_r+0xc2>
 8004ef6:	1961      	adds	r1, r4, r5
 8004ef8:	42a3      	cmp	r3, r4
 8004efa:	6025      	str	r5, [r4, #0]
 8004efc:	bf18      	it	ne
 8004efe:	6059      	strne	r1, [r3, #4]
 8004f00:	6863      	ldr	r3, [r4, #4]
 8004f02:	bf08      	it	eq
 8004f04:	f8c8 1000 	streq.w	r1, [r8]
 8004f08:	5162      	str	r2, [r4, r5]
 8004f0a:	604b      	str	r3, [r1, #4]
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	f000 f82f 	bl	8004f70 <__malloc_unlock>
 8004f12:	f104 000b 	add.w	r0, r4, #11
 8004f16:	1d23      	adds	r3, r4, #4
 8004f18:	f020 0007 	bic.w	r0, r0, #7
 8004f1c:	1ac2      	subs	r2, r0, r3
 8004f1e:	bf1c      	itt	ne
 8004f20:	1a1b      	subne	r3, r3, r0
 8004f22:	50a3      	strne	r3, [r4, r2]
 8004f24:	e7af      	b.n	8004e86 <_malloc_r+0x22>
 8004f26:	6862      	ldr	r2, [r4, #4]
 8004f28:	42a3      	cmp	r3, r4
 8004f2a:	bf0c      	ite	eq
 8004f2c:	f8c8 2000 	streq.w	r2, [r8]
 8004f30:	605a      	strne	r2, [r3, #4]
 8004f32:	e7eb      	b.n	8004f0c <_malloc_r+0xa8>
 8004f34:	4623      	mov	r3, r4
 8004f36:	6864      	ldr	r4, [r4, #4]
 8004f38:	e7ae      	b.n	8004e98 <_malloc_r+0x34>
 8004f3a:	463c      	mov	r4, r7
 8004f3c:	687f      	ldr	r7, [r7, #4]
 8004f3e:	e7b6      	b.n	8004eae <_malloc_r+0x4a>
 8004f40:	461a      	mov	r2, r3
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	42a3      	cmp	r3, r4
 8004f46:	d1fb      	bne.n	8004f40 <_malloc_r+0xdc>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	6053      	str	r3, [r2, #4]
 8004f4c:	e7de      	b.n	8004f0c <_malloc_r+0xa8>
 8004f4e:	230c      	movs	r3, #12
 8004f50:	6033      	str	r3, [r6, #0]
 8004f52:	4630      	mov	r0, r6
 8004f54:	f000 f80c 	bl	8004f70 <__malloc_unlock>
 8004f58:	e794      	b.n	8004e84 <_malloc_r+0x20>
 8004f5a:	6005      	str	r5, [r0, #0]
 8004f5c:	e7d6      	b.n	8004f0c <_malloc_r+0xa8>
 8004f5e:	bf00      	nop
 8004f60:	200099c8 	.word	0x200099c8

08004f64 <__malloc_lock>:
 8004f64:	4801      	ldr	r0, [pc, #4]	@ (8004f6c <__malloc_lock+0x8>)
 8004f66:	f7ff bf00 	b.w	8004d6a <__retarget_lock_acquire_recursive>
 8004f6a:	bf00      	nop
 8004f6c:	200099c0 	.word	0x200099c0

08004f70 <__malloc_unlock>:
 8004f70:	4801      	ldr	r0, [pc, #4]	@ (8004f78 <__malloc_unlock+0x8>)
 8004f72:	f7ff befb 	b.w	8004d6c <__retarget_lock_release_recursive>
 8004f76:	bf00      	nop
 8004f78:	200099c0 	.word	0x200099c0

08004f7c <__sfputc_r>:
 8004f7c:	6893      	ldr	r3, [r2, #8]
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	b410      	push	{r4}
 8004f84:	6093      	str	r3, [r2, #8]
 8004f86:	da08      	bge.n	8004f9a <__sfputc_r+0x1e>
 8004f88:	6994      	ldr	r4, [r2, #24]
 8004f8a:	42a3      	cmp	r3, r4
 8004f8c:	db01      	blt.n	8004f92 <__sfputc_r+0x16>
 8004f8e:	290a      	cmp	r1, #10
 8004f90:	d103      	bne.n	8004f9a <__sfputc_r+0x1e>
 8004f92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f96:	f000 bb6d 	b.w	8005674 <__swbuf_r>
 8004f9a:	6813      	ldr	r3, [r2, #0]
 8004f9c:	1c58      	adds	r0, r3, #1
 8004f9e:	6010      	str	r0, [r2, #0]
 8004fa0:	7019      	strb	r1, [r3, #0]
 8004fa2:	4608      	mov	r0, r1
 8004fa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <__sfputs_r>:
 8004faa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fac:	4606      	mov	r6, r0
 8004fae:	460f      	mov	r7, r1
 8004fb0:	4614      	mov	r4, r2
 8004fb2:	18d5      	adds	r5, r2, r3
 8004fb4:	42ac      	cmp	r4, r5
 8004fb6:	d101      	bne.n	8004fbc <__sfputs_r+0x12>
 8004fb8:	2000      	movs	r0, #0
 8004fba:	e007      	b.n	8004fcc <__sfputs_r+0x22>
 8004fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fc0:	463a      	mov	r2, r7
 8004fc2:	4630      	mov	r0, r6
 8004fc4:	f7ff ffda 	bl	8004f7c <__sfputc_r>
 8004fc8:	1c43      	adds	r3, r0, #1
 8004fca:	d1f3      	bne.n	8004fb4 <__sfputs_r+0xa>
 8004fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004fd0 <_vfiprintf_r>:
 8004fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd4:	460d      	mov	r5, r1
 8004fd6:	b09d      	sub	sp, #116	@ 0x74
 8004fd8:	4614      	mov	r4, r2
 8004fda:	4698      	mov	r8, r3
 8004fdc:	4606      	mov	r6, r0
 8004fde:	b118      	cbz	r0, 8004fe8 <_vfiprintf_r+0x18>
 8004fe0:	6a03      	ldr	r3, [r0, #32]
 8004fe2:	b90b      	cbnz	r3, 8004fe8 <_vfiprintf_r+0x18>
 8004fe4:	f7ff fdc4 	bl	8004b70 <__sinit>
 8004fe8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004fea:	07d9      	lsls	r1, r3, #31
 8004fec:	d405      	bmi.n	8004ffa <_vfiprintf_r+0x2a>
 8004fee:	89ab      	ldrh	r3, [r5, #12]
 8004ff0:	059a      	lsls	r2, r3, #22
 8004ff2:	d402      	bmi.n	8004ffa <_vfiprintf_r+0x2a>
 8004ff4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ff6:	f7ff feb8 	bl	8004d6a <__retarget_lock_acquire_recursive>
 8004ffa:	89ab      	ldrh	r3, [r5, #12]
 8004ffc:	071b      	lsls	r3, r3, #28
 8004ffe:	d501      	bpl.n	8005004 <_vfiprintf_r+0x34>
 8005000:	692b      	ldr	r3, [r5, #16]
 8005002:	b99b      	cbnz	r3, 800502c <_vfiprintf_r+0x5c>
 8005004:	4629      	mov	r1, r5
 8005006:	4630      	mov	r0, r6
 8005008:	f000 fb72 	bl	80056f0 <__swsetup_r>
 800500c:	b170      	cbz	r0, 800502c <_vfiprintf_r+0x5c>
 800500e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005010:	07dc      	lsls	r4, r3, #31
 8005012:	d504      	bpl.n	800501e <_vfiprintf_r+0x4e>
 8005014:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005018:	b01d      	add	sp, #116	@ 0x74
 800501a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800501e:	89ab      	ldrh	r3, [r5, #12]
 8005020:	0598      	lsls	r0, r3, #22
 8005022:	d4f7      	bmi.n	8005014 <_vfiprintf_r+0x44>
 8005024:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005026:	f7ff fea1 	bl	8004d6c <__retarget_lock_release_recursive>
 800502a:	e7f3      	b.n	8005014 <_vfiprintf_r+0x44>
 800502c:	2300      	movs	r3, #0
 800502e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005030:	2320      	movs	r3, #32
 8005032:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005036:	f8cd 800c 	str.w	r8, [sp, #12]
 800503a:	2330      	movs	r3, #48	@ 0x30
 800503c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80051ec <_vfiprintf_r+0x21c>
 8005040:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005044:	f04f 0901 	mov.w	r9, #1
 8005048:	4623      	mov	r3, r4
 800504a:	469a      	mov	sl, r3
 800504c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005050:	b10a      	cbz	r2, 8005056 <_vfiprintf_r+0x86>
 8005052:	2a25      	cmp	r2, #37	@ 0x25
 8005054:	d1f9      	bne.n	800504a <_vfiprintf_r+0x7a>
 8005056:	ebba 0b04 	subs.w	fp, sl, r4
 800505a:	d00b      	beq.n	8005074 <_vfiprintf_r+0xa4>
 800505c:	465b      	mov	r3, fp
 800505e:	4622      	mov	r2, r4
 8005060:	4629      	mov	r1, r5
 8005062:	4630      	mov	r0, r6
 8005064:	f7ff ffa1 	bl	8004faa <__sfputs_r>
 8005068:	3001      	adds	r0, #1
 800506a:	f000 80a7 	beq.w	80051bc <_vfiprintf_r+0x1ec>
 800506e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005070:	445a      	add	r2, fp
 8005072:	9209      	str	r2, [sp, #36]	@ 0x24
 8005074:	f89a 3000 	ldrb.w	r3, [sl]
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 809f 	beq.w	80051bc <_vfiprintf_r+0x1ec>
 800507e:	2300      	movs	r3, #0
 8005080:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005084:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005088:	f10a 0a01 	add.w	sl, sl, #1
 800508c:	9304      	str	r3, [sp, #16]
 800508e:	9307      	str	r3, [sp, #28]
 8005090:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005094:	931a      	str	r3, [sp, #104]	@ 0x68
 8005096:	4654      	mov	r4, sl
 8005098:	2205      	movs	r2, #5
 800509a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800509e:	4853      	ldr	r0, [pc, #332]	@ (80051ec <_vfiprintf_r+0x21c>)
 80050a0:	f7fb f8ee 	bl	8000280 <memchr>
 80050a4:	9a04      	ldr	r2, [sp, #16]
 80050a6:	b9d8      	cbnz	r0, 80050e0 <_vfiprintf_r+0x110>
 80050a8:	06d1      	lsls	r1, r2, #27
 80050aa:	bf44      	itt	mi
 80050ac:	2320      	movmi	r3, #32
 80050ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050b2:	0713      	lsls	r3, r2, #28
 80050b4:	bf44      	itt	mi
 80050b6:	232b      	movmi	r3, #43	@ 0x2b
 80050b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050bc:	f89a 3000 	ldrb.w	r3, [sl]
 80050c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80050c2:	d015      	beq.n	80050f0 <_vfiprintf_r+0x120>
 80050c4:	9a07      	ldr	r2, [sp, #28]
 80050c6:	4654      	mov	r4, sl
 80050c8:	2000      	movs	r0, #0
 80050ca:	f04f 0c0a 	mov.w	ip, #10
 80050ce:	4621      	mov	r1, r4
 80050d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050d4:	3b30      	subs	r3, #48	@ 0x30
 80050d6:	2b09      	cmp	r3, #9
 80050d8:	d94b      	bls.n	8005172 <_vfiprintf_r+0x1a2>
 80050da:	b1b0      	cbz	r0, 800510a <_vfiprintf_r+0x13a>
 80050dc:	9207      	str	r2, [sp, #28]
 80050de:	e014      	b.n	800510a <_vfiprintf_r+0x13a>
 80050e0:	eba0 0308 	sub.w	r3, r0, r8
 80050e4:	fa09 f303 	lsl.w	r3, r9, r3
 80050e8:	4313      	orrs	r3, r2
 80050ea:	9304      	str	r3, [sp, #16]
 80050ec:	46a2      	mov	sl, r4
 80050ee:	e7d2      	b.n	8005096 <_vfiprintf_r+0xc6>
 80050f0:	9b03      	ldr	r3, [sp, #12]
 80050f2:	1d19      	adds	r1, r3, #4
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	9103      	str	r1, [sp, #12]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	bfbb      	ittet	lt
 80050fc:	425b      	neglt	r3, r3
 80050fe:	f042 0202 	orrlt.w	r2, r2, #2
 8005102:	9307      	strge	r3, [sp, #28]
 8005104:	9307      	strlt	r3, [sp, #28]
 8005106:	bfb8      	it	lt
 8005108:	9204      	strlt	r2, [sp, #16]
 800510a:	7823      	ldrb	r3, [r4, #0]
 800510c:	2b2e      	cmp	r3, #46	@ 0x2e
 800510e:	d10a      	bne.n	8005126 <_vfiprintf_r+0x156>
 8005110:	7863      	ldrb	r3, [r4, #1]
 8005112:	2b2a      	cmp	r3, #42	@ 0x2a
 8005114:	d132      	bne.n	800517c <_vfiprintf_r+0x1ac>
 8005116:	9b03      	ldr	r3, [sp, #12]
 8005118:	1d1a      	adds	r2, r3, #4
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	9203      	str	r2, [sp, #12]
 800511e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005122:	3402      	adds	r4, #2
 8005124:	9305      	str	r3, [sp, #20]
 8005126:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80051fc <_vfiprintf_r+0x22c>
 800512a:	7821      	ldrb	r1, [r4, #0]
 800512c:	2203      	movs	r2, #3
 800512e:	4650      	mov	r0, sl
 8005130:	f7fb f8a6 	bl	8000280 <memchr>
 8005134:	b138      	cbz	r0, 8005146 <_vfiprintf_r+0x176>
 8005136:	9b04      	ldr	r3, [sp, #16]
 8005138:	eba0 000a 	sub.w	r0, r0, sl
 800513c:	2240      	movs	r2, #64	@ 0x40
 800513e:	4082      	lsls	r2, r0
 8005140:	4313      	orrs	r3, r2
 8005142:	3401      	adds	r4, #1
 8005144:	9304      	str	r3, [sp, #16]
 8005146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800514a:	4829      	ldr	r0, [pc, #164]	@ (80051f0 <_vfiprintf_r+0x220>)
 800514c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005150:	2206      	movs	r2, #6
 8005152:	f7fb f895 	bl	8000280 <memchr>
 8005156:	2800      	cmp	r0, #0
 8005158:	d03f      	beq.n	80051da <_vfiprintf_r+0x20a>
 800515a:	4b26      	ldr	r3, [pc, #152]	@ (80051f4 <_vfiprintf_r+0x224>)
 800515c:	bb1b      	cbnz	r3, 80051a6 <_vfiprintf_r+0x1d6>
 800515e:	9b03      	ldr	r3, [sp, #12]
 8005160:	3307      	adds	r3, #7
 8005162:	f023 0307 	bic.w	r3, r3, #7
 8005166:	3308      	adds	r3, #8
 8005168:	9303      	str	r3, [sp, #12]
 800516a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800516c:	443b      	add	r3, r7
 800516e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005170:	e76a      	b.n	8005048 <_vfiprintf_r+0x78>
 8005172:	fb0c 3202 	mla	r2, ip, r2, r3
 8005176:	460c      	mov	r4, r1
 8005178:	2001      	movs	r0, #1
 800517a:	e7a8      	b.n	80050ce <_vfiprintf_r+0xfe>
 800517c:	2300      	movs	r3, #0
 800517e:	3401      	adds	r4, #1
 8005180:	9305      	str	r3, [sp, #20]
 8005182:	4619      	mov	r1, r3
 8005184:	f04f 0c0a 	mov.w	ip, #10
 8005188:	4620      	mov	r0, r4
 800518a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800518e:	3a30      	subs	r2, #48	@ 0x30
 8005190:	2a09      	cmp	r2, #9
 8005192:	d903      	bls.n	800519c <_vfiprintf_r+0x1cc>
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0c6      	beq.n	8005126 <_vfiprintf_r+0x156>
 8005198:	9105      	str	r1, [sp, #20]
 800519a:	e7c4      	b.n	8005126 <_vfiprintf_r+0x156>
 800519c:	fb0c 2101 	mla	r1, ip, r1, r2
 80051a0:	4604      	mov	r4, r0
 80051a2:	2301      	movs	r3, #1
 80051a4:	e7f0      	b.n	8005188 <_vfiprintf_r+0x1b8>
 80051a6:	ab03      	add	r3, sp, #12
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	462a      	mov	r2, r5
 80051ac:	4b12      	ldr	r3, [pc, #72]	@ (80051f8 <_vfiprintf_r+0x228>)
 80051ae:	a904      	add	r1, sp, #16
 80051b0:	4630      	mov	r0, r6
 80051b2:	f3af 8000 	nop.w
 80051b6:	4607      	mov	r7, r0
 80051b8:	1c78      	adds	r0, r7, #1
 80051ba:	d1d6      	bne.n	800516a <_vfiprintf_r+0x19a>
 80051bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051be:	07d9      	lsls	r1, r3, #31
 80051c0:	d405      	bmi.n	80051ce <_vfiprintf_r+0x1fe>
 80051c2:	89ab      	ldrh	r3, [r5, #12]
 80051c4:	059a      	lsls	r2, r3, #22
 80051c6:	d402      	bmi.n	80051ce <_vfiprintf_r+0x1fe>
 80051c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051ca:	f7ff fdcf 	bl	8004d6c <__retarget_lock_release_recursive>
 80051ce:	89ab      	ldrh	r3, [r5, #12]
 80051d0:	065b      	lsls	r3, r3, #25
 80051d2:	f53f af1f 	bmi.w	8005014 <_vfiprintf_r+0x44>
 80051d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80051d8:	e71e      	b.n	8005018 <_vfiprintf_r+0x48>
 80051da:	ab03      	add	r3, sp, #12
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	462a      	mov	r2, r5
 80051e0:	4b05      	ldr	r3, [pc, #20]	@ (80051f8 <_vfiprintf_r+0x228>)
 80051e2:	a904      	add	r1, sp, #16
 80051e4:	4630      	mov	r0, r6
 80051e6:	f000 f879 	bl	80052dc <_printf_i>
 80051ea:	e7e4      	b.n	80051b6 <_vfiprintf_r+0x1e6>
 80051ec:	08005a2e 	.word	0x08005a2e
 80051f0:	08005a38 	.word	0x08005a38
 80051f4:	00000000 	.word	0x00000000
 80051f8:	08004fab 	.word	0x08004fab
 80051fc:	08005a34 	.word	0x08005a34

08005200 <_printf_common>:
 8005200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005204:	4616      	mov	r6, r2
 8005206:	4698      	mov	r8, r3
 8005208:	688a      	ldr	r2, [r1, #8]
 800520a:	690b      	ldr	r3, [r1, #16]
 800520c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005210:	4293      	cmp	r3, r2
 8005212:	bfb8      	it	lt
 8005214:	4613      	movlt	r3, r2
 8005216:	6033      	str	r3, [r6, #0]
 8005218:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800521c:	4607      	mov	r7, r0
 800521e:	460c      	mov	r4, r1
 8005220:	b10a      	cbz	r2, 8005226 <_printf_common+0x26>
 8005222:	3301      	adds	r3, #1
 8005224:	6033      	str	r3, [r6, #0]
 8005226:	6823      	ldr	r3, [r4, #0]
 8005228:	0699      	lsls	r1, r3, #26
 800522a:	bf42      	ittt	mi
 800522c:	6833      	ldrmi	r3, [r6, #0]
 800522e:	3302      	addmi	r3, #2
 8005230:	6033      	strmi	r3, [r6, #0]
 8005232:	6825      	ldr	r5, [r4, #0]
 8005234:	f015 0506 	ands.w	r5, r5, #6
 8005238:	d106      	bne.n	8005248 <_printf_common+0x48>
 800523a:	f104 0a19 	add.w	sl, r4, #25
 800523e:	68e3      	ldr	r3, [r4, #12]
 8005240:	6832      	ldr	r2, [r6, #0]
 8005242:	1a9b      	subs	r3, r3, r2
 8005244:	42ab      	cmp	r3, r5
 8005246:	dc26      	bgt.n	8005296 <_printf_common+0x96>
 8005248:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800524c:	6822      	ldr	r2, [r4, #0]
 800524e:	3b00      	subs	r3, #0
 8005250:	bf18      	it	ne
 8005252:	2301      	movne	r3, #1
 8005254:	0692      	lsls	r2, r2, #26
 8005256:	d42b      	bmi.n	80052b0 <_printf_common+0xb0>
 8005258:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800525c:	4641      	mov	r1, r8
 800525e:	4638      	mov	r0, r7
 8005260:	47c8      	blx	r9
 8005262:	3001      	adds	r0, #1
 8005264:	d01e      	beq.n	80052a4 <_printf_common+0xa4>
 8005266:	6823      	ldr	r3, [r4, #0]
 8005268:	6922      	ldr	r2, [r4, #16]
 800526a:	f003 0306 	and.w	r3, r3, #6
 800526e:	2b04      	cmp	r3, #4
 8005270:	bf02      	ittt	eq
 8005272:	68e5      	ldreq	r5, [r4, #12]
 8005274:	6833      	ldreq	r3, [r6, #0]
 8005276:	1aed      	subeq	r5, r5, r3
 8005278:	68a3      	ldr	r3, [r4, #8]
 800527a:	bf0c      	ite	eq
 800527c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005280:	2500      	movne	r5, #0
 8005282:	4293      	cmp	r3, r2
 8005284:	bfc4      	itt	gt
 8005286:	1a9b      	subgt	r3, r3, r2
 8005288:	18ed      	addgt	r5, r5, r3
 800528a:	2600      	movs	r6, #0
 800528c:	341a      	adds	r4, #26
 800528e:	42b5      	cmp	r5, r6
 8005290:	d11a      	bne.n	80052c8 <_printf_common+0xc8>
 8005292:	2000      	movs	r0, #0
 8005294:	e008      	b.n	80052a8 <_printf_common+0xa8>
 8005296:	2301      	movs	r3, #1
 8005298:	4652      	mov	r2, sl
 800529a:	4641      	mov	r1, r8
 800529c:	4638      	mov	r0, r7
 800529e:	47c8      	blx	r9
 80052a0:	3001      	adds	r0, #1
 80052a2:	d103      	bne.n	80052ac <_printf_common+0xac>
 80052a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80052a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ac:	3501      	adds	r5, #1
 80052ae:	e7c6      	b.n	800523e <_printf_common+0x3e>
 80052b0:	18e1      	adds	r1, r4, r3
 80052b2:	1c5a      	adds	r2, r3, #1
 80052b4:	2030      	movs	r0, #48	@ 0x30
 80052b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80052ba:	4422      	add	r2, r4
 80052bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80052c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80052c4:	3302      	adds	r3, #2
 80052c6:	e7c7      	b.n	8005258 <_printf_common+0x58>
 80052c8:	2301      	movs	r3, #1
 80052ca:	4622      	mov	r2, r4
 80052cc:	4641      	mov	r1, r8
 80052ce:	4638      	mov	r0, r7
 80052d0:	47c8      	blx	r9
 80052d2:	3001      	adds	r0, #1
 80052d4:	d0e6      	beq.n	80052a4 <_printf_common+0xa4>
 80052d6:	3601      	adds	r6, #1
 80052d8:	e7d9      	b.n	800528e <_printf_common+0x8e>
	...

080052dc <_printf_i>:
 80052dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052e0:	7e0f      	ldrb	r7, [r1, #24]
 80052e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80052e4:	2f78      	cmp	r7, #120	@ 0x78
 80052e6:	4691      	mov	r9, r2
 80052e8:	4680      	mov	r8, r0
 80052ea:	460c      	mov	r4, r1
 80052ec:	469a      	mov	sl, r3
 80052ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80052f2:	d807      	bhi.n	8005304 <_printf_i+0x28>
 80052f4:	2f62      	cmp	r7, #98	@ 0x62
 80052f6:	d80a      	bhi.n	800530e <_printf_i+0x32>
 80052f8:	2f00      	cmp	r7, #0
 80052fa:	f000 80d2 	beq.w	80054a2 <_printf_i+0x1c6>
 80052fe:	2f58      	cmp	r7, #88	@ 0x58
 8005300:	f000 80b9 	beq.w	8005476 <_printf_i+0x19a>
 8005304:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005308:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800530c:	e03a      	b.n	8005384 <_printf_i+0xa8>
 800530e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005312:	2b15      	cmp	r3, #21
 8005314:	d8f6      	bhi.n	8005304 <_printf_i+0x28>
 8005316:	a101      	add	r1, pc, #4	@ (adr r1, 800531c <_printf_i+0x40>)
 8005318:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800531c:	08005375 	.word	0x08005375
 8005320:	08005389 	.word	0x08005389
 8005324:	08005305 	.word	0x08005305
 8005328:	08005305 	.word	0x08005305
 800532c:	08005305 	.word	0x08005305
 8005330:	08005305 	.word	0x08005305
 8005334:	08005389 	.word	0x08005389
 8005338:	08005305 	.word	0x08005305
 800533c:	08005305 	.word	0x08005305
 8005340:	08005305 	.word	0x08005305
 8005344:	08005305 	.word	0x08005305
 8005348:	08005489 	.word	0x08005489
 800534c:	080053b3 	.word	0x080053b3
 8005350:	08005443 	.word	0x08005443
 8005354:	08005305 	.word	0x08005305
 8005358:	08005305 	.word	0x08005305
 800535c:	080054ab 	.word	0x080054ab
 8005360:	08005305 	.word	0x08005305
 8005364:	080053b3 	.word	0x080053b3
 8005368:	08005305 	.word	0x08005305
 800536c:	08005305 	.word	0x08005305
 8005370:	0800544b 	.word	0x0800544b
 8005374:	6833      	ldr	r3, [r6, #0]
 8005376:	1d1a      	adds	r2, r3, #4
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6032      	str	r2, [r6, #0]
 800537c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005380:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005384:	2301      	movs	r3, #1
 8005386:	e09d      	b.n	80054c4 <_printf_i+0x1e8>
 8005388:	6833      	ldr	r3, [r6, #0]
 800538a:	6820      	ldr	r0, [r4, #0]
 800538c:	1d19      	adds	r1, r3, #4
 800538e:	6031      	str	r1, [r6, #0]
 8005390:	0606      	lsls	r6, r0, #24
 8005392:	d501      	bpl.n	8005398 <_printf_i+0xbc>
 8005394:	681d      	ldr	r5, [r3, #0]
 8005396:	e003      	b.n	80053a0 <_printf_i+0xc4>
 8005398:	0645      	lsls	r5, r0, #25
 800539a:	d5fb      	bpl.n	8005394 <_printf_i+0xb8>
 800539c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053a0:	2d00      	cmp	r5, #0
 80053a2:	da03      	bge.n	80053ac <_printf_i+0xd0>
 80053a4:	232d      	movs	r3, #45	@ 0x2d
 80053a6:	426d      	negs	r5, r5
 80053a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053ac:	4859      	ldr	r0, [pc, #356]	@ (8005514 <_printf_i+0x238>)
 80053ae:	230a      	movs	r3, #10
 80053b0:	e011      	b.n	80053d6 <_printf_i+0xfa>
 80053b2:	6821      	ldr	r1, [r4, #0]
 80053b4:	6833      	ldr	r3, [r6, #0]
 80053b6:	0608      	lsls	r0, r1, #24
 80053b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80053bc:	d402      	bmi.n	80053c4 <_printf_i+0xe8>
 80053be:	0649      	lsls	r1, r1, #25
 80053c0:	bf48      	it	mi
 80053c2:	b2ad      	uxthmi	r5, r5
 80053c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80053c6:	4853      	ldr	r0, [pc, #332]	@ (8005514 <_printf_i+0x238>)
 80053c8:	6033      	str	r3, [r6, #0]
 80053ca:	bf14      	ite	ne
 80053cc:	230a      	movne	r3, #10
 80053ce:	2308      	moveq	r3, #8
 80053d0:	2100      	movs	r1, #0
 80053d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80053d6:	6866      	ldr	r6, [r4, #4]
 80053d8:	60a6      	str	r6, [r4, #8]
 80053da:	2e00      	cmp	r6, #0
 80053dc:	bfa2      	ittt	ge
 80053de:	6821      	ldrge	r1, [r4, #0]
 80053e0:	f021 0104 	bicge.w	r1, r1, #4
 80053e4:	6021      	strge	r1, [r4, #0]
 80053e6:	b90d      	cbnz	r5, 80053ec <_printf_i+0x110>
 80053e8:	2e00      	cmp	r6, #0
 80053ea:	d04b      	beq.n	8005484 <_printf_i+0x1a8>
 80053ec:	4616      	mov	r6, r2
 80053ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80053f2:	fb03 5711 	mls	r7, r3, r1, r5
 80053f6:	5dc7      	ldrb	r7, [r0, r7]
 80053f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053fc:	462f      	mov	r7, r5
 80053fe:	42bb      	cmp	r3, r7
 8005400:	460d      	mov	r5, r1
 8005402:	d9f4      	bls.n	80053ee <_printf_i+0x112>
 8005404:	2b08      	cmp	r3, #8
 8005406:	d10b      	bne.n	8005420 <_printf_i+0x144>
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	07df      	lsls	r7, r3, #31
 800540c:	d508      	bpl.n	8005420 <_printf_i+0x144>
 800540e:	6923      	ldr	r3, [r4, #16]
 8005410:	6861      	ldr	r1, [r4, #4]
 8005412:	4299      	cmp	r1, r3
 8005414:	bfde      	ittt	le
 8005416:	2330      	movle	r3, #48	@ 0x30
 8005418:	f806 3c01 	strble.w	r3, [r6, #-1]
 800541c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005420:	1b92      	subs	r2, r2, r6
 8005422:	6122      	str	r2, [r4, #16]
 8005424:	f8cd a000 	str.w	sl, [sp]
 8005428:	464b      	mov	r3, r9
 800542a:	aa03      	add	r2, sp, #12
 800542c:	4621      	mov	r1, r4
 800542e:	4640      	mov	r0, r8
 8005430:	f7ff fee6 	bl	8005200 <_printf_common>
 8005434:	3001      	adds	r0, #1
 8005436:	d14a      	bne.n	80054ce <_printf_i+0x1f2>
 8005438:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800543c:	b004      	add	sp, #16
 800543e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005442:	6823      	ldr	r3, [r4, #0]
 8005444:	f043 0320 	orr.w	r3, r3, #32
 8005448:	6023      	str	r3, [r4, #0]
 800544a:	4833      	ldr	r0, [pc, #204]	@ (8005518 <_printf_i+0x23c>)
 800544c:	2778      	movs	r7, #120	@ 0x78
 800544e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	6831      	ldr	r1, [r6, #0]
 8005456:	061f      	lsls	r7, r3, #24
 8005458:	f851 5b04 	ldr.w	r5, [r1], #4
 800545c:	d402      	bmi.n	8005464 <_printf_i+0x188>
 800545e:	065f      	lsls	r7, r3, #25
 8005460:	bf48      	it	mi
 8005462:	b2ad      	uxthmi	r5, r5
 8005464:	6031      	str	r1, [r6, #0]
 8005466:	07d9      	lsls	r1, r3, #31
 8005468:	bf44      	itt	mi
 800546a:	f043 0320 	orrmi.w	r3, r3, #32
 800546e:	6023      	strmi	r3, [r4, #0]
 8005470:	b11d      	cbz	r5, 800547a <_printf_i+0x19e>
 8005472:	2310      	movs	r3, #16
 8005474:	e7ac      	b.n	80053d0 <_printf_i+0xf4>
 8005476:	4827      	ldr	r0, [pc, #156]	@ (8005514 <_printf_i+0x238>)
 8005478:	e7e9      	b.n	800544e <_printf_i+0x172>
 800547a:	6823      	ldr	r3, [r4, #0]
 800547c:	f023 0320 	bic.w	r3, r3, #32
 8005480:	6023      	str	r3, [r4, #0]
 8005482:	e7f6      	b.n	8005472 <_printf_i+0x196>
 8005484:	4616      	mov	r6, r2
 8005486:	e7bd      	b.n	8005404 <_printf_i+0x128>
 8005488:	6833      	ldr	r3, [r6, #0]
 800548a:	6825      	ldr	r5, [r4, #0]
 800548c:	6961      	ldr	r1, [r4, #20]
 800548e:	1d18      	adds	r0, r3, #4
 8005490:	6030      	str	r0, [r6, #0]
 8005492:	062e      	lsls	r6, r5, #24
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	d501      	bpl.n	800549c <_printf_i+0x1c0>
 8005498:	6019      	str	r1, [r3, #0]
 800549a:	e002      	b.n	80054a2 <_printf_i+0x1c6>
 800549c:	0668      	lsls	r0, r5, #25
 800549e:	d5fb      	bpl.n	8005498 <_printf_i+0x1bc>
 80054a0:	8019      	strh	r1, [r3, #0]
 80054a2:	2300      	movs	r3, #0
 80054a4:	6123      	str	r3, [r4, #16]
 80054a6:	4616      	mov	r6, r2
 80054a8:	e7bc      	b.n	8005424 <_printf_i+0x148>
 80054aa:	6833      	ldr	r3, [r6, #0]
 80054ac:	1d1a      	adds	r2, r3, #4
 80054ae:	6032      	str	r2, [r6, #0]
 80054b0:	681e      	ldr	r6, [r3, #0]
 80054b2:	6862      	ldr	r2, [r4, #4]
 80054b4:	2100      	movs	r1, #0
 80054b6:	4630      	mov	r0, r6
 80054b8:	f7fa fee2 	bl	8000280 <memchr>
 80054bc:	b108      	cbz	r0, 80054c2 <_printf_i+0x1e6>
 80054be:	1b80      	subs	r0, r0, r6
 80054c0:	6060      	str	r0, [r4, #4]
 80054c2:	6863      	ldr	r3, [r4, #4]
 80054c4:	6123      	str	r3, [r4, #16]
 80054c6:	2300      	movs	r3, #0
 80054c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054cc:	e7aa      	b.n	8005424 <_printf_i+0x148>
 80054ce:	6923      	ldr	r3, [r4, #16]
 80054d0:	4632      	mov	r2, r6
 80054d2:	4649      	mov	r1, r9
 80054d4:	4640      	mov	r0, r8
 80054d6:	47d0      	blx	sl
 80054d8:	3001      	adds	r0, #1
 80054da:	d0ad      	beq.n	8005438 <_printf_i+0x15c>
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	079b      	lsls	r3, r3, #30
 80054e0:	d413      	bmi.n	800550a <_printf_i+0x22e>
 80054e2:	68e0      	ldr	r0, [r4, #12]
 80054e4:	9b03      	ldr	r3, [sp, #12]
 80054e6:	4298      	cmp	r0, r3
 80054e8:	bfb8      	it	lt
 80054ea:	4618      	movlt	r0, r3
 80054ec:	e7a6      	b.n	800543c <_printf_i+0x160>
 80054ee:	2301      	movs	r3, #1
 80054f0:	4632      	mov	r2, r6
 80054f2:	4649      	mov	r1, r9
 80054f4:	4640      	mov	r0, r8
 80054f6:	47d0      	blx	sl
 80054f8:	3001      	adds	r0, #1
 80054fa:	d09d      	beq.n	8005438 <_printf_i+0x15c>
 80054fc:	3501      	adds	r5, #1
 80054fe:	68e3      	ldr	r3, [r4, #12]
 8005500:	9903      	ldr	r1, [sp, #12]
 8005502:	1a5b      	subs	r3, r3, r1
 8005504:	42ab      	cmp	r3, r5
 8005506:	dcf2      	bgt.n	80054ee <_printf_i+0x212>
 8005508:	e7eb      	b.n	80054e2 <_printf_i+0x206>
 800550a:	2500      	movs	r5, #0
 800550c:	f104 0619 	add.w	r6, r4, #25
 8005510:	e7f5      	b.n	80054fe <_printf_i+0x222>
 8005512:	bf00      	nop
 8005514:	08005a3f 	.word	0x08005a3f
 8005518:	08005a50 	.word	0x08005a50

0800551c <__sflush_r>:
 800551c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005524:	0716      	lsls	r6, r2, #28
 8005526:	4605      	mov	r5, r0
 8005528:	460c      	mov	r4, r1
 800552a:	d454      	bmi.n	80055d6 <__sflush_r+0xba>
 800552c:	684b      	ldr	r3, [r1, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	dc02      	bgt.n	8005538 <__sflush_r+0x1c>
 8005532:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005534:	2b00      	cmp	r3, #0
 8005536:	dd48      	ble.n	80055ca <__sflush_r+0xae>
 8005538:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800553a:	2e00      	cmp	r6, #0
 800553c:	d045      	beq.n	80055ca <__sflush_r+0xae>
 800553e:	2300      	movs	r3, #0
 8005540:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005544:	682f      	ldr	r7, [r5, #0]
 8005546:	6a21      	ldr	r1, [r4, #32]
 8005548:	602b      	str	r3, [r5, #0]
 800554a:	d030      	beq.n	80055ae <__sflush_r+0x92>
 800554c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800554e:	89a3      	ldrh	r3, [r4, #12]
 8005550:	0759      	lsls	r1, r3, #29
 8005552:	d505      	bpl.n	8005560 <__sflush_r+0x44>
 8005554:	6863      	ldr	r3, [r4, #4]
 8005556:	1ad2      	subs	r2, r2, r3
 8005558:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800555a:	b10b      	cbz	r3, 8005560 <__sflush_r+0x44>
 800555c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800555e:	1ad2      	subs	r2, r2, r3
 8005560:	2300      	movs	r3, #0
 8005562:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005564:	6a21      	ldr	r1, [r4, #32]
 8005566:	4628      	mov	r0, r5
 8005568:	47b0      	blx	r6
 800556a:	1c43      	adds	r3, r0, #1
 800556c:	89a3      	ldrh	r3, [r4, #12]
 800556e:	d106      	bne.n	800557e <__sflush_r+0x62>
 8005570:	6829      	ldr	r1, [r5, #0]
 8005572:	291d      	cmp	r1, #29
 8005574:	d82b      	bhi.n	80055ce <__sflush_r+0xb2>
 8005576:	4a2a      	ldr	r2, [pc, #168]	@ (8005620 <__sflush_r+0x104>)
 8005578:	410a      	asrs	r2, r1
 800557a:	07d6      	lsls	r6, r2, #31
 800557c:	d427      	bmi.n	80055ce <__sflush_r+0xb2>
 800557e:	2200      	movs	r2, #0
 8005580:	6062      	str	r2, [r4, #4]
 8005582:	04d9      	lsls	r1, r3, #19
 8005584:	6922      	ldr	r2, [r4, #16]
 8005586:	6022      	str	r2, [r4, #0]
 8005588:	d504      	bpl.n	8005594 <__sflush_r+0x78>
 800558a:	1c42      	adds	r2, r0, #1
 800558c:	d101      	bne.n	8005592 <__sflush_r+0x76>
 800558e:	682b      	ldr	r3, [r5, #0]
 8005590:	b903      	cbnz	r3, 8005594 <__sflush_r+0x78>
 8005592:	6560      	str	r0, [r4, #84]	@ 0x54
 8005594:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005596:	602f      	str	r7, [r5, #0]
 8005598:	b1b9      	cbz	r1, 80055ca <__sflush_r+0xae>
 800559a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800559e:	4299      	cmp	r1, r3
 80055a0:	d002      	beq.n	80055a8 <__sflush_r+0x8c>
 80055a2:	4628      	mov	r0, r5
 80055a4:	f7ff fbf2 	bl	8004d8c <_free_r>
 80055a8:	2300      	movs	r3, #0
 80055aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80055ac:	e00d      	b.n	80055ca <__sflush_r+0xae>
 80055ae:	2301      	movs	r3, #1
 80055b0:	4628      	mov	r0, r5
 80055b2:	47b0      	blx	r6
 80055b4:	4602      	mov	r2, r0
 80055b6:	1c50      	adds	r0, r2, #1
 80055b8:	d1c9      	bne.n	800554e <__sflush_r+0x32>
 80055ba:	682b      	ldr	r3, [r5, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0c6      	beq.n	800554e <__sflush_r+0x32>
 80055c0:	2b1d      	cmp	r3, #29
 80055c2:	d001      	beq.n	80055c8 <__sflush_r+0xac>
 80055c4:	2b16      	cmp	r3, #22
 80055c6:	d11e      	bne.n	8005606 <__sflush_r+0xea>
 80055c8:	602f      	str	r7, [r5, #0]
 80055ca:	2000      	movs	r0, #0
 80055cc:	e022      	b.n	8005614 <__sflush_r+0xf8>
 80055ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055d2:	b21b      	sxth	r3, r3
 80055d4:	e01b      	b.n	800560e <__sflush_r+0xf2>
 80055d6:	690f      	ldr	r7, [r1, #16]
 80055d8:	2f00      	cmp	r7, #0
 80055da:	d0f6      	beq.n	80055ca <__sflush_r+0xae>
 80055dc:	0793      	lsls	r3, r2, #30
 80055de:	680e      	ldr	r6, [r1, #0]
 80055e0:	bf08      	it	eq
 80055e2:	694b      	ldreq	r3, [r1, #20]
 80055e4:	600f      	str	r7, [r1, #0]
 80055e6:	bf18      	it	ne
 80055e8:	2300      	movne	r3, #0
 80055ea:	eba6 0807 	sub.w	r8, r6, r7
 80055ee:	608b      	str	r3, [r1, #8]
 80055f0:	f1b8 0f00 	cmp.w	r8, #0
 80055f4:	dde9      	ble.n	80055ca <__sflush_r+0xae>
 80055f6:	6a21      	ldr	r1, [r4, #32]
 80055f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80055fa:	4643      	mov	r3, r8
 80055fc:	463a      	mov	r2, r7
 80055fe:	4628      	mov	r0, r5
 8005600:	47b0      	blx	r6
 8005602:	2800      	cmp	r0, #0
 8005604:	dc08      	bgt.n	8005618 <__sflush_r+0xfc>
 8005606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800560a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800560e:	81a3      	strh	r3, [r4, #12]
 8005610:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005618:	4407      	add	r7, r0
 800561a:	eba8 0800 	sub.w	r8, r8, r0
 800561e:	e7e7      	b.n	80055f0 <__sflush_r+0xd4>
 8005620:	dfbffffe 	.word	0xdfbffffe

08005624 <_fflush_r>:
 8005624:	b538      	push	{r3, r4, r5, lr}
 8005626:	690b      	ldr	r3, [r1, #16]
 8005628:	4605      	mov	r5, r0
 800562a:	460c      	mov	r4, r1
 800562c:	b913      	cbnz	r3, 8005634 <_fflush_r+0x10>
 800562e:	2500      	movs	r5, #0
 8005630:	4628      	mov	r0, r5
 8005632:	bd38      	pop	{r3, r4, r5, pc}
 8005634:	b118      	cbz	r0, 800563e <_fflush_r+0x1a>
 8005636:	6a03      	ldr	r3, [r0, #32]
 8005638:	b90b      	cbnz	r3, 800563e <_fflush_r+0x1a>
 800563a:	f7ff fa99 	bl	8004b70 <__sinit>
 800563e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d0f3      	beq.n	800562e <_fflush_r+0xa>
 8005646:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005648:	07d0      	lsls	r0, r2, #31
 800564a:	d404      	bmi.n	8005656 <_fflush_r+0x32>
 800564c:	0599      	lsls	r1, r3, #22
 800564e:	d402      	bmi.n	8005656 <_fflush_r+0x32>
 8005650:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005652:	f7ff fb8a 	bl	8004d6a <__retarget_lock_acquire_recursive>
 8005656:	4628      	mov	r0, r5
 8005658:	4621      	mov	r1, r4
 800565a:	f7ff ff5f 	bl	800551c <__sflush_r>
 800565e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005660:	07da      	lsls	r2, r3, #31
 8005662:	4605      	mov	r5, r0
 8005664:	d4e4      	bmi.n	8005630 <_fflush_r+0xc>
 8005666:	89a3      	ldrh	r3, [r4, #12]
 8005668:	059b      	lsls	r3, r3, #22
 800566a:	d4e1      	bmi.n	8005630 <_fflush_r+0xc>
 800566c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800566e:	f7ff fb7d 	bl	8004d6c <__retarget_lock_release_recursive>
 8005672:	e7dd      	b.n	8005630 <_fflush_r+0xc>

08005674 <__swbuf_r>:
 8005674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005676:	460e      	mov	r6, r1
 8005678:	4614      	mov	r4, r2
 800567a:	4605      	mov	r5, r0
 800567c:	b118      	cbz	r0, 8005686 <__swbuf_r+0x12>
 800567e:	6a03      	ldr	r3, [r0, #32]
 8005680:	b90b      	cbnz	r3, 8005686 <__swbuf_r+0x12>
 8005682:	f7ff fa75 	bl	8004b70 <__sinit>
 8005686:	69a3      	ldr	r3, [r4, #24]
 8005688:	60a3      	str	r3, [r4, #8]
 800568a:	89a3      	ldrh	r3, [r4, #12]
 800568c:	071a      	lsls	r2, r3, #28
 800568e:	d501      	bpl.n	8005694 <__swbuf_r+0x20>
 8005690:	6923      	ldr	r3, [r4, #16]
 8005692:	b943      	cbnz	r3, 80056a6 <__swbuf_r+0x32>
 8005694:	4621      	mov	r1, r4
 8005696:	4628      	mov	r0, r5
 8005698:	f000 f82a 	bl	80056f0 <__swsetup_r>
 800569c:	b118      	cbz	r0, 80056a6 <__swbuf_r+0x32>
 800569e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80056a2:	4638      	mov	r0, r7
 80056a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056a6:	6823      	ldr	r3, [r4, #0]
 80056a8:	6922      	ldr	r2, [r4, #16]
 80056aa:	1a98      	subs	r0, r3, r2
 80056ac:	6963      	ldr	r3, [r4, #20]
 80056ae:	b2f6      	uxtb	r6, r6
 80056b0:	4283      	cmp	r3, r0
 80056b2:	4637      	mov	r7, r6
 80056b4:	dc05      	bgt.n	80056c2 <__swbuf_r+0x4e>
 80056b6:	4621      	mov	r1, r4
 80056b8:	4628      	mov	r0, r5
 80056ba:	f7ff ffb3 	bl	8005624 <_fflush_r>
 80056be:	2800      	cmp	r0, #0
 80056c0:	d1ed      	bne.n	800569e <__swbuf_r+0x2a>
 80056c2:	68a3      	ldr	r3, [r4, #8]
 80056c4:	3b01      	subs	r3, #1
 80056c6:	60a3      	str	r3, [r4, #8]
 80056c8:	6823      	ldr	r3, [r4, #0]
 80056ca:	1c5a      	adds	r2, r3, #1
 80056cc:	6022      	str	r2, [r4, #0]
 80056ce:	701e      	strb	r6, [r3, #0]
 80056d0:	6962      	ldr	r2, [r4, #20]
 80056d2:	1c43      	adds	r3, r0, #1
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d004      	beq.n	80056e2 <__swbuf_r+0x6e>
 80056d8:	89a3      	ldrh	r3, [r4, #12]
 80056da:	07db      	lsls	r3, r3, #31
 80056dc:	d5e1      	bpl.n	80056a2 <__swbuf_r+0x2e>
 80056de:	2e0a      	cmp	r6, #10
 80056e0:	d1df      	bne.n	80056a2 <__swbuf_r+0x2e>
 80056e2:	4621      	mov	r1, r4
 80056e4:	4628      	mov	r0, r5
 80056e6:	f7ff ff9d 	bl	8005624 <_fflush_r>
 80056ea:	2800      	cmp	r0, #0
 80056ec:	d0d9      	beq.n	80056a2 <__swbuf_r+0x2e>
 80056ee:	e7d6      	b.n	800569e <__swbuf_r+0x2a>

080056f0 <__swsetup_r>:
 80056f0:	b538      	push	{r3, r4, r5, lr}
 80056f2:	4b29      	ldr	r3, [pc, #164]	@ (8005798 <__swsetup_r+0xa8>)
 80056f4:	4605      	mov	r5, r0
 80056f6:	6818      	ldr	r0, [r3, #0]
 80056f8:	460c      	mov	r4, r1
 80056fa:	b118      	cbz	r0, 8005704 <__swsetup_r+0x14>
 80056fc:	6a03      	ldr	r3, [r0, #32]
 80056fe:	b90b      	cbnz	r3, 8005704 <__swsetup_r+0x14>
 8005700:	f7ff fa36 	bl	8004b70 <__sinit>
 8005704:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005708:	0719      	lsls	r1, r3, #28
 800570a:	d422      	bmi.n	8005752 <__swsetup_r+0x62>
 800570c:	06da      	lsls	r2, r3, #27
 800570e:	d407      	bmi.n	8005720 <__swsetup_r+0x30>
 8005710:	2209      	movs	r2, #9
 8005712:	602a      	str	r2, [r5, #0]
 8005714:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005718:	81a3      	strh	r3, [r4, #12]
 800571a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800571e:	e033      	b.n	8005788 <__swsetup_r+0x98>
 8005720:	0758      	lsls	r0, r3, #29
 8005722:	d512      	bpl.n	800574a <__swsetup_r+0x5a>
 8005724:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005726:	b141      	cbz	r1, 800573a <__swsetup_r+0x4a>
 8005728:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800572c:	4299      	cmp	r1, r3
 800572e:	d002      	beq.n	8005736 <__swsetup_r+0x46>
 8005730:	4628      	mov	r0, r5
 8005732:	f7ff fb2b 	bl	8004d8c <_free_r>
 8005736:	2300      	movs	r3, #0
 8005738:	6363      	str	r3, [r4, #52]	@ 0x34
 800573a:	89a3      	ldrh	r3, [r4, #12]
 800573c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005740:	81a3      	strh	r3, [r4, #12]
 8005742:	2300      	movs	r3, #0
 8005744:	6063      	str	r3, [r4, #4]
 8005746:	6923      	ldr	r3, [r4, #16]
 8005748:	6023      	str	r3, [r4, #0]
 800574a:	89a3      	ldrh	r3, [r4, #12]
 800574c:	f043 0308 	orr.w	r3, r3, #8
 8005750:	81a3      	strh	r3, [r4, #12]
 8005752:	6923      	ldr	r3, [r4, #16]
 8005754:	b94b      	cbnz	r3, 800576a <__swsetup_r+0x7a>
 8005756:	89a3      	ldrh	r3, [r4, #12]
 8005758:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800575c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005760:	d003      	beq.n	800576a <__swsetup_r+0x7a>
 8005762:	4621      	mov	r1, r4
 8005764:	4628      	mov	r0, r5
 8005766:	f000 f84f 	bl	8005808 <__smakebuf_r>
 800576a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800576e:	f013 0201 	ands.w	r2, r3, #1
 8005772:	d00a      	beq.n	800578a <__swsetup_r+0x9a>
 8005774:	2200      	movs	r2, #0
 8005776:	60a2      	str	r2, [r4, #8]
 8005778:	6962      	ldr	r2, [r4, #20]
 800577a:	4252      	negs	r2, r2
 800577c:	61a2      	str	r2, [r4, #24]
 800577e:	6922      	ldr	r2, [r4, #16]
 8005780:	b942      	cbnz	r2, 8005794 <__swsetup_r+0xa4>
 8005782:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005786:	d1c5      	bne.n	8005714 <__swsetup_r+0x24>
 8005788:	bd38      	pop	{r3, r4, r5, pc}
 800578a:	0799      	lsls	r1, r3, #30
 800578c:	bf58      	it	pl
 800578e:	6962      	ldrpl	r2, [r4, #20]
 8005790:	60a2      	str	r2, [r4, #8]
 8005792:	e7f4      	b.n	800577e <__swsetup_r+0x8e>
 8005794:	2000      	movs	r0, #0
 8005796:	e7f7      	b.n	8005788 <__swsetup_r+0x98>
 8005798:	20000020 	.word	0x20000020

0800579c <_sbrk_r>:
 800579c:	b538      	push	{r3, r4, r5, lr}
 800579e:	4d06      	ldr	r5, [pc, #24]	@ (80057b8 <_sbrk_r+0x1c>)
 80057a0:	2300      	movs	r3, #0
 80057a2:	4604      	mov	r4, r0
 80057a4:	4608      	mov	r0, r1
 80057a6:	602b      	str	r3, [r5, #0]
 80057a8:	f000 f88c 	bl	80058c4 <_sbrk>
 80057ac:	1c43      	adds	r3, r0, #1
 80057ae:	d102      	bne.n	80057b6 <_sbrk_r+0x1a>
 80057b0:	682b      	ldr	r3, [r5, #0]
 80057b2:	b103      	cbz	r3, 80057b6 <_sbrk_r+0x1a>
 80057b4:	6023      	str	r3, [r4, #0]
 80057b6:	bd38      	pop	{r3, r4, r5, pc}
 80057b8:	200099bc 	.word	0x200099bc

080057bc <__swhatbuf_r>:
 80057bc:	b570      	push	{r4, r5, r6, lr}
 80057be:	460c      	mov	r4, r1
 80057c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057c4:	2900      	cmp	r1, #0
 80057c6:	b096      	sub	sp, #88	@ 0x58
 80057c8:	4615      	mov	r5, r2
 80057ca:	461e      	mov	r6, r3
 80057cc:	da0d      	bge.n	80057ea <__swhatbuf_r+0x2e>
 80057ce:	89a3      	ldrh	r3, [r4, #12]
 80057d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80057d4:	f04f 0100 	mov.w	r1, #0
 80057d8:	bf14      	ite	ne
 80057da:	2340      	movne	r3, #64	@ 0x40
 80057dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80057e0:	2000      	movs	r0, #0
 80057e2:	6031      	str	r1, [r6, #0]
 80057e4:	602b      	str	r3, [r5, #0]
 80057e6:	b016      	add	sp, #88	@ 0x58
 80057e8:	bd70      	pop	{r4, r5, r6, pc}
 80057ea:	466a      	mov	r2, sp
 80057ec:	f000 f848 	bl	8005880 <_fstat_r>
 80057f0:	2800      	cmp	r0, #0
 80057f2:	dbec      	blt.n	80057ce <__swhatbuf_r+0x12>
 80057f4:	9901      	ldr	r1, [sp, #4]
 80057f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80057fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80057fe:	4259      	negs	r1, r3
 8005800:	4159      	adcs	r1, r3
 8005802:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005806:	e7eb      	b.n	80057e0 <__swhatbuf_r+0x24>

08005808 <__smakebuf_r>:
 8005808:	898b      	ldrh	r3, [r1, #12]
 800580a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800580c:	079d      	lsls	r5, r3, #30
 800580e:	4606      	mov	r6, r0
 8005810:	460c      	mov	r4, r1
 8005812:	d507      	bpl.n	8005824 <__smakebuf_r+0x1c>
 8005814:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005818:	6023      	str	r3, [r4, #0]
 800581a:	6123      	str	r3, [r4, #16]
 800581c:	2301      	movs	r3, #1
 800581e:	6163      	str	r3, [r4, #20]
 8005820:	b003      	add	sp, #12
 8005822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005824:	ab01      	add	r3, sp, #4
 8005826:	466a      	mov	r2, sp
 8005828:	f7ff ffc8 	bl	80057bc <__swhatbuf_r>
 800582c:	9f00      	ldr	r7, [sp, #0]
 800582e:	4605      	mov	r5, r0
 8005830:	4639      	mov	r1, r7
 8005832:	4630      	mov	r0, r6
 8005834:	f7ff fb16 	bl	8004e64 <_malloc_r>
 8005838:	b948      	cbnz	r0, 800584e <__smakebuf_r+0x46>
 800583a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800583e:	059a      	lsls	r2, r3, #22
 8005840:	d4ee      	bmi.n	8005820 <__smakebuf_r+0x18>
 8005842:	f023 0303 	bic.w	r3, r3, #3
 8005846:	f043 0302 	orr.w	r3, r3, #2
 800584a:	81a3      	strh	r3, [r4, #12]
 800584c:	e7e2      	b.n	8005814 <__smakebuf_r+0xc>
 800584e:	89a3      	ldrh	r3, [r4, #12]
 8005850:	6020      	str	r0, [r4, #0]
 8005852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005856:	81a3      	strh	r3, [r4, #12]
 8005858:	9b01      	ldr	r3, [sp, #4]
 800585a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800585e:	b15b      	cbz	r3, 8005878 <__smakebuf_r+0x70>
 8005860:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005864:	4630      	mov	r0, r6
 8005866:	f000 f81d 	bl	80058a4 <_isatty_r>
 800586a:	b128      	cbz	r0, 8005878 <__smakebuf_r+0x70>
 800586c:	89a3      	ldrh	r3, [r4, #12]
 800586e:	f023 0303 	bic.w	r3, r3, #3
 8005872:	f043 0301 	orr.w	r3, r3, #1
 8005876:	81a3      	strh	r3, [r4, #12]
 8005878:	89a3      	ldrh	r3, [r4, #12]
 800587a:	431d      	orrs	r5, r3
 800587c:	81a5      	strh	r5, [r4, #12]
 800587e:	e7cf      	b.n	8005820 <__smakebuf_r+0x18>

08005880 <_fstat_r>:
 8005880:	b538      	push	{r3, r4, r5, lr}
 8005882:	4d07      	ldr	r5, [pc, #28]	@ (80058a0 <_fstat_r+0x20>)
 8005884:	2300      	movs	r3, #0
 8005886:	4604      	mov	r4, r0
 8005888:	4608      	mov	r0, r1
 800588a:	4611      	mov	r1, r2
 800588c:	602b      	str	r3, [r5, #0]
 800588e:	f7fb f8da 	bl	8000a46 <_fstat>
 8005892:	1c43      	adds	r3, r0, #1
 8005894:	d102      	bne.n	800589c <_fstat_r+0x1c>
 8005896:	682b      	ldr	r3, [r5, #0]
 8005898:	b103      	cbz	r3, 800589c <_fstat_r+0x1c>
 800589a:	6023      	str	r3, [r4, #0]
 800589c:	bd38      	pop	{r3, r4, r5, pc}
 800589e:	bf00      	nop
 80058a0:	200099bc 	.word	0x200099bc

080058a4 <_isatty_r>:
 80058a4:	b538      	push	{r3, r4, r5, lr}
 80058a6:	4d06      	ldr	r5, [pc, #24]	@ (80058c0 <_isatty_r+0x1c>)
 80058a8:	2300      	movs	r3, #0
 80058aa:	4604      	mov	r4, r0
 80058ac:	4608      	mov	r0, r1
 80058ae:	602b      	str	r3, [r5, #0]
 80058b0:	f7fb f8d9 	bl	8000a66 <_isatty>
 80058b4:	1c43      	adds	r3, r0, #1
 80058b6:	d102      	bne.n	80058be <_isatty_r+0x1a>
 80058b8:	682b      	ldr	r3, [r5, #0]
 80058ba:	b103      	cbz	r3, 80058be <_isatty_r+0x1a>
 80058bc:	6023      	str	r3, [r4, #0]
 80058be:	bd38      	pop	{r3, r4, r5, pc}
 80058c0:	200099bc 	.word	0x200099bc

080058c4 <_sbrk>:
 80058c4:	4a04      	ldr	r2, [pc, #16]	@ (80058d8 <_sbrk+0x14>)
 80058c6:	6811      	ldr	r1, [r2, #0]
 80058c8:	4603      	mov	r3, r0
 80058ca:	b909      	cbnz	r1, 80058d0 <_sbrk+0xc>
 80058cc:	4903      	ldr	r1, [pc, #12]	@ (80058dc <_sbrk+0x18>)
 80058ce:	6011      	str	r1, [r2, #0]
 80058d0:	6810      	ldr	r0, [r2, #0]
 80058d2:	4403      	add	r3, r0
 80058d4:	6013      	str	r3, [r2, #0]
 80058d6:	4770      	bx	lr
 80058d8:	200099cc 	.word	0x200099cc
 80058dc:	200099d0 	.word	0x200099d0

080058e0 <_init>:
 80058e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e2:	bf00      	nop
 80058e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058e6:	bc08      	pop	{r3}
 80058e8:	469e      	mov	lr, r3
 80058ea:	4770      	bx	lr

080058ec <_fini>:
 80058ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ee:	bf00      	nop
 80058f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058f2:	bc08      	pop	{r3}
 80058f4:	469e      	mov	lr, r3
 80058f6:	4770      	bx	lr
