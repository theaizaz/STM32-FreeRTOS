
Getting-Started.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004eb8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005058  08005058  00006058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050e8  080050e8  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  080050e8  080050e8  000060e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050f0  080050f0  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050f0  080050f0  000060f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050f4  080050f4  000060f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080050f8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004360  20000070  08005168  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200043d0  08005168  000073d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ddb1  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000267e  00000000  00000000  00014e51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  000174d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b74  00000000  00000000  000183b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e13  00000000  00000000  00018f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f979  00000000  00000000  00030d3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094fc9  00000000  00000000  000406b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d5681  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004550  00000000  00000000  000d56c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000d9c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005040 	.word	0x08005040

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005040 	.word	0x08005040

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fa95 	bl	8000aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f843 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f89f 	bl	80006c0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //API
  //xTaskCreate(pxTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask);

  status = xTaskCreate(hello1Func,"Hello 1",200,NULL,0,&Hello1_handler);
 8000582:	f107 0308 	add.w	r3, r7, #8
 8000586:	9301      	str	r3, [sp, #4]
 8000588:	2300      	movs	r3, #0
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	2300      	movs	r3, #0
 800058e:	22c8      	movs	r2, #200	@ 0xc8
 8000590:	4918      	ldr	r1, [pc, #96]	@ (80005f4 <main+0x84>)
 8000592:	4819      	ldr	r0, [pc, #100]	@ (80005f8 <main+0x88>)
 8000594:	f002 f838 	bl	8002608 <xTaskCreate>
 8000598:	6178      	str	r0, [r7, #20]
//
  configASSERT(status == pdPASS); /* check if task is created successfully */
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d00b      	beq.n	80005b8 <main+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005a4:	f383 8811 	msr	BASEPRI, r3
 80005a8:	f3bf 8f6f 	isb	sy
 80005ac:	f3bf 8f4f 	dsb	sy
 80005b0:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b2:	bf00      	nop
 80005b4:	bf00      	nop
 80005b6:	e7fd      	b.n	80005b4 <main+0x44>
//
  status = xTaskCreate(hello2Func,"Hello 2",200,NULL,0,&Hello2_handler);
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	2300      	movs	r3, #0
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2300      	movs	r3, #0
 80005c2:	22c8      	movs	r2, #200	@ 0xc8
 80005c4:	490d      	ldr	r1, [pc, #52]	@ (80005fc <main+0x8c>)
 80005c6:	480e      	ldr	r0, [pc, #56]	@ (8000600 <main+0x90>)
 80005c8:	f002 f81e 	bl	8002608 <xTaskCreate>
 80005cc:	6178      	str	r0, [r7, #20]
//
  configASSERT(status == pdPASS);
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d00b      	beq.n	80005ec <main+0x7c>
        __asm volatile
 80005d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005d8:	f383 8811 	msr	BASEPRI, r3
 80005dc:	f3bf 8f6f 	isb	sy
 80005e0:	f3bf 8f4f 	dsb	sy
 80005e4:	60fb      	str	r3, [r7, #12]
    }
 80005e6:	bf00      	nop
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <main+0x78>

  vTaskStartScheduler();
 80005ec:	f002 f952 	bl	8002894 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <main+0x80>
 80005f4:	08005058 	.word	0x08005058
 80005f8:	08000711 	.word	0x08000711
 80005fc:	08005060 	.word	0x08005060
 8000600:	08000731 	.word	0x08000731

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	@ 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	@ 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f003 fee5 	bl	80043e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	4b22      	ldr	r3, [pc, #136]	@ (80006b8 <SystemClock_Config+0xb4>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000630:	4a21      	ldr	r2, [pc, #132]	@ (80006b8 <SystemClock_Config+0xb4>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	@ 0x40
 8000638:	4b1f      	ldr	r3, [pc, #124]	@ (80006b8 <SystemClock_Config+0xb4>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b1c      	ldr	r3, [pc, #112]	@ (80006bc <SystemClock_Config+0xb8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000650:	4a1a      	ldr	r2, [pc, #104]	@ (80006bc <SystemClock_Config+0xb8>)
 8000652:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b18      	ldr	r3, [pc, #96]	@ (80006bc <SystemClock_Config+0xb8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000664:	2301      	movs	r3, #1
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000668:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800066c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800066e:	2300      	movs	r3, #0
 8000670:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	4618      	mov	r0, r3
 8000678:	f000 fb38 	bl	8000cec <HAL_RCC_OscConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000682:	f000 f877 	bl	8000774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000686:	230f      	movs	r3, #15
 8000688:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800068a:	2301      	movs	r3, #1
 800068c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 fd9b 	bl	80011dc <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80006ac:	f000 f862 	bl	8000774 <Error_Handler>
  }
}
 80006b0:	bf00      	nop
 80006b2:	3750      	adds	r7, #80	@ 0x50
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	4b10      	ldr	r3, [pc, #64]	@ (800070c <MX_GPIO_Init+0x4c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	4a0f      	ldr	r2, [pc, #60]	@ (800070c <MX_GPIO_Init+0x4c>)
 80006d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d6:	4b0d      	ldr	r3, [pc, #52]	@ (800070c <MX_GPIO_Init+0x4c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	603b      	str	r3, [r7, #0]
 80006e6:	4b09      	ldr	r3, [pc, #36]	@ (800070c <MX_GPIO_Init+0x4c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a08      	ldr	r2, [pc, #32]	@ (800070c <MX_GPIO_Init+0x4c>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b06      	ldr	r3, [pc, #24]	@ (800070c <MX_GPIO_Init+0x4c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800

08000710 <hello1Func>:

/* USER CODE BEGIN 4 */

static void hello1Func(void *pvParameter){
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	const char* str = "Hello 1\n";
 8000718:	4b03      	ldr	r3, [pc, #12]	@ (8000728 <hello1Func+0x18>)
 800071a:	60fb      	str	r3, [r7, #12]
	for(;;){
		printf("%s",str);
 800071c:	68f9      	ldr	r1, [r7, #12]
 800071e:	4803      	ldr	r0, [pc, #12]	@ (800072c <hello1Func+0x1c>)
 8000720:	f003 fe0a 	bl	8004338 <iprintf>
 8000724:	e7fa      	b.n	800071c <hello1Func+0xc>
 8000726:	bf00      	nop
 8000728:	08005068 	.word	0x08005068
 800072c:	08005074 	.word	0x08005074

08000730 <hello2Func>:
	}
	vTaskDelete(NULL);
}

static void hello2Func(void *pvParameter){
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	const char* str = "Hello 2\n";
 8000738:	4b03      	ldr	r3, [pc, #12]	@ (8000748 <hello2Func+0x18>)
 800073a:	60fb      	str	r3, [r7, #12]
	for(;;){
		printf("%s",str);
 800073c:	68f9      	ldr	r1, [r7, #12]
 800073e:	4803      	ldr	r0, [pc, #12]	@ (800074c <hello2Func+0x1c>)
 8000740:	f003 fdfa 	bl	8004338 <iprintf>
 8000744:	e7fa      	b.n	800073c <hello2Func+0xc>
 8000746:	bf00      	nop
 8000748:	08005078 	.word	0x08005078
 800074c:	08005074 	.word	0x08005074

08000750 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a04      	ldr	r2, [pc, #16]	@ (8000770 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d101      	bne.n	8000766 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000762:	f000 f9c1 	bl	8000ae8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40014000 	.word	0x40014000

08000774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000778:	b672      	cpsid	i
}
 800077a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <Error_Handler+0x8>

08000780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b10      	ldr	r3, [pc, #64]	@ (80007cc <HAL_MspInit+0x4c>)
 800078c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800078e:	4a0f      	ldr	r2, [pc, #60]	@ (80007cc <HAL_MspInit+0x4c>)
 8000790:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000794:	6453      	str	r3, [r2, #68]	@ 0x44
 8000796:	4b0d      	ldr	r3, [pc, #52]	@ (80007cc <HAL_MspInit+0x4c>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800079a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <HAL_MspInit+0x4c>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007aa:	4a08      	ldr	r2, [pc, #32]	@ (80007cc <HAL_MspInit+0x4c>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b2:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <HAL_MspInit+0x4c>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800

080007d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	@ 0x30
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80007d8:	2300      	movs	r3, #0
 80007da:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80007e0:	2300      	movs	r3, #0
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	4b2e      	ldr	r3, [pc, #184]	@ (80008a0 <HAL_InitTick+0xd0>)
 80007e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007e8:	4a2d      	ldr	r2, [pc, #180]	@ (80008a0 <HAL_InitTick+0xd0>)
 80007ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80007ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80007f0:	4b2b      	ldr	r3, [pc, #172]	@ (80008a0 <HAL_InitTick+0xd0>)
 80007f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007fc:	f107 020c 	add.w	r2, r7, #12
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	4611      	mov	r1, r2
 8000806:	4618      	mov	r0, r3
 8000808:	f000 feb4 	bl	8001574 <HAL_RCC_GetClockConfig>
  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800080c:	f000 fe9e 	bl	800154c <HAL_RCC_GetPCLK2Freq>
 8000810:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000814:	4a23      	ldr	r2, [pc, #140]	@ (80008a4 <HAL_InitTick+0xd4>)
 8000816:	fba2 2303 	umull	r2, r3, r2, r3
 800081a:	0c9b      	lsrs	r3, r3, #18
 800081c:	3b01      	subs	r3, #1
 800081e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8000820:	4b21      	ldr	r3, [pc, #132]	@ (80008a8 <HAL_InitTick+0xd8>)
 8000822:	4a22      	ldr	r2, [pc, #136]	@ (80008ac <HAL_InitTick+0xdc>)
 8000824:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8000826:	4b20      	ldr	r3, [pc, #128]	@ (80008a8 <HAL_InitTick+0xd8>)
 8000828:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800082c:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 800082e:	4a1e      	ldr	r2, [pc, #120]	@ (80008a8 <HAL_InitTick+0xd8>)
 8000830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000832:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8000834:	4b1c      	ldr	r3, [pc, #112]	@ (80008a8 <HAL_InitTick+0xd8>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083a:	4b1b      	ldr	r3, [pc, #108]	@ (80008a8 <HAL_InitTick+0xd8>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000840:	4b19      	ldr	r3, [pc, #100]	@ (80008a8 <HAL_InitTick+0xd8>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8000846:	4818      	ldr	r0, [pc, #96]	@ (80008a8 <HAL_InitTick+0xd8>)
 8000848:	f000 fec6 	bl	80015d8 <HAL_TIM_Base_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000852:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000856:	2b00      	cmp	r3, #0
 8000858:	d11b      	bne.n	8000892 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 800085a:	4813      	ldr	r0, [pc, #76]	@ (80008a8 <HAL_InitTick+0xd8>)
 800085c:	f000 ff16 	bl	800168c <HAL_TIM_Base_Start_IT>
 8000860:	4603      	mov	r3, r0
 8000862:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000866:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800086a:	2b00      	cmp	r3, #0
 800086c:	d111      	bne.n	8000892 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800086e:	2018      	movs	r0, #24
 8000870:	f000 fa2e 	bl	8000cd0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b0f      	cmp	r3, #15
 8000878:	d808      	bhi.n	800088c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 800087a:	2200      	movs	r2, #0
 800087c:	6879      	ldr	r1, [r7, #4]
 800087e:	2018      	movs	r0, #24
 8000880:	f000 fa0a 	bl	8000c98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000884:	4a0a      	ldr	r2, [pc, #40]	@ (80008b0 <HAL_InitTick+0xe0>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6013      	str	r3, [r2, #0]
 800088a:	e002      	b.n	8000892 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800088c:	2301      	movs	r3, #1
 800088e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000892:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000896:	4618      	mov	r0, r3
 8000898:	3730      	adds	r7, #48	@ 0x30
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800
 80008a4:	431bde83 	.word	0x431bde83
 80008a8:	2000008c 	.word	0x2000008c
 80008ac:	40014000 	.word	0x40014000
 80008b0:	20000004 	.word	0x20000004

080008b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <NMI_Handler+0x4>

080008bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <HardFault_Handler+0x4>

080008c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <MemManage_Handler+0x4>

080008cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <BusFault_Handler+0x4>

080008d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <UsageFault_Handler+0x4>

080008dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
	...

080008ec <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80008f0:	4802      	ldr	r0, [pc, #8]	@ (80008fc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80008f2:	f000 ff2d 	bl	8001750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	2000008c 	.word	0x2000008c

08000900 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800090a:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <ITM_SendChar+0x48>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a0e      	ldr	r2, [pc, #56]	@ (8000948 <ITM_SendChar+0x48>)
 8000910:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000914:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000916:	4b0d      	ldr	r3, [pc, #52]	@ (800094c <ITM_SendChar+0x4c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a0c      	ldr	r2, [pc, #48]	@ (800094c <ITM_SendChar+0x4c>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000922:	bf00      	nop
 8000924:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	2b00      	cmp	r3, #0
 8000930:	d0f8      	beq.n	8000924 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000932:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	6013      	str	r3, [r2, #0]
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e000edfc 	.word	0xe000edfc
 800094c:	e0000e00 	.word	0xe0000e00

08000950 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	e00a      	b.n	8000978 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000962:	f3af 8000 	nop.w
 8000966:	4601      	mov	r1, r0
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	1c5a      	adds	r2, r3, #1
 800096c:	60ba      	str	r2, [r7, #8]
 800096e:	b2ca      	uxtb	r2, r1
 8000970:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	3301      	adds	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	697a      	ldr	r2, [r7, #20]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	429a      	cmp	r2, r3
 800097e:	dbf0      	blt.n	8000962 <_read+0x12>
  }

  return len;
 8000980:	687b      	ldr	r3, [r7, #4]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3718      	adds	r7, #24
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b086      	sub	sp, #24
 800098e:	af00      	add	r7, sp, #0
 8000990:	60f8      	str	r0, [r7, #12]
 8000992:	60b9      	str	r1, [r7, #8]
 8000994:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
 800099a:	e009      	b.n	80009b0 <_write+0x26>
  {
//    __io_putchar);
	  ITM_SendChar(*ptr++);
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	1c5a      	adds	r2, r3, #1
 80009a0:	60ba      	str	r2, [r7, #8]
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ffab 	bl	8000900 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	3301      	adds	r3, #1
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	697a      	ldr	r2, [r7, #20]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	dbf1      	blt.n	800099c <_write+0x12>
  }
  return len;
 80009b8:	687b      	ldr	r3, [r7, #4]
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <_close>:

int _close(int file)
{
 80009c2:	b480      	push	{r7}
 80009c4:	b083      	sub	sp, #12
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009da:	b480      	push	{r7}
 80009dc:	b083      	sub	sp, #12
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009ea:	605a      	str	r2, [r3, #4]
  return 0;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <_isatty>:

int _isatty(int file)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a02:	2301      	movs	r3, #1
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3714      	adds	r7, #20
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
	...

08000a2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a30:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <SystemInit+0x20>)
 8000a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a36:	4a05      	ldr	r2, [pc, #20]	@ (8000a4c <SystemInit+0x20>)
 8000a38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a88 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a54:	f7ff ffea 	bl	8000a2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a58:	480c      	ldr	r0, [pc, #48]	@ (8000a8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a5a:	490d      	ldr	r1, [pc, #52]	@ (8000a90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a60:	e002      	b.n	8000a68 <LoopCopyDataInit>

08000a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a66:	3304      	adds	r3, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a6c:	d3f9      	bcc.n	8000a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a70:	4c0a      	ldr	r4, [pc, #40]	@ (8000a9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a74:	e001      	b.n	8000a7a <LoopFillZerobss>

08000a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a78:	3204      	adds	r2, #4

08000a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a7c:	d3fb      	bcc.n	8000a76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a7e:	f003 fcff 	bl	8004480 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a82:	f7ff fd75 	bl	8000570 <main>
  bx  lr    
 8000a86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a88:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a90:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a94:	080050f8 	.word	0x080050f8
  ldr r2, =_sbss
 8000a98:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a9c:	200043d0 	.word	0x200043d0

08000aa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa0:	e7fe      	b.n	8000aa0 <ADC_IRQHandler>
	...

08000aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae4 <HAL_Init+0x40>)
 8000aae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <HAL_Init+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <HAL_Init+0x40>)
 8000aba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000abe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac0:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <HAL_Init+0x40>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a07      	ldr	r2, [pc, #28]	@ (8000ae4 <HAL_Init+0x40>)
 8000ac6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000acc:	2003      	movs	r0, #3
 8000ace:	f000 f8d8 	bl	8000c82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad2:	200f      	movs	r0, #15
 8000ad4:	f7ff fe7c 	bl	80007d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad8:	f7ff fe52 	bl	8000780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023c00 	.word	0x40023c00

08000ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <HAL_IncTick+0x20>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <HAL_IncTick+0x24>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	4a04      	ldr	r2, [pc, #16]	@ (8000b0c <HAL_IncTick+0x24>)
 8000afa:	6013      	str	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	200000d4 	.word	0x200000d4

08000b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return uwTick;
 8000b14:	4b03      	ldr	r3, [pc, #12]	@ (8000b24 <HAL_GetTick+0x14>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	200000d4 	.word	0x200000d4

08000b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b38:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b44:	4013      	ands	r3, r2
 8000b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5a:	4a04      	ldr	r2, [pc, #16]	@ (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	60d3      	str	r3, [r2, #12]
}
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b74:	4b04      	ldr	r3, [pc, #16]	@ (8000b88 <__NVIC_GetPriorityGrouping+0x18>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	0a1b      	lsrs	r3, r3, #8
 8000b7a:	f003 0307 	and.w	r3, r3, #7
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	db0b      	blt.n	8000bb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	f003 021f 	and.w	r2, r3, #31
 8000ba4:	4907      	ldr	r1, [pc, #28]	@ (8000bc4 <__NVIC_EnableIRQ+0x38>)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	095b      	lsrs	r3, r3, #5
 8000bac:	2001      	movs	r0, #1
 8000bae:	fa00 f202 	lsl.w	r2, r0, r2
 8000bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000e100 	.word	0xe000e100

08000bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	6039      	str	r1, [r7, #0]
 8000bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	db0a      	blt.n	8000bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	490c      	ldr	r1, [pc, #48]	@ (8000c14 <__NVIC_SetPriority+0x4c>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	0112      	lsls	r2, r2, #4
 8000be8:	b2d2      	uxtb	r2, r2
 8000bea:	440b      	add	r3, r1
 8000bec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf0:	e00a      	b.n	8000c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4908      	ldr	r1, [pc, #32]	@ (8000c18 <__NVIC_SetPriority+0x50>)
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	f003 030f 	and.w	r3, r3, #15
 8000bfe:	3b04      	subs	r3, #4
 8000c00:	0112      	lsls	r2, r2, #4
 8000c02:	b2d2      	uxtb	r2, r2
 8000c04:	440b      	add	r3, r1
 8000c06:	761a      	strb	r2, [r3, #24]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000e100 	.word	0xe000e100
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b089      	sub	sp, #36	@ 0x24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	f1c3 0307 	rsb	r3, r3, #7
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	bf28      	it	cs
 8000c3a:	2304      	movcs	r3, #4
 8000c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3304      	adds	r3, #4
 8000c42:	2b06      	cmp	r3, #6
 8000c44:	d902      	bls.n	8000c4c <NVIC_EncodePriority+0x30>
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3b03      	subs	r3, #3
 8000c4a:	e000      	b.n	8000c4e <NVIC_EncodePriority+0x32>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43da      	mvns	r2, r3
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	401a      	ands	r2, r3
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6e:	43d9      	mvns	r1, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	4313      	orrs	r3, r2
         );
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3724      	adds	r7, #36	@ 0x24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff ff4c 	bl	8000b28 <__NVIC_SetPriorityGrouping>
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
 8000ca4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000caa:	f7ff ff61 	bl	8000b70 <__NVIC_GetPriorityGrouping>
 8000cae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	68b9      	ldr	r1, [r7, #8]
 8000cb4:	6978      	ldr	r0, [r7, #20]
 8000cb6:	f7ff ffb1 	bl	8000c1c <NVIC_EncodePriority>
 8000cba:	4602      	mov	r2, r0
 8000cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc0:	4611      	mov	r1, r2
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff ff80 	bl	8000bc8 <__NVIC_SetPriority>
}
 8000cc8:	bf00      	nop
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff ff54 	bl	8000b8c <__NVIC_EnableIRQ>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d101      	bne.n	8000cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e267      	b.n	80011ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d075      	beq.n	8000df6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000d0a:	4b88      	ldr	r3, [pc, #544]	@ (8000f2c <HAL_RCC_OscConfig+0x240>)
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	f003 030c 	and.w	r3, r3, #12
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	d00c      	beq.n	8000d30 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d16:	4b85      	ldr	r3, [pc, #532]	@ (8000f2c <HAL_RCC_OscConfig+0x240>)
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000d1e:	2b08      	cmp	r3, #8
 8000d20:	d112      	bne.n	8000d48 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d22:	4b82      	ldr	r3, [pc, #520]	@ (8000f2c <HAL_RCC_OscConfig+0x240>)
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000d2e:	d10b      	bne.n	8000d48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d30:	4b7e      	ldr	r3, [pc, #504]	@ (8000f2c <HAL_RCC_OscConfig+0x240>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d05b      	beq.n	8000df4 <HAL_RCC_OscConfig+0x108>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d157      	bne.n	8000df4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	e242      	b.n	80011ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d50:	d106      	bne.n	8000d60 <HAL_RCC_OscConfig+0x74>
 8000d52:	4b76      	ldr	r3, [pc, #472]	@ (8000f2c <HAL_RCC_OscConfig+0x240>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a75      	ldr	r2, [pc, #468]	@ (8000f2c <HAL_RCC_OscConfig+0x240>)
 8000d58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d5c:	6013      	str	r3, [r2, #0]
 8000d5e:	e01d      	b.n	8000d9c <HAL_RCC_OscConfig+0xb0>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d68:	d10c      	bne.n	8000d84 <HAL_RCC_OscConfig+0x98>
 8000d6a:	4b70      	ldr	r3, [pc, #448]	@ (8000f2c <HAL_RCC_OscConfig+0x240>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a6f      	ldr	r2, [pc, #444]	@ (8000f2c <HAL_RCC_OscConfig+0x240>)
 8000d70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	4b6d      	ldr	r3, [pc, #436]	@ (8000f2c <HAL_RCC_OscConfig+0x240>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a6c      	ldr	r2, [pc, #432]	@ (8000f2c <HAL_RCC_OscConfig+0x240>)
 8000d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	e00b      	b.n	8000d9c <HAL_RCC_OscConfig+0xb0>
 8000d84:	4b69      	ldr	r3, [pc, #420]	@ (8000f2c <HAL_RCC_OscConfig+0x240>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a68      	ldr	r2, [pc, #416]	@ (8000f2c <HAL_RCC_OscConfig+0x240>)
 8000d8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d8e:	6013      	str	r3, [r2, #0]
 8000d90:	4b66      	ldr	r3, [pc, #408]	@ (8000f2c <HAL_RCC_OscConfig+0x240>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a65      	ldr	r2, [pc, #404]	@ (8000f2c <HAL_RCC_OscConfig+0x240>)
 8000d96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d013      	beq.n	8000dcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da4:	f7ff feb4 	bl	8000b10 <HAL_GetTick>
 8000da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000daa:	e008      	b.n	8000dbe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dac:	f7ff feb0 	bl	8000b10 <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b64      	cmp	r3, #100	@ 0x64
 8000db8:	d901      	bls.n	8000dbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e207      	b.n	80011ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dbe:	4b5b      	ldr	r3, [pc, #364]	@ (8000f2c <HAL_RCC_OscConfig+0x240>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0f0      	beq.n	8000dac <HAL_RCC_OscConfig+0xc0>
 8000dca:	e014      	b.n	8000df6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dcc:	f7ff fea0 	bl	8000b10 <HAL_GetTick>
 8000dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dd2:	e008      	b.n	8000de6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dd4:	f7ff fe9c 	bl	8000b10 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b64      	cmp	r3, #100	@ 0x64
 8000de0:	d901      	bls.n	8000de6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	e1f3      	b.n	80011ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000de6:	4b51      	ldr	r3, [pc, #324]	@ (8000f2c <HAL_RCC_OscConfig+0x240>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1f0      	bne.n	8000dd4 <HAL_RCC_OscConfig+0xe8>
 8000df2:	e000      	b.n	8000df6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d063      	beq.n	8000eca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000e02:	4b4a      	ldr	r3, [pc, #296]	@ (8000f2c <HAL_RCC_OscConfig+0x240>)
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f003 030c 	and.w	r3, r3, #12
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d00b      	beq.n	8000e26 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e0e:	4b47      	ldr	r3, [pc, #284]	@ (8000f2c <HAL_RCC_OscConfig+0x240>)
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000e16:	2b08      	cmp	r3, #8
 8000e18:	d11c      	bne.n	8000e54 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e1a:	4b44      	ldr	r3, [pc, #272]	@ (8000f2c <HAL_RCC_OscConfig+0x240>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d116      	bne.n	8000e54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e26:	4b41      	ldr	r3, [pc, #260]	@ (8000f2c <HAL_RCC_OscConfig+0x240>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d005      	beq.n	8000e3e <HAL_RCC_OscConfig+0x152>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d001      	beq.n	8000e3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e1c7      	b.n	80011ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e3e:	4b3b      	ldr	r3, [pc, #236]	@ (8000f2c <HAL_RCC_OscConfig+0x240>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	691b      	ldr	r3, [r3, #16]
 8000e4a:	00db      	lsls	r3, r3, #3
 8000e4c:	4937      	ldr	r1, [pc, #220]	@ (8000f2c <HAL_RCC_OscConfig+0x240>)
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e52:	e03a      	b.n	8000eca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d020      	beq.n	8000e9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e5c:	4b34      	ldr	r3, [pc, #208]	@ (8000f30 <HAL_RCC_OscConfig+0x244>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e62:	f7ff fe55 	bl	8000b10 <HAL_GetTick>
 8000e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e68:	e008      	b.n	8000e7c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e6a:	f7ff fe51 	bl	8000b10 <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d901      	bls.n	8000e7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e1a8      	b.n	80011ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e7c:	4b2b      	ldr	r3, [pc, #172]	@ (8000f2c <HAL_RCC_OscConfig+0x240>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0f0      	beq.n	8000e6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e88:	4b28      	ldr	r3, [pc, #160]	@ (8000f2c <HAL_RCC_OscConfig+0x240>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	691b      	ldr	r3, [r3, #16]
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	4925      	ldr	r1, [pc, #148]	@ (8000f2c <HAL_RCC_OscConfig+0x240>)
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	600b      	str	r3, [r1, #0]
 8000e9c:	e015      	b.n	8000eca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e9e:	4b24      	ldr	r3, [pc, #144]	@ (8000f30 <HAL_RCC_OscConfig+0x244>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ea4:	f7ff fe34 	bl	8000b10 <HAL_GetTick>
 8000ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eaa:	e008      	b.n	8000ebe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eac:	f7ff fe30 	bl	8000b10 <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d901      	bls.n	8000ebe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e187      	b.n	80011ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8000f2c <HAL_RCC_OscConfig+0x240>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1f0      	bne.n	8000eac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0308 	and.w	r3, r3, #8
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d036      	beq.n	8000f44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d016      	beq.n	8000f0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ede:	4b15      	ldr	r3, [pc, #84]	@ (8000f34 <HAL_RCC_OscConfig+0x248>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ee4:	f7ff fe14 	bl	8000b10 <HAL_GetTick>
 8000ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eea:	e008      	b.n	8000efe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eec:	f7ff fe10 	bl	8000b10 <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d901      	bls.n	8000efe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e167      	b.n	80011ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000efe:	4b0b      	ldr	r3, [pc, #44]	@ (8000f2c <HAL_RCC_OscConfig+0x240>)
 8000f00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d0f0      	beq.n	8000eec <HAL_RCC_OscConfig+0x200>
 8000f0a:	e01b      	b.n	8000f44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f0c:	4b09      	ldr	r3, [pc, #36]	@ (8000f34 <HAL_RCC_OscConfig+0x248>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f12:	f7ff fdfd 	bl	8000b10 <HAL_GetTick>
 8000f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f18:	e00e      	b.n	8000f38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f1a:	f7ff fdf9 	bl	8000b10 <HAL_GetTick>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d907      	bls.n	8000f38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e150      	b.n	80011ce <HAL_RCC_OscConfig+0x4e2>
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	42470000 	.word	0x42470000
 8000f34:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f38:	4b88      	ldr	r3, [pc, #544]	@ (800115c <HAL_RCC_OscConfig+0x470>)
 8000f3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1ea      	bne.n	8000f1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 0304 	and.w	r3, r3, #4
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f000 8097 	beq.w	8001080 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f52:	2300      	movs	r3, #0
 8000f54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f56:	4b81      	ldr	r3, [pc, #516]	@ (800115c <HAL_RCC_OscConfig+0x470>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10f      	bne.n	8000f82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	4b7d      	ldr	r3, [pc, #500]	@ (800115c <HAL_RCC_OscConfig+0x470>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6a:	4a7c      	ldr	r2, [pc, #496]	@ (800115c <HAL_RCC_OscConfig+0x470>)
 8000f6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f72:	4b7a      	ldr	r3, [pc, #488]	@ (800115c <HAL_RCC_OscConfig+0x470>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f82:	4b77      	ldr	r3, [pc, #476]	@ (8001160 <HAL_RCC_OscConfig+0x474>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d118      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f8e:	4b74      	ldr	r3, [pc, #464]	@ (8001160 <HAL_RCC_OscConfig+0x474>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a73      	ldr	r2, [pc, #460]	@ (8001160 <HAL_RCC_OscConfig+0x474>)
 8000f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f9a:	f7ff fdb9 	bl	8000b10 <HAL_GetTick>
 8000f9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa0:	e008      	b.n	8000fb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fa2:	f7ff fdb5 	bl	8000b10 <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e10c      	b.n	80011ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb4:	4b6a      	ldr	r3, [pc, #424]	@ (8001160 <HAL_RCC_OscConfig+0x474>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0f0      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d106      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x2ea>
 8000fc8:	4b64      	ldr	r3, [pc, #400]	@ (800115c <HAL_RCC_OscConfig+0x470>)
 8000fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fcc:	4a63      	ldr	r2, [pc, #396]	@ (800115c <HAL_RCC_OscConfig+0x470>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8000fd4:	e01c      	b.n	8001010 <HAL_RCC_OscConfig+0x324>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	2b05      	cmp	r3, #5
 8000fdc:	d10c      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x30c>
 8000fde:	4b5f      	ldr	r3, [pc, #380]	@ (800115c <HAL_RCC_OscConfig+0x470>)
 8000fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fe2:	4a5e      	ldr	r2, [pc, #376]	@ (800115c <HAL_RCC_OscConfig+0x470>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	6713      	str	r3, [r2, #112]	@ 0x70
 8000fea:	4b5c      	ldr	r3, [pc, #368]	@ (800115c <HAL_RCC_OscConfig+0x470>)
 8000fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fee:	4a5b      	ldr	r2, [pc, #364]	@ (800115c <HAL_RCC_OscConfig+0x470>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6713      	str	r3, [r2, #112]	@ 0x70
 8000ff6:	e00b      	b.n	8001010 <HAL_RCC_OscConfig+0x324>
 8000ff8:	4b58      	ldr	r3, [pc, #352]	@ (800115c <HAL_RCC_OscConfig+0x470>)
 8000ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000ffc:	4a57      	ldr	r2, [pc, #348]	@ (800115c <HAL_RCC_OscConfig+0x470>)
 8000ffe:	f023 0301 	bic.w	r3, r3, #1
 8001002:	6713      	str	r3, [r2, #112]	@ 0x70
 8001004:	4b55      	ldr	r3, [pc, #340]	@ (800115c <HAL_RCC_OscConfig+0x470>)
 8001006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001008:	4a54      	ldr	r2, [pc, #336]	@ (800115c <HAL_RCC_OscConfig+0x470>)
 800100a:	f023 0304 	bic.w	r3, r3, #4
 800100e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d015      	beq.n	8001044 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001018:	f7ff fd7a 	bl	8000b10 <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800101e:	e00a      	b.n	8001036 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001020:	f7ff fd76 	bl	8000b10 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800102e:	4293      	cmp	r3, r2
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e0cb      	b.n	80011ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001036:	4b49      	ldr	r3, [pc, #292]	@ (800115c <HAL_RCC_OscConfig+0x470>)
 8001038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d0ee      	beq.n	8001020 <HAL_RCC_OscConfig+0x334>
 8001042:	e014      	b.n	800106e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001044:	f7ff fd64 	bl	8000b10 <HAL_GetTick>
 8001048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800104a:	e00a      	b.n	8001062 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800104c:	f7ff fd60 	bl	8000b10 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800105a:	4293      	cmp	r3, r2
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e0b5      	b.n	80011ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001062:	4b3e      	ldr	r3, [pc, #248]	@ (800115c <HAL_RCC_OscConfig+0x470>)
 8001064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1ee      	bne.n	800104c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800106e:	7dfb      	ldrb	r3, [r7, #23]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d105      	bne.n	8001080 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001074:	4b39      	ldr	r3, [pc, #228]	@ (800115c <HAL_RCC_OscConfig+0x470>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001078:	4a38      	ldr	r2, [pc, #224]	@ (800115c <HAL_RCC_OscConfig+0x470>)
 800107a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800107e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	2b00      	cmp	r3, #0
 8001086:	f000 80a1 	beq.w	80011cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800108a:	4b34      	ldr	r3, [pc, #208]	@ (800115c <HAL_RCC_OscConfig+0x470>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f003 030c 	and.w	r3, r3, #12
 8001092:	2b08      	cmp	r3, #8
 8001094:	d05c      	beq.n	8001150 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	2b02      	cmp	r3, #2
 800109c:	d141      	bne.n	8001122 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800109e:	4b31      	ldr	r3, [pc, #196]	@ (8001164 <HAL_RCC_OscConfig+0x478>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a4:	f7ff fd34 	bl	8000b10 <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ac:	f7ff fd30 	bl	8000b10 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e087      	b.n	80011ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010be:	4b27      	ldr	r3, [pc, #156]	@ (800115c <HAL_RCC_OscConfig+0x470>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f0      	bne.n	80010ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69da      	ldr	r2, [r3, #28]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a1b      	ldr	r3, [r3, #32]
 80010d2:	431a      	orrs	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d8:	019b      	lsls	r3, r3, #6
 80010da:	431a      	orrs	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010e0:	085b      	lsrs	r3, r3, #1
 80010e2:	3b01      	subs	r3, #1
 80010e4:	041b      	lsls	r3, r3, #16
 80010e6:	431a      	orrs	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010ec:	061b      	lsls	r3, r3, #24
 80010ee:	491b      	ldr	r1, [pc, #108]	@ (800115c <HAL_RCC_OscConfig+0x470>)
 80010f0:	4313      	orrs	r3, r2
 80010f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001164 <HAL_RCC_OscConfig+0x478>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fa:	f7ff fd09 	bl	8000b10 <HAL_GetTick>
 80010fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001100:	e008      	b.n	8001114 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001102:	f7ff fd05 	bl	8000b10 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e05c      	b.n	80011ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001114:	4b11      	ldr	r3, [pc, #68]	@ (800115c <HAL_RCC_OscConfig+0x470>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0f0      	beq.n	8001102 <HAL_RCC_OscConfig+0x416>
 8001120:	e054      	b.n	80011cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001122:	4b10      	ldr	r3, [pc, #64]	@ (8001164 <HAL_RCC_OscConfig+0x478>)
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001128:	f7ff fcf2 	bl	8000b10 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001130:	f7ff fcee 	bl	8000b10 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e045      	b.n	80011ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001142:	4b06      	ldr	r3, [pc, #24]	@ (800115c <HAL_RCC_OscConfig+0x470>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1f0      	bne.n	8001130 <HAL_RCC_OscConfig+0x444>
 800114e:	e03d      	b.n	80011cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d107      	bne.n	8001168 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e038      	b.n	80011ce <HAL_RCC_OscConfig+0x4e2>
 800115c:	40023800 	.word	0x40023800
 8001160:	40007000 	.word	0x40007000
 8001164:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001168:	4b1b      	ldr	r3, [pc, #108]	@ (80011d8 <HAL_RCC_OscConfig+0x4ec>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d028      	beq.n	80011c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001180:	429a      	cmp	r2, r3
 8001182:	d121      	bne.n	80011c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800118e:	429a      	cmp	r2, r3
 8001190:	d11a      	bne.n	80011c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001198:	4013      	ands	r3, r2
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800119e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d111      	bne.n	80011c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ae:	085b      	lsrs	r3, r3, #1
 80011b0:	3b01      	subs	r3, #1
 80011b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d107      	bne.n	80011c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d001      	beq.n	80011cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e000      	b.n	80011ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800

080011dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e0cc      	b.n	800138a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011f0:	4b68      	ldr	r3, [pc, #416]	@ (8001394 <HAL_RCC_ClockConfig+0x1b8>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d90c      	bls.n	8001218 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011fe:	4b65      	ldr	r3, [pc, #404]	@ (8001394 <HAL_RCC_ClockConfig+0x1b8>)
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001206:	4b63      	ldr	r3, [pc, #396]	@ (8001394 <HAL_RCC_ClockConfig+0x1b8>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	429a      	cmp	r2, r3
 8001212:	d001      	beq.n	8001218 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e0b8      	b.n	800138a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d020      	beq.n	8001266 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001230:	4b59      	ldr	r3, [pc, #356]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	4a58      	ldr	r2, [pc, #352]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 8001236:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800123a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0308 	and.w	r3, r3, #8
 8001244:	2b00      	cmp	r3, #0
 8001246:	d005      	beq.n	8001254 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001248:	4b53      	ldr	r3, [pc, #332]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	4a52      	ldr	r2, [pc, #328]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 800124e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001252:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001254:	4b50      	ldr	r3, [pc, #320]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	494d      	ldr	r1, [pc, #308]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 8001262:	4313      	orrs	r3, r2
 8001264:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d044      	beq.n	80012fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d107      	bne.n	800128a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127a:	4b47      	ldr	r3, [pc, #284]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d119      	bne.n	80012ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e07f      	b.n	800138a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d003      	beq.n	800129a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001296:	2b03      	cmp	r3, #3
 8001298:	d107      	bne.n	80012aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800129a:	4b3f      	ldr	r3, [pc, #252]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d109      	bne.n	80012ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e06f      	b.n	800138a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e067      	b.n	800138a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ba:	4b37      	ldr	r3, [pc, #220]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f023 0203 	bic.w	r2, r3, #3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	4934      	ldr	r1, [pc, #208]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 80012c8:	4313      	orrs	r3, r2
 80012ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012cc:	f7ff fc20 	bl	8000b10 <HAL_GetTick>
 80012d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012d2:	e00a      	b.n	80012ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d4:	f7ff fc1c 	bl	8000b10 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e04f      	b.n	800138a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 020c 	and.w	r2, r3, #12
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d1eb      	bne.n	80012d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012fc:	4b25      	ldr	r3, [pc, #148]	@ (8001394 <HAL_RCC_ClockConfig+0x1b8>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	429a      	cmp	r2, r3
 8001308:	d20c      	bcs.n	8001324 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800130a:	4b22      	ldr	r3, [pc, #136]	@ (8001394 <HAL_RCC_ClockConfig+0x1b8>)
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001312:	4b20      	ldr	r3, [pc, #128]	@ (8001394 <HAL_RCC_ClockConfig+0x1b8>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	429a      	cmp	r2, r3
 800131e:	d001      	beq.n	8001324 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e032      	b.n	800138a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	2b00      	cmp	r3, #0
 800132e:	d008      	beq.n	8001342 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001330:	4b19      	ldr	r3, [pc, #100]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	4916      	ldr	r1, [pc, #88]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 800133e:	4313      	orrs	r3, r2
 8001340:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	2b00      	cmp	r3, #0
 800134c:	d009      	beq.n	8001362 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800134e:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	490e      	ldr	r1, [pc, #56]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 800135e:	4313      	orrs	r3, r2
 8001360:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001362:	f000 f821 	bl	80013a8 <HAL_RCC_GetSysClockFreq>
 8001366:	4602      	mov	r2, r0
 8001368:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <HAL_RCC_ClockConfig+0x1bc>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	091b      	lsrs	r3, r3, #4
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	490a      	ldr	r1, [pc, #40]	@ (800139c <HAL_RCC_ClockConfig+0x1c0>)
 8001374:	5ccb      	ldrb	r3, [r1, r3]
 8001376:	fa22 f303 	lsr.w	r3, r2, r3
 800137a:	4a09      	ldr	r2, [pc, #36]	@ (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 800137c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800137e:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fa24 	bl	80007d0 <HAL_InitTick>

  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023c00 	.word	0x40023c00
 8001398:	40023800 	.word	0x40023800
 800139c:	0800509c 	.word	0x0800509c
 80013a0:	20000000 	.word	0x20000000
 80013a4:	20000004 	.word	0x20000004

080013a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013ac:	b090      	sub	sp, #64	@ 0x40
 80013ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80013bc:	2300      	movs	r3, #0
 80013be:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013c0:	4b59      	ldr	r3, [pc, #356]	@ (8001528 <HAL_RCC_GetSysClockFreq+0x180>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 030c 	and.w	r3, r3, #12
 80013c8:	2b08      	cmp	r3, #8
 80013ca:	d00d      	beq.n	80013e8 <HAL_RCC_GetSysClockFreq+0x40>
 80013cc:	2b08      	cmp	r3, #8
 80013ce:	f200 80a1 	bhi.w	8001514 <HAL_RCC_GetSysClockFreq+0x16c>
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d002      	beq.n	80013dc <HAL_RCC_GetSysClockFreq+0x34>
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	d003      	beq.n	80013e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80013da:	e09b      	b.n	8001514 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013dc:	4b53      	ldr	r3, [pc, #332]	@ (800152c <HAL_RCC_GetSysClockFreq+0x184>)
 80013de:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80013e0:	e09b      	b.n	800151a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013e2:	4b53      	ldr	r3, [pc, #332]	@ (8001530 <HAL_RCC_GetSysClockFreq+0x188>)
 80013e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80013e6:	e098      	b.n	800151a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013e8:	4b4f      	ldr	r3, [pc, #316]	@ (8001528 <HAL_RCC_GetSysClockFreq+0x180>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013f2:	4b4d      	ldr	r3, [pc, #308]	@ (8001528 <HAL_RCC_GetSysClockFreq+0x180>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d028      	beq.n	8001450 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001528 <HAL_RCC_GetSysClockFreq+0x180>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	099b      	lsrs	r3, r3, #6
 8001404:	2200      	movs	r2, #0
 8001406:	623b      	str	r3, [r7, #32]
 8001408:	627a      	str	r2, [r7, #36]	@ 0x24
 800140a:	6a3b      	ldr	r3, [r7, #32]
 800140c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001410:	2100      	movs	r1, #0
 8001412:	4b47      	ldr	r3, [pc, #284]	@ (8001530 <HAL_RCC_GetSysClockFreq+0x188>)
 8001414:	fb03 f201 	mul.w	r2, r3, r1
 8001418:	2300      	movs	r3, #0
 800141a:	fb00 f303 	mul.w	r3, r0, r3
 800141e:	4413      	add	r3, r2
 8001420:	4a43      	ldr	r2, [pc, #268]	@ (8001530 <HAL_RCC_GetSysClockFreq+0x188>)
 8001422:	fba0 1202 	umull	r1, r2, r0, r2
 8001426:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001428:	460a      	mov	r2, r1
 800142a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800142c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800142e:	4413      	add	r3, r2
 8001430:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001434:	2200      	movs	r2, #0
 8001436:	61bb      	str	r3, [r7, #24]
 8001438:	61fa      	str	r2, [r7, #28]
 800143a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800143e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001442:	f7fe ff1d 	bl	8000280 <__aeabi_uldivmod>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4613      	mov	r3, r2
 800144c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800144e:	e053      	b.n	80014f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001450:	4b35      	ldr	r3, [pc, #212]	@ (8001528 <HAL_RCC_GetSysClockFreq+0x180>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	099b      	lsrs	r3, r3, #6
 8001456:	2200      	movs	r2, #0
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	617a      	str	r2, [r7, #20]
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001462:	f04f 0b00 	mov.w	fp, #0
 8001466:	4652      	mov	r2, sl
 8001468:	465b      	mov	r3, fp
 800146a:	f04f 0000 	mov.w	r0, #0
 800146e:	f04f 0100 	mov.w	r1, #0
 8001472:	0159      	lsls	r1, r3, #5
 8001474:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001478:	0150      	lsls	r0, r2, #5
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	ebb2 080a 	subs.w	r8, r2, sl
 8001482:	eb63 090b 	sbc.w	r9, r3, fp
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	f04f 0300 	mov.w	r3, #0
 800148e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001492:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001496:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800149a:	ebb2 0408 	subs.w	r4, r2, r8
 800149e:	eb63 0509 	sbc.w	r5, r3, r9
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	f04f 0300 	mov.w	r3, #0
 80014aa:	00eb      	lsls	r3, r5, #3
 80014ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014b0:	00e2      	lsls	r2, r4, #3
 80014b2:	4614      	mov	r4, r2
 80014b4:	461d      	mov	r5, r3
 80014b6:	eb14 030a 	adds.w	r3, r4, sl
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	eb45 030b 	adc.w	r3, r5, fp
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	f04f 0300 	mov.w	r3, #0
 80014ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80014ce:	4629      	mov	r1, r5
 80014d0:	028b      	lsls	r3, r1, #10
 80014d2:	4621      	mov	r1, r4
 80014d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80014d8:	4621      	mov	r1, r4
 80014da:	028a      	lsls	r2, r1, #10
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014e2:	2200      	movs	r2, #0
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	60fa      	str	r2, [r7, #12]
 80014e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014ec:	f7fe fec8 	bl	8000280 <__aeabi_uldivmod>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4613      	mov	r3, r2
 80014f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80014f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001528 <HAL_RCC_GetSysClockFreq+0x180>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	0c1b      	lsrs	r3, r3, #16
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	3301      	adds	r3, #1
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001508:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800150a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800150c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001510:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001512:	e002      	b.n	800151a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001514:	4b05      	ldr	r3, [pc, #20]	@ (800152c <HAL_RCC_GetSysClockFreq+0x184>)
 8001516:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800151a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800151c:	4618      	mov	r0, r3
 800151e:	3740      	adds	r7, #64	@ 0x40
 8001520:	46bd      	mov	sp, r7
 8001522:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800
 800152c:	00f42400 	.word	0x00f42400
 8001530:	017d7840 	.word	0x017d7840

08001534 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001538:	4b03      	ldr	r3, [pc, #12]	@ (8001548 <HAL_RCC_GetHCLKFreq+0x14>)
 800153a:	681b      	ldr	r3, [r3, #0]
}
 800153c:	4618      	mov	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	20000000 	.word	0x20000000

0800154c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001550:	f7ff fff0 	bl	8001534 <HAL_RCC_GetHCLKFreq>
 8001554:	4602      	mov	r2, r0
 8001556:	4b05      	ldr	r3, [pc, #20]	@ (800156c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	0b5b      	lsrs	r3, r3, #13
 800155c:	f003 0307 	and.w	r3, r3, #7
 8001560:	4903      	ldr	r1, [pc, #12]	@ (8001570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001562:	5ccb      	ldrb	r3, [r1, r3]
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001568:	4618      	mov	r0, r3
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40023800 	.word	0x40023800
 8001570:	080050ac 	.word	0x080050ac

08001574 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	220f      	movs	r2, #15
 8001582:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001584:	4b12      	ldr	r3, [pc, #72]	@ (80015d0 <HAL_RCC_GetClockConfig+0x5c>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 0203 	and.w	r2, r3, #3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001590:	4b0f      	ldr	r3, [pc, #60]	@ (80015d0 <HAL_RCC_GetClockConfig+0x5c>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800159c:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <HAL_RCC_GetClockConfig+0x5c>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80015a8:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <HAL_RCC_GetClockConfig+0x5c>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	08db      	lsrs	r3, r3, #3
 80015ae:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015b6:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <HAL_RCC_GetClockConfig+0x60>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0207 	and.w	r2, r3, #7
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	601a      	str	r2, [r3, #0]
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40023c00 	.word	0x40023c00

080015d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e041      	b.n	800166e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d106      	bne.n	8001604 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 f839 	bl	8001676 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2202      	movs	r2, #2
 8001608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3304      	adds	r3, #4
 8001614:	4619      	mov	r1, r3
 8001616:	4610      	mov	r0, r2
 8001618:	f000 f9b2 	bl	8001980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b01      	cmp	r3, #1
 800169e:	d001      	beq.n	80016a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e044      	b.n	800172e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2202      	movs	r2, #2
 80016a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	68da      	ldr	r2, [r3, #12]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f042 0201 	orr.w	r2, r2, #1
 80016ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a1e      	ldr	r2, [pc, #120]	@ (800173c <HAL_TIM_Base_Start_IT+0xb0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d018      	beq.n	80016f8 <HAL_TIM_Base_Start_IT+0x6c>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016ce:	d013      	beq.n	80016f8 <HAL_TIM_Base_Start_IT+0x6c>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a1a      	ldr	r2, [pc, #104]	@ (8001740 <HAL_TIM_Base_Start_IT+0xb4>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d00e      	beq.n	80016f8 <HAL_TIM_Base_Start_IT+0x6c>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a19      	ldr	r2, [pc, #100]	@ (8001744 <HAL_TIM_Base_Start_IT+0xb8>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d009      	beq.n	80016f8 <HAL_TIM_Base_Start_IT+0x6c>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a17      	ldr	r2, [pc, #92]	@ (8001748 <HAL_TIM_Base_Start_IT+0xbc>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d004      	beq.n	80016f8 <HAL_TIM_Base_Start_IT+0x6c>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a16      	ldr	r2, [pc, #88]	@ (800174c <HAL_TIM_Base_Start_IT+0xc0>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d111      	bne.n	800171c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b06      	cmp	r3, #6
 8001708:	d010      	beq.n	800172c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f042 0201 	orr.w	r2, r2, #1
 8001718:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800171a:	e007      	b.n	800172c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f042 0201 	orr.w	r2, r2, #1
 800172a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40010000 	.word	0x40010000
 8001740:	40000400 	.word	0x40000400
 8001744:	40000800 	.word	0x40000800
 8001748:	40000c00 	.word	0x40000c00
 800174c:	40014000 	.word	0x40014000

08001750 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d020      	beq.n	80017b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d01b      	beq.n	80017b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f06f 0202 	mvn.w	r2, #2
 8001784:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 f8d2 	bl	8001944 <HAL_TIM_IC_CaptureCallback>
 80017a0:	e005      	b.n	80017ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f8c4 	bl	8001930 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 f8d5 	bl	8001958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d020      	beq.n	8001800 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d01b      	beq.n	8001800 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f06f 0204 	mvn.w	r2, #4
 80017d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2202      	movs	r2, #2
 80017d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 f8ac 	bl	8001944 <HAL_TIM_IC_CaptureCallback>
 80017ec:	e005      	b.n	80017fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 f89e 	bl	8001930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 f8af 	bl	8001958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d020      	beq.n	800184c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	2b00      	cmp	r3, #0
 8001812:	d01b      	beq.n	800184c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f06f 0208 	mvn.w	r2, #8
 800181c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2204      	movs	r2, #4
 8001822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 f886 	bl	8001944 <HAL_TIM_IC_CaptureCallback>
 8001838:	e005      	b.n	8001846 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 f878 	bl	8001930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 f889 	bl	8001958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	f003 0310 	and.w	r3, r3, #16
 8001852:	2b00      	cmp	r3, #0
 8001854:	d020      	beq.n	8001898 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f003 0310 	and.w	r3, r3, #16
 800185c:	2b00      	cmp	r3, #0
 800185e:	d01b      	beq.n	8001898 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f06f 0210 	mvn.w	r2, #16
 8001868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2208      	movs	r2, #8
 800186e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f860 	bl	8001944 <HAL_TIM_IC_CaptureCallback>
 8001884:	e005      	b.n	8001892 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 f852 	bl	8001930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 f863 	bl	8001958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00c      	beq.n	80018bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d007      	beq.n	80018bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f06f 0201 	mvn.w	r2, #1
 80018b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7fe ff4a 	bl	8000750 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00c      	beq.n	80018e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d007      	beq.n	80018e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80018d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f8e6 	bl	8001aac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00c      	beq.n	8001904 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d007      	beq.n	8001904 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80018fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f834 	bl	800196c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	f003 0320 	and.w	r3, r3, #32
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00c      	beq.n	8001928 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f003 0320 	and.w	r3, r3, #32
 8001914:	2b00      	cmp	r3, #0
 8001916:	d007      	beq.n	8001928 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f06f 0220 	mvn.w	r2, #32
 8001920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f8b8 	bl	8001a98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001928:	bf00      	nop
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a3a      	ldr	r2, [pc, #232]	@ (8001a7c <TIM_Base_SetConfig+0xfc>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d00f      	beq.n	80019b8 <TIM_Base_SetConfig+0x38>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800199e:	d00b      	beq.n	80019b8 <TIM_Base_SetConfig+0x38>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a37      	ldr	r2, [pc, #220]	@ (8001a80 <TIM_Base_SetConfig+0x100>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d007      	beq.n	80019b8 <TIM_Base_SetConfig+0x38>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a36      	ldr	r2, [pc, #216]	@ (8001a84 <TIM_Base_SetConfig+0x104>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d003      	beq.n	80019b8 <TIM_Base_SetConfig+0x38>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a35      	ldr	r2, [pc, #212]	@ (8001a88 <TIM_Base_SetConfig+0x108>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d108      	bne.n	80019ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a2b      	ldr	r2, [pc, #172]	@ (8001a7c <TIM_Base_SetConfig+0xfc>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d01b      	beq.n	8001a0a <TIM_Base_SetConfig+0x8a>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019d8:	d017      	beq.n	8001a0a <TIM_Base_SetConfig+0x8a>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a28      	ldr	r2, [pc, #160]	@ (8001a80 <TIM_Base_SetConfig+0x100>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d013      	beq.n	8001a0a <TIM_Base_SetConfig+0x8a>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a27      	ldr	r2, [pc, #156]	@ (8001a84 <TIM_Base_SetConfig+0x104>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d00f      	beq.n	8001a0a <TIM_Base_SetConfig+0x8a>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a26      	ldr	r2, [pc, #152]	@ (8001a88 <TIM_Base_SetConfig+0x108>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d00b      	beq.n	8001a0a <TIM_Base_SetConfig+0x8a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a25      	ldr	r2, [pc, #148]	@ (8001a8c <TIM_Base_SetConfig+0x10c>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d007      	beq.n	8001a0a <TIM_Base_SetConfig+0x8a>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a24      	ldr	r2, [pc, #144]	@ (8001a90 <TIM_Base_SetConfig+0x110>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d003      	beq.n	8001a0a <TIM_Base_SetConfig+0x8a>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a23      	ldr	r2, [pc, #140]	@ (8001a94 <TIM_Base_SetConfig+0x114>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d108      	bne.n	8001a1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a0e      	ldr	r2, [pc, #56]	@ (8001a7c <TIM_Base_SetConfig+0xfc>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d103      	bne.n	8001a50 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	691a      	ldr	r2, [r3, #16]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d105      	bne.n	8001a6e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	f023 0201 	bic.w	r2, r3, #1
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	611a      	str	r2, [r3, #16]
  }
}
 8001a6e:	bf00      	nop
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40010000 	.word	0x40010000
 8001a80:	40000400 	.word	0x40000400
 8001a84:	40000800 	.word	0x40000800
 8001a88:	40000c00 	.word	0x40000c00
 8001a8c:	40014000 	.word	0x40014000
 8001a90:	40014400 	.word	0x40014400
 8001a94:	40014800 	.word	0x40014800

08001a98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f103 0208 	add.w	r2, r3, #8
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ad8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f103 0208 	add.w	r2, r3, #8
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f103 0208 	add.w	r2, r3, #8
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b085      	sub	sp, #20
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	601a      	str	r2, [r3, #0]
}
 8001b56:	bf00      	nop
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001b62:	b480      	push	{r7}
 8001b64:	b085      	sub	sp, #20
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b78:	d103      	bne.n	8001b82 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	e00c      	b.n	8001b9c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3308      	adds	r3, #8
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	e002      	b.n	8001b90 <vListInsert+0x2e>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d2f6      	bcs.n	8001b8a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	601a      	str	r2, [r3, #0]
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6892      	ldr	r2, [r2, #8]
 8001bea:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6852      	ldr	r2, [r2, #4]
 8001bf4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d103      	bne.n	8001c08 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	1e5a      	subs	r2, r3, #1
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d10b      	bne.n	8001c54 <xQueueGenericReset+0x2c>
        __asm volatile
 8001c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c40:	f383 8811 	msr	BASEPRI, r3
 8001c44:	f3bf 8f6f 	isb	sy
 8001c48:	f3bf 8f4f 	dsb	sy
 8001c4c:	60bb      	str	r3, [r7, #8]
    }
 8001c4e:	bf00      	nop
 8001c50:	bf00      	nop
 8001c52:	e7fd      	b.n	8001c50 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8001c54:	f001 ff82 	bl	8003b5c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c60:	68f9      	ldr	r1, [r7, #12]
 8001c62:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001c64:	fb01 f303 	mul.w	r3, r1, r3
 8001c68:	441a      	add	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c84:	3b01      	subs	r3, #1
 8001c86:	68f9      	ldr	r1, [r7, #12]
 8001c88:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001c8a:	fb01 f303 	mul.w	r3, r1, r3
 8001c8e:	441a      	add	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	22ff      	movs	r2, #255	@ 0xff
 8001c98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	22ff      	movs	r2, #255	@ 0xff
 8001ca0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d114      	bne.n	8001cd4 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d01a      	beq.n	8001ce8 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	3310      	adds	r3, #16
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f001 f862 	bl	8002d80 <xTaskRemoveFromEventList>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d012      	beq.n	8001ce8 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf8 <xQueueGenericReset+0xd0>)
 8001cc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	f3bf 8f4f 	dsb	sy
 8001cce:	f3bf 8f6f 	isb	sy
 8001cd2:	e009      	b.n	8001ce8 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	3310      	adds	r3, #16
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fef1 	bl	8001ac0 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	3324      	adds	r3, #36	@ 0x24
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff feec 	bl	8001ac0 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8001ce8:	f001 ff6a 	bl	8003bc0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8001cec:	2301      	movs	r3, #1
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	e000ed04 	.word	0xe000ed04

08001cfc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08c      	sub	sp, #48	@ 0x30
 8001d00:	af02      	add	r7, sp, #8
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	4613      	mov	r3, r2
 8001d08:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10b      	bne.n	8001d28 <xQueueGenericCreate+0x2c>
        __asm volatile
 8001d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d14:	f383 8811 	msr	BASEPRI, r3
 8001d18:	f3bf 8f6f 	isb	sy
 8001d1c:	f3bf 8f4f 	dsb	sy
 8001d20:	61bb      	str	r3, [r7, #24]
    }
 8001d22:	bf00      	nop
 8001d24:	bf00      	nop
 8001d26:	e7fd      	b.n	8001d24 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	fb02 f303 	mul.w	r3, r2, r3
 8001d30:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d006      	beq.n	8001d46 <xQueueGenericCreate+0x4a>
 8001d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d101      	bne.n	8001d4a <xQueueGenericCreate+0x4e>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <xQueueGenericCreate+0x50>
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10b      	bne.n	8001d68 <xQueueGenericCreate+0x6c>
        __asm volatile
 8001d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d54:	f383 8811 	msr	BASEPRI, r3
 8001d58:	f3bf 8f6f 	isb	sy
 8001d5c:	f3bf 8f4f 	dsb	sy
 8001d60:	617b      	str	r3, [r7, #20]
    }
 8001d62:	bf00      	nop
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8001d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8001d6e:	d90b      	bls.n	8001d88 <xQueueGenericCreate+0x8c>
        __asm volatile
 8001d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d74:	f383 8811 	msr	BASEPRI, r3
 8001d78:	f3bf 8f6f 	isb	sy
 8001d7c:	f3bf 8f4f 	dsb	sy
 8001d80:	613b      	str	r3, [r7, #16]
    }
 8001d82:	bf00      	nop
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8a:	3350      	adds	r3, #80	@ 0x50
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f002 f80f 	bl	8003db0 <pvPortMalloc>
 8001d92:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00d      	beq.n	8001db6 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001d9a:	6a3b      	ldr	r3, [r7, #32]
 8001d9c:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3350      	adds	r3, #80	@ 0x50
 8001da2:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001da4:	79fa      	ldrb	r2, [r7, #7]
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	4613      	mov	r3, r2
 8001dac:	69fa      	ldr	r2, [r7, #28]
 8001dae:	68b9      	ldr	r1, [r7, #8]
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 f805 	bl	8001dc0 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001db6:	6a3b      	ldr	r3, [r7, #32]
    }
 8001db8:	4618      	mov	r0, r3
 8001dba:	3728      	adds	r7, #40	@ 0x28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
 8001dcc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d103      	bne.n	8001ddc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	e002      	b.n	8001de2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001dee:	2101      	movs	r1, #1
 8001df0:	69b8      	ldr	r0, [r7, #24]
 8001df2:	f7ff ff19 	bl	8001c28 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	78fa      	ldrb	r2, [r7, #3]
 8001dfa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08e      	sub	sp, #56	@ 0x38
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001e16:	2300      	movs	r3, #0
 8001e18:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8001e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d10b      	bne.n	8001e3c <xQueueGenericSend+0x34>
        __asm volatile
 8001e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e28:	f383 8811 	msr	BASEPRI, r3
 8001e2c:	f3bf 8f6f 	isb	sy
 8001e30:	f3bf 8f4f 	dsb	sy
 8001e34:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8001e36:	bf00      	nop
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d103      	bne.n	8001e4a <xQueueGenericSend+0x42>
 8001e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <xQueueGenericSend+0x46>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <xQueueGenericSend+0x48>
 8001e4e:	2300      	movs	r3, #0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10b      	bne.n	8001e6c <xQueueGenericSend+0x64>
        __asm volatile
 8001e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e58:	f383 8811 	msr	BASEPRI, r3
 8001e5c:	f3bf 8f6f 	isb	sy
 8001e60:	f3bf 8f4f 	dsb	sy
 8001e64:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8001e66:	bf00      	nop
 8001e68:	bf00      	nop
 8001e6a:	e7fd      	b.n	8001e68 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d103      	bne.n	8001e7a <xQueueGenericSend+0x72>
 8001e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d101      	bne.n	8001e7e <xQueueGenericSend+0x76>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <xQueueGenericSend+0x78>
 8001e7e:	2300      	movs	r3, #0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10b      	bne.n	8001e9c <xQueueGenericSend+0x94>
        __asm volatile
 8001e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e88:	f383 8811 	msr	BASEPRI, r3
 8001e8c:	f3bf 8f6f 	isb	sy
 8001e90:	f3bf 8f4f 	dsb	sy
 8001e94:	623b      	str	r3, [r7, #32]
    }
 8001e96:	bf00      	nop
 8001e98:	bf00      	nop
 8001e9a:	e7fd      	b.n	8001e98 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e9c:	f001 f910 	bl	80030c0 <xTaskGetSchedulerState>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d102      	bne.n	8001eac <xQueueGenericSend+0xa4>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <xQueueGenericSend+0xa8>
 8001eac:	2301      	movs	r3, #1
 8001eae:	e000      	b.n	8001eb2 <xQueueGenericSend+0xaa>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10b      	bne.n	8001ece <xQueueGenericSend+0xc6>
        __asm volatile
 8001eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001eba:	f383 8811 	msr	BASEPRI, r3
 8001ebe:	f3bf 8f6f 	isb	sy
 8001ec2:	f3bf 8f4f 	dsb	sy
 8001ec6:	61fb      	str	r3, [r7, #28]
    }
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	e7fd      	b.n	8001eca <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001ece:	f001 fe45 	bl	8003b5c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ed4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d302      	bcc.n	8001ee4 <xQueueGenericSend+0xdc>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d129      	bne.n	8001f38 <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001eea:	f000 fa1f 	bl	800232c <prvCopyDataToQueue>
 8001eee:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d010      	beq.n	8001f1a <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001efa:	3324      	adds	r3, #36	@ 0x24
 8001efc:	4618      	mov	r0, r3
 8001efe:	f000 ff3f 	bl	8002d80 <xTaskRemoveFromEventList>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d013      	beq.n	8001f30 <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8001f08:	4b3f      	ldr	r3, [pc, #252]	@ (8002008 <xQueueGenericSend+0x200>)
 8001f0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	f3bf 8f4f 	dsb	sy
 8001f14:	f3bf 8f6f 	isb	sy
 8001f18:	e00a      	b.n	8001f30 <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8001f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d007      	beq.n	8001f30 <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001f20:	4b39      	ldr	r3, [pc, #228]	@ (8002008 <xQueueGenericSend+0x200>)
 8001f22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	f3bf 8f4f 	dsb	sy
 8001f2c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001f30:	f001 fe46 	bl	8003bc0 <vPortExitCritical>
                return pdPASS;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e063      	b.n	8002000 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d103      	bne.n	8001f46 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001f3e:	f001 fe3f 	bl	8003bc0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e05c      	b.n	8002000 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d106      	bne.n	8001f5a <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 ff79 	bl	8002e48 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001f56:	2301      	movs	r3, #1
 8001f58:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001f5a:	f001 fe31 	bl	8003bc0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001f5e:	f000 fceb 	bl	8002938 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001f62:	f001 fdfb 	bl	8003b5c <vPortEnterCritical>
 8001f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001f6c:	b25b      	sxtb	r3, r3
 8001f6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f72:	d103      	bne.n	8001f7c <xQueueGenericSend+0x174>
 8001f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001f82:	b25b      	sxtb	r3, r3
 8001f84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f88:	d103      	bne.n	8001f92 <xQueueGenericSend+0x18a>
 8001f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001f92:	f001 fe15 	bl	8003bc0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f96:	1d3a      	adds	r2, r7, #4
 8001f98:	f107 0314 	add.w	r3, r7, #20
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 ff68 	bl	8002e74 <xTaskCheckForTimeOut>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d124      	bne.n	8001ff4 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001faa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001fac:	f000 fab6 	bl	800251c <prvIsQueueFull>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d018      	beq.n	8001fe8 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fb8:	3310      	adds	r3, #16
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 fe8c 	bl	8002cdc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001fc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001fc6:	f000 fa41 	bl	800244c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001fca:	f000 fcc3 	bl	8002954 <xTaskResumeAll>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f47f af7c 	bne.w	8001ece <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8001fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8002008 <xQueueGenericSend+0x200>)
 8001fd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	f3bf 8f4f 	dsb	sy
 8001fe2:	f3bf 8f6f 	isb	sy
 8001fe6:	e772      	b.n	8001ece <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001fe8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001fea:	f000 fa2f 	bl	800244c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001fee:	f000 fcb1 	bl	8002954 <xTaskResumeAll>
 8001ff2:	e76c      	b.n	8001ece <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001ff4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001ff6:	f000 fa29 	bl	800244c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001ffa:	f000 fcab 	bl	8002954 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8001ffe:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002000:	4618      	mov	r0, r3
 8002002:	3738      	adds	r7, #56	@ 0x38
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	e000ed04 	.word	0xe000ed04

0800200c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b090      	sub	sp, #64	@ 0x40
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
 8002018:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 800201e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10b      	bne.n	800203c <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8002024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002028:	f383 8811 	msr	BASEPRI, r3
 800202c:	f3bf 8f6f 	isb	sy
 8002030:	f3bf 8f4f 	dsb	sy
 8002034:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8002036:	bf00      	nop
 8002038:	bf00      	nop
 800203a:	e7fd      	b.n	8002038 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d103      	bne.n	800204a <xQueueGenericSendFromISR+0x3e>
 8002042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <xQueueGenericSendFromISR+0x42>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <xQueueGenericSendFromISR+0x44>
 800204e:	2300      	movs	r3, #0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10b      	bne.n	800206c <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8002054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002058:	f383 8811 	msr	BASEPRI, r3
 800205c:	f3bf 8f6f 	isb	sy
 8002060:	f3bf 8f4f 	dsb	sy
 8002064:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8002066:	bf00      	nop
 8002068:	bf00      	nop
 800206a:	e7fd      	b.n	8002068 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d103      	bne.n	800207a <xQueueGenericSendFromISR+0x6e>
 8002072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002076:	2b01      	cmp	r3, #1
 8002078:	d101      	bne.n	800207e <xQueueGenericSendFromISR+0x72>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <xQueueGenericSendFromISR+0x74>
 800207e:	2300      	movs	r3, #0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10b      	bne.n	800209c <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8002084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002088:	f383 8811 	msr	BASEPRI, r3
 800208c:	f3bf 8f6f 	isb	sy
 8002090:	f3bf 8f4f 	dsb	sy
 8002094:	623b      	str	r3, [r7, #32]
    }
 8002096:	bf00      	nop
 8002098:	bf00      	nop
 800209a:	e7fd      	b.n	8002098 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800209c:	f001 fe46 	bl	8003d2c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80020a0:	f3ef 8211 	mrs	r2, BASEPRI
 80020a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020a8:	f383 8811 	msr	BASEPRI, r3
 80020ac:	f3bf 8f6f 	isb	sy
 80020b0:	f3bf 8f4f 	dsb	sy
 80020b4:	61fa      	str	r2, [r7, #28]
 80020b6:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80020b8:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80020ba:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80020bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d302      	bcc.n	80020ce <xQueueGenericSendFromISR+0xc2>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d13f      	bne.n	800214e <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80020ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80020d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	68b9      	ldr	r1, [r7, #8]
 80020e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80020e4:	f000 f922 	bl	800232c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80020e8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80020ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020f0:	d112      	bne.n	8002118 <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80020f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d026      	beq.n	8002148 <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80020fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020fc:	3324      	adds	r3, #36	@ 0x24
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 fe3e 	bl	8002d80 <xTaskRemoveFromEventList>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d01e      	beq.n	8002148 <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d01b      	beq.n	8002148 <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	e017      	b.n	8002148 <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002118:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800211c:	2b7f      	cmp	r3, #127	@ 0x7f
 800211e:	d10b      	bne.n	8002138 <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 8002120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002124:	f383 8811 	msr	BASEPRI, r3
 8002128:	f3bf 8f6f 	isb	sy
 800212c:	f3bf 8f4f 	dsb	sy
 8002130:	617b      	str	r3, [r7, #20]
    }
 8002132:	bf00      	nop
 8002134:	bf00      	nop
 8002136:	e7fd      	b.n	8002134 <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002138:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800213c:	3301      	adds	r3, #1
 800213e:	b2db      	uxtb	r3, r3
 8002140:	b25a      	sxtb	r2, r3
 8002142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002144:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8002148:	2301      	movs	r3, #1
 800214a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 800214c:	e001      	b.n	8002152 <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800214e:	2300      	movs	r3, #0
 8002150:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002154:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800215c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800215e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002160:	4618      	mov	r0, r3
 8002162:	3740      	adds	r7, #64	@ 0x40
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08c      	sub	sp, #48	@ 0x30
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002174:	2300      	movs	r3, #0
 8002176:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800217c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10b      	bne.n	800219a <xQueueReceive+0x32>
        __asm volatile
 8002182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002186:	f383 8811 	msr	BASEPRI, r3
 800218a:	f3bf 8f6f 	isb	sy
 800218e:	f3bf 8f4f 	dsb	sy
 8002192:	623b      	str	r3, [r7, #32]
    }
 8002194:	bf00      	nop
 8002196:	bf00      	nop
 8002198:	e7fd      	b.n	8002196 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d103      	bne.n	80021a8 <xQueueReceive+0x40>
 80021a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <xQueueReceive+0x44>
 80021a8:	2301      	movs	r3, #1
 80021aa:	e000      	b.n	80021ae <xQueueReceive+0x46>
 80021ac:	2300      	movs	r3, #0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10b      	bne.n	80021ca <xQueueReceive+0x62>
        __asm volatile
 80021b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021b6:	f383 8811 	msr	BASEPRI, r3
 80021ba:	f3bf 8f6f 	isb	sy
 80021be:	f3bf 8f4f 	dsb	sy
 80021c2:	61fb      	str	r3, [r7, #28]
    }
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	e7fd      	b.n	80021c6 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80021ca:	f000 ff79 	bl	80030c0 <xTaskGetSchedulerState>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d102      	bne.n	80021da <xQueueReceive+0x72>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <xQueueReceive+0x76>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <xQueueReceive+0x78>
 80021de:	2300      	movs	r3, #0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d10b      	bne.n	80021fc <xQueueReceive+0x94>
        __asm volatile
 80021e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021e8:	f383 8811 	msr	BASEPRI, r3
 80021ec:	f3bf 8f6f 	isb	sy
 80021f0:	f3bf 8f4f 	dsb	sy
 80021f4:	61bb      	str	r3, [r7, #24]
    }
 80021f6:	bf00      	nop
 80021f8:	bf00      	nop
 80021fa:	e7fd      	b.n	80021f8 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80021fc:	f001 fcae 	bl	8003b5c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002204:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002208:	2b00      	cmp	r3, #0
 800220a:	d01f      	beq.n	800224c <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800220c:	68b9      	ldr	r1, [r7, #8]
 800220e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002210:	f000 f8f6 	bl	8002400 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002216:	1e5a      	subs	r2, r3, #1
 8002218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800221a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800221c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00f      	beq.n	8002244 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002226:	3310      	adds	r3, #16
 8002228:	4618      	mov	r0, r3
 800222a:	f000 fda9 	bl	8002d80 <xTaskRemoveFromEventList>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d007      	beq.n	8002244 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002234:	4b3c      	ldr	r3, [pc, #240]	@ (8002328 <xQueueReceive+0x1c0>)
 8002236:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	f3bf 8f4f 	dsb	sy
 8002240:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002244:	f001 fcbc 	bl	8003bc0 <vPortExitCritical>
                return pdPASS;
 8002248:	2301      	movs	r3, #1
 800224a:	e069      	b.n	8002320 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d103      	bne.n	800225a <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002252:	f001 fcb5 	bl	8003bc0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002256:	2300      	movs	r3, #0
 8002258:	e062      	b.n	8002320 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800225a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800225c:	2b00      	cmp	r3, #0
 800225e:	d106      	bne.n	800226e <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002260:	f107 0310 	add.w	r3, r7, #16
 8002264:	4618      	mov	r0, r3
 8002266:	f000 fdef 	bl	8002e48 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800226a:	2301      	movs	r3, #1
 800226c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800226e:	f001 fca7 	bl	8003bc0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002272:	f000 fb61 	bl	8002938 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002276:	f001 fc71 	bl	8003b5c <vPortEnterCritical>
 800227a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800227c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002280:	b25b      	sxtb	r3, r3
 8002282:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002286:	d103      	bne.n	8002290 <xQueueReceive+0x128>
 8002288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002292:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002296:	b25b      	sxtb	r3, r3
 8002298:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800229c:	d103      	bne.n	80022a6 <xQueueReceive+0x13e>
 800229e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80022a6:	f001 fc8b 	bl	8003bc0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80022aa:	1d3a      	adds	r2, r7, #4
 80022ac:	f107 0310 	add.w	r3, r7, #16
 80022b0:	4611      	mov	r1, r2
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 fdde 	bl	8002e74 <xTaskCheckForTimeOut>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d123      	bne.n	8002306 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80022be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022c0:	f000 f916 	bl	80024f0 <prvIsQueueEmpty>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d017      	beq.n	80022fa <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80022ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022cc:	3324      	adds	r3, #36	@ 0x24
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	4611      	mov	r1, r2
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 fd02 	bl	8002cdc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80022d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022da:	f000 f8b7 	bl	800244c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80022de:	f000 fb39 	bl	8002954 <xTaskResumeAll>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d189      	bne.n	80021fc <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 80022e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002328 <xQueueReceive+0x1c0>)
 80022ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	f3bf 8f4f 	dsb	sy
 80022f4:	f3bf 8f6f 	isb	sy
 80022f8:	e780      	b.n	80021fc <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80022fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022fc:	f000 f8a6 	bl	800244c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002300:	f000 fb28 	bl	8002954 <xTaskResumeAll>
 8002304:	e77a      	b.n	80021fc <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002306:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002308:	f000 f8a0 	bl	800244c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800230c:	f000 fb22 	bl	8002954 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002310:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002312:	f000 f8ed 	bl	80024f0 <prvIsQueueEmpty>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	f43f af6f 	beq.w	80021fc <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800231e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002320:	4618      	mov	r0, r3
 8002322:	3730      	adds	r7, #48	@ 0x30
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	e000ed04 	.word	0xe000ed04

0800232c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002340:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10d      	bne.n	8002366 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d14d      	bne.n	80023ee <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	4618      	mov	r0, r3
 8002358:	f000 fed0 	bl	80030fc <xTaskPriorityDisinherit>
 800235c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	e043      	b.n	80023ee <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d119      	bne.n	80023a0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6858      	ldr	r0, [r3, #4]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002374:	461a      	mov	r2, r3
 8002376:	68b9      	ldr	r1, [r7, #8]
 8002378:	f002 f8a9 	bl	80044ce <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002384:	441a      	add	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	429a      	cmp	r2, r3
 8002394:	d32b      	bcc.n	80023ee <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	e026      	b.n	80023ee <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	68d8      	ldr	r0, [r3, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a8:	461a      	mov	r2, r3
 80023aa:	68b9      	ldr	r1, [r7, #8]
 80023ac:	f002 f88f 	bl	80044ce <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b8:	425b      	negs	r3, r3
 80023ba:	441a      	add	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d207      	bcs.n	80023dc <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d4:	425b      	negs	r3, r3
 80023d6:	441a      	add	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d105      	bne.n	80023ee <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80023f6:	697b      	ldr	r3, [r7, #20]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	2b00      	cmp	r3, #0
 8002410:	d018      	beq.n	8002444 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68da      	ldr	r2, [r3, #12]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241a:	441a      	add	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	429a      	cmp	r2, r3
 800242a:	d303      	bcc.n	8002434 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68d9      	ldr	r1, [r3, #12]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243c:	461a      	mov	r2, r3
 800243e:	6838      	ldr	r0, [r7, #0]
 8002440:	f002 f845 	bl	80044ce <memcpy>
    }
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002454:	f001 fb82 	bl	8003b5c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800245e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002460:	e011      	b.n	8002486 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002466:	2b00      	cmp	r3, #0
 8002468:	d012      	beq.n	8002490 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3324      	adds	r3, #36	@ 0x24
 800246e:	4618      	mov	r0, r3
 8002470:	f000 fc86 	bl	8002d80 <xTaskRemoveFromEventList>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800247a:	f000 fd63 	bl	8002f44 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	3b01      	subs	r3, #1
 8002482:	b2db      	uxtb	r3, r3
 8002484:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800248a:	2b00      	cmp	r3, #0
 800248c:	dce9      	bgt.n	8002462 <prvUnlockQueue+0x16>
 800248e:	e000      	b.n	8002492 <prvUnlockQueue+0x46>
                        break;
 8002490:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	22ff      	movs	r2, #255	@ 0xff
 8002496:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800249a:	f001 fb91 	bl	8003bc0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800249e:	f001 fb5d 	bl	8003b5c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80024a8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80024aa:	e011      	b.n	80024d0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d012      	beq.n	80024da <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3310      	adds	r3, #16
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 fc61 	bl	8002d80 <xTaskRemoveFromEventList>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80024c4:	f000 fd3e 	bl	8002f44 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80024c8:	7bbb      	ldrb	r3, [r7, #14]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80024d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	dce9      	bgt.n	80024ac <prvUnlockQueue+0x60>
 80024d8:	e000      	b.n	80024dc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80024da:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	22ff      	movs	r2, #255	@ 0xff
 80024e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80024e4:	f001 fb6c 	bl	8003bc0 <vPortExitCritical>
}
 80024e8:	bf00      	nop
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80024f8:	f001 fb30 	bl	8003b5c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002500:	2b00      	cmp	r3, #0
 8002502:	d102      	bne.n	800250a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002504:	2301      	movs	r3, #1
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	e001      	b.n	800250e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800250a:	2300      	movs	r3, #0
 800250c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800250e:	f001 fb57 	bl	8003bc0 <vPortExitCritical>

    return xReturn;
 8002512:	68fb      	ldr	r3, [r7, #12]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002524:	f001 fb1a 	bl	8003b5c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002530:	429a      	cmp	r2, r3
 8002532:	d102      	bne.n	800253a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002534:	2301      	movs	r3, #1
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	e001      	b.n	800253e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800253e:	f001 fb3f 	bl	8003bc0 <vPortExitCritical>

    return xReturn;
 8002542:	68fb      	ldr	r3, [r7, #12]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	e014      	b.n	8002586 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800255c:	4a0f      	ldr	r2, [pc, #60]	@ (800259c <vQueueAddToRegistry+0x50>)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10b      	bne.n	8002580 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002568:	490c      	ldr	r1, [pc, #48]	@ (800259c <vQueueAddToRegistry+0x50>)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002572:	4a0a      	ldr	r2, [pc, #40]	@ (800259c <vQueueAddToRegistry+0x50>)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	4413      	add	r3, r2
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800257e:	e006      	b.n	800258e <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	3301      	adds	r3, #1
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2b07      	cmp	r3, #7
 800258a:	d9e7      	bls.n	800255c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800258c:	bf00      	nop
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	200000d8 	.word	0x200000d8

080025a0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80025b0:	f001 fad4 	bl	8003b5c <vPortEnterCritical>
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80025ba:	b25b      	sxtb	r3, r3
 80025bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025c0:	d103      	bne.n	80025ca <vQueueWaitForMessageRestricted+0x2a>
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80025d0:	b25b      	sxtb	r3, r3
 80025d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025d6:	d103      	bne.n	80025e0 <vQueueWaitForMessageRestricted+0x40>
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80025e0:	f001 faee 	bl	8003bc0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d106      	bne.n	80025fa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	3324      	adds	r3, #36	@ 0x24
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	68b9      	ldr	r1, [r7, #8]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 fb97 	bl	8002d28 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80025fa:	6978      	ldr	r0, [r7, #20]
 80025fc:	f7ff ff26 	bl	800244c <prvUnlockQueue>
    }
 8002600:	bf00      	nop
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002608:	b580      	push	{r7, lr}
 800260a:	b08c      	sub	sp, #48	@ 0x30
 800260c:	af04      	add	r7, sp, #16
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	603b      	str	r3, [r7, #0]
 8002614:	4613      	mov	r3, r2
 8002616:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002618:	88fb      	ldrh	r3, [r7, #6]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4618      	mov	r0, r3
 800261e:	f001 fbc7 	bl	8003db0 <pvPortMalloc>
 8002622:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00e      	beq.n	8002648 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800262a:	2058      	movs	r0, #88	@ 0x58
 800262c:	f001 fbc0 	bl	8003db0 <pvPortMalloc>
 8002630:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	631a      	str	r2, [r3, #48]	@ 0x30
 800263e:	e005      	b.n	800264c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002640:	6978      	ldr	r0, [r7, #20]
 8002642:	f001 fc97 	bl	8003f74 <vPortFree>
 8002646:	e001      	b.n	800264c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002648:	2300      	movs	r3, #0
 800264a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d013      	beq.n	800267a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002652:	88fa      	ldrh	r2, [r7, #6]
 8002654:	2300      	movs	r3, #0
 8002656:	9303      	str	r3, [sp, #12]
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	9302      	str	r3, [sp, #8]
 800265c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800265e:	9301      	str	r3, [sp, #4]
 8002660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	68b9      	ldr	r1, [r7, #8]
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 f80e 	bl	800268a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800266e:	69f8      	ldr	r0, [r7, #28]
 8002670:	f000 f8a2 	bl	80027b8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002674:	2301      	movs	r3, #1
 8002676:	61bb      	str	r3, [r7, #24]
 8002678:	e002      	b.n	8002680 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800267a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800267e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002680:	69bb      	ldr	r3, [r7, #24]
    }
 8002682:	4618      	mov	r0, r3
 8002684:	3720      	adds	r7, #32
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b088      	sub	sp, #32
 800268e:	af00      	add	r7, sp, #0
 8002690:	60f8      	str	r0, [r7, #12]
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
 8002696:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800269a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	461a      	mov	r2, r3
 80026a2:	21a5      	movs	r1, #165	@ 0xa5
 80026a4:	f001 fe9d 	bl	80043e2 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80026a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80026b2:	3b01      	subs	r3, #1
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	f023 0307 	bic.w	r3, r3, #7
 80026c0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00b      	beq.n	80026e4 <prvInitialiseNewTask+0x5a>
        __asm volatile
 80026cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026d0:	f383 8811 	msr	BASEPRI, r3
 80026d4:	f3bf 8f6f 	isb	sy
 80026d8:	f3bf 8f4f 	dsb	sy
 80026dc:	617b      	str	r3, [r7, #20]
    }
 80026de:	bf00      	nop
 80026e0:	bf00      	nop
 80026e2:	e7fd      	b.n	80026e0 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d01f      	beq.n	800272a <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
 80026ee:	e012      	b.n	8002716 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	4413      	add	r3, r2
 80026f6:	7819      	ldrb	r1, [r3, #0]
 80026f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	4413      	add	r3, r2
 80026fe:	3334      	adds	r3, #52	@ 0x34
 8002700:	460a      	mov	r2, r1
 8002702:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	4413      	add	r3, r2
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d006      	beq.n	800271e <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	3301      	adds	r3, #1
 8002714:	61fb      	str	r3, [r7, #28]
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	2b09      	cmp	r3, #9
 800271a:	d9e9      	bls.n	80026f0 <prvInitialiseNewTask+0x66>
 800271c:	e000      	b.n	8002720 <prvInitialiseNewTask+0x96>
            {
                break;
 800271e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002728:	e003      	b.n	8002732 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800272a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002734:	2b04      	cmp	r3, #4
 8002736:	d901      	bls.n	800273c <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002738:	2304      	movs	r3, #4
 800273a:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800273c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800273e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002740:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002744:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002746:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800274a:	2200      	movs	r2, #0
 800274c:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800274e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002750:	3304      	adds	r3, #4
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff f9d4 	bl	8001b00 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800275a:	3318      	adds	r3, #24
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff f9cf 	bl	8001b00 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002764:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002766:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800276a:	f1c3 0205 	rsb	r2, r3, #5
 800276e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002770:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002774:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002776:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800277a:	3350      	adds	r3, #80	@ 0x50
 800277c:	2204      	movs	r2, #4
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f001 fe2e 	bl	80043e2 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002788:	3354      	adds	r3, #84	@ 0x54
 800278a:	2201      	movs	r2, #1
 800278c:	2100      	movs	r1, #0
 800278e:	4618      	mov	r0, r3
 8002790:	f001 fe27 	bl	80043e2 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	68f9      	ldr	r1, [r7, #12]
 8002798:	69b8      	ldr	r0, [r7, #24]
 800279a:	f001 f8af 	bl	80038fc <pxPortInitialiseStack>
 800279e:	4602      	mov	r2, r0
 80027a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a2:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80027a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80027aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027ae:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80027b0:	bf00      	nop
 80027b2:	3720      	adds	r7, #32
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80027c0:	f001 f9cc 	bl	8003b5c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80027c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002878 <prvAddNewTaskToReadyList+0xc0>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	3301      	adds	r3, #1
 80027ca:	4a2b      	ldr	r2, [pc, #172]	@ (8002878 <prvAddNewTaskToReadyList+0xc0>)
 80027cc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80027ce:	4b2b      	ldr	r3, [pc, #172]	@ (800287c <prvAddNewTaskToReadyList+0xc4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d109      	bne.n	80027ea <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80027d6:	4a29      	ldr	r2, [pc, #164]	@ (800287c <prvAddNewTaskToReadyList+0xc4>)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80027dc:	4b26      	ldr	r3, [pc, #152]	@ (8002878 <prvAddNewTaskToReadyList+0xc0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d110      	bne.n	8002806 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80027e4:	f000 fbd2 	bl	8002f8c <prvInitialiseTaskLists>
 80027e8:	e00d      	b.n	8002806 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80027ea:	4b25      	ldr	r3, [pc, #148]	@ (8002880 <prvAddNewTaskToReadyList+0xc8>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d109      	bne.n	8002806 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80027f2:	4b22      	ldr	r3, [pc, #136]	@ (800287c <prvAddNewTaskToReadyList+0xc4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d802      	bhi.n	8002806 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002800:	4a1e      	ldr	r2, [pc, #120]	@ (800287c <prvAddNewTaskToReadyList+0xc4>)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002806:	4b1f      	ldr	r3, [pc, #124]	@ (8002884 <prvAddNewTaskToReadyList+0xcc>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	3301      	adds	r3, #1
 800280c:	4a1d      	ldr	r2, [pc, #116]	@ (8002884 <prvAddNewTaskToReadyList+0xcc>)
 800280e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002810:	4b1c      	ldr	r3, [pc, #112]	@ (8002884 <prvAddNewTaskToReadyList+0xcc>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800281c:	2201      	movs	r2, #1
 800281e:	409a      	lsls	r2, r3
 8002820:	4b19      	ldr	r3, [pc, #100]	@ (8002888 <prvAddNewTaskToReadyList+0xd0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4313      	orrs	r3, r2
 8002826:	4a18      	ldr	r2, [pc, #96]	@ (8002888 <prvAddNewTaskToReadyList+0xd0>)
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4a15      	ldr	r2, [pc, #84]	@ (800288c <prvAddNewTaskToReadyList+0xd4>)
 8002838:	441a      	add	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3304      	adds	r3, #4
 800283e:	4619      	mov	r1, r3
 8002840:	4610      	mov	r0, r2
 8002842:	f7ff f96a 	bl	8001b1a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002846:	f001 f9bb 	bl	8003bc0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800284a:	4b0d      	ldr	r3, [pc, #52]	@ (8002880 <prvAddNewTaskToReadyList+0xc8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00e      	beq.n	8002870 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002852:	4b0a      	ldr	r3, [pc, #40]	@ (800287c <prvAddNewTaskToReadyList+0xc4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285c:	429a      	cmp	r2, r3
 800285e:	d207      	bcs.n	8002870 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002860:	4b0b      	ldr	r3, [pc, #44]	@ (8002890 <prvAddNewTaskToReadyList+0xd8>)
 8002862:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	f3bf 8f4f 	dsb	sy
 800286c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	200001f0 	.word	0x200001f0
 800287c:	20000118 	.word	0x20000118
 8002880:	200001fc 	.word	0x200001fc
 8002884:	2000020c 	.word	0x2000020c
 8002888:	200001f8 	.word	0x200001f8
 800288c:	2000011c 	.word	0x2000011c
 8002890:	e000ed04 	.word	0xe000ed04

08002894 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800289a:	4b20      	ldr	r3, [pc, #128]	@ (800291c <vTaskStartScheduler+0x88>)
 800289c:	9301      	str	r3, [sp, #4]
 800289e:	2300      	movs	r3, #0
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	2300      	movs	r3, #0
 80028a4:	2282      	movs	r2, #130	@ 0x82
 80028a6:	491e      	ldr	r1, [pc, #120]	@ (8002920 <vTaskStartScheduler+0x8c>)
 80028a8:	481e      	ldr	r0, [pc, #120]	@ (8002924 <vTaskStartScheduler+0x90>)
 80028aa:	f7ff fead 	bl	8002608 <xTaskCreate>
 80028ae:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d102      	bne.n	80028bc <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80028b6:	f000 fd03 	bl	80032c0 <xTimerCreateTimerTask>
 80028ba:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d116      	bne.n	80028f0 <vTaskStartScheduler+0x5c>
        __asm volatile
 80028c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028c6:	f383 8811 	msr	BASEPRI, r3
 80028ca:	f3bf 8f6f 	isb	sy
 80028ce:	f3bf 8f4f 	dsb	sy
 80028d2:	60bb      	str	r3, [r7, #8]
    }
 80028d4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80028d6:	4b14      	ldr	r3, [pc, #80]	@ (8002928 <vTaskStartScheduler+0x94>)
 80028d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80028dc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80028de:	4b13      	ldr	r3, [pc, #76]	@ (800292c <vTaskStartScheduler+0x98>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80028e4:	4b12      	ldr	r3, [pc, #72]	@ (8002930 <vTaskStartScheduler+0x9c>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80028ea:	f001 f893 	bl	8003a14 <xPortStartScheduler>
 80028ee:	e00f      	b.n	8002910 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028f6:	d10b      	bne.n	8002910 <vTaskStartScheduler+0x7c>
        __asm volatile
 80028f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028fc:	f383 8811 	msr	BASEPRI, r3
 8002900:	f3bf 8f6f 	isb	sy
 8002904:	f3bf 8f4f 	dsb	sy
 8002908:	607b      	str	r3, [r7, #4]
    }
 800290a:	bf00      	nop
 800290c:	bf00      	nop
 800290e:	e7fd      	b.n	800290c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002910:	4b08      	ldr	r3, [pc, #32]	@ (8002934 <vTaskStartScheduler+0xa0>)
 8002912:	681b      	ldr	r3, [r3, #0]
}
 8002914:	bf00      	nop
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20000214 	.word	0x20000214
 8002920:	08005084 	.word	0x08005084
 8002924:	08002f5d 	.word	0x08002f5d
 8002928:	20000210 	.word	0x20000210
 800292c:	200001fc 	.word	0x200001fc
 8002930:	200001f4 	.word	0x200001f4
 8002934:	2000000c 	.word	0x2000000c

08002938 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800293c:	4b04      	ldr	r3, [pc, #16]	@ (8002950 <vTaskSuspendAll+0x18>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	3301      	adds	r3, #1
 8002942:	4a03      	ldr	r2, [pc, #12]	@ (8002950 <vTaskSuspendAll+0x18>)
 8002944:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002946:	bf00      	nop
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	20000218 	.word	0x20000218

08002954 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800295a:	2300      	movs	r3, #0
 800295c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800295e:	2300      	movs	r3, #0
 8002960:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002962:	4b42      	ldr	r3, [pc, #264]	@ (8002a6c <xTaskResumeAll+0x118>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10b      	bne.n	8002982 <xTaskResumeAll+0x2e>
        __asm volatile
 800296a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800296e:	f383 8811 	msr	BASEPRI, r3
 8002972:	f3bf 8f6f 	isb	sy
 8002976:	f3bf 8f4f 	dsb	sy
 800297a:	603b      	str	r3, [r7, #0]
    }
 800297c:	bf00      	nop
 800297e:	bf00      	nop
 8002980:	e7fd      	b.n	800297e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002982:	f001 f8eb 	bl	8003b5c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002986:	4b39      	ldr	r3, [pc, #228]	@ (8002a6c <xTaskResumeAll+0x118>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	3b01      	subs	r3, #1
 800298c:	4a37      	ldr	r2, [pc, #220]	@ (8002a6c <xTaskResumeAll+0x118>)
 800298e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002990:	4b36      	ldr	r3, [pc, #216]	@ (8002a6c <xTaskResumeAll+0x118>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d161      	bne.n	8002a5c <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002998:	4b35      	ldr	r3, [pc, #212]	@ (8002a70 <xTaskResumeAll+0x11c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d05d      	beq.n	8002a5c <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029a0:	e02e      	b.n	8002a00 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029a2:	4b34      	ldr	r3, [pc, #208]	@ (8002a74 <xTaskResumeAll+0x120>)
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	3318      	adds	r3, #24
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff f910 	bl	8001bd4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	3304      	adds	r3, #4
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff f90b 	bl	8001bd4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c2:	2201      	movs	r2, #1
 80029c4:	409a      	lsls	r2, r3
 80029c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002a78 <xTaskResumeAll+0x124>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	4a2a      	ldr	r2, [pc, #168]	@ (8002a78 <xTaskResumeAll+0x124>)
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4a27      	ldr	r2, [pc, #156]	@ (8002a7c <xTaskResumeAll+0x128>)
 80029de:	441a      	add	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3304      	adds	r3, #4
 80029e4:	4619      	mov	r1, r3
 80029e6:	4610      	mov	r0, r2
 80029e8:	f7ff f897 	bl	8001b1a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029f0:	4b23      	ldr	r3, [pc, #140]	@ (8002a80 <xTaskResumeAll+0x12c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d302      	bcc.n	8002a00 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 80029fa:	4b22      	ldr	r3, [pc, #136]	@ (8002a84 <xTaskResumeAll+0x130>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a00:	4b1c      	ldr	r3, [pc, #112]	@ (8002a74 <xTaskResumeAll+0x120>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1cc      	bne.n	80029a2 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002a0e:	f000 fb3b 	bl	8003088 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002a12:	4b1d      	ldr	r3, [pc, #116]	@ (8002a88 <xTaskResumeAll+0x134>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d010      	beq.n	8002a40 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002a1e:	f000 f847 	bl	8002ab0 <xTaskIncrementTick>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 8002a28:	4b16      	ldr	r3, [pc, #88]	@ (8002a84 <xTaskResumeAll+0x130>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3b01      	subs	r3, #1
 8002a32:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f1      	bne.n	8002a1e <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 8002a3a:	4b13      	ldr	r3, [pc, #76]	@ (8002a88 <xTaskResumeAll+0x134>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002a40:	4b10      	ldr	r3, [pc, #64]	@ (8002a84 <xTaskResumeAll+0x130>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d009      	beq.n	8002a5c <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a8c <xTaskResumeAll+0x138>)
 8002a4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	f3bf 8f4f 	dsb	sy
 8002a58:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002a5c:	f001 f8b0 	bl	8003bc0 <vPortExitCritical>

    return xAlreadyYielded;
 8002a60:	68bb      	ldr	r3, [r7, #8]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000218 	.word	0x20000218
 8002a70:	200001f0 	.word	0x200001f0
 8002a74:	200001b0 	.word	0x200001b0
 8002a78:	200001f8 	.word	0x200001f8
 8002a7c:	2000011c 	.word	0x2000011c
 8002a80:	20000118 	.word	0x20000118
 8002a84:	20000204 	.word	0x20000204
 8002a88:	20000200 	.word	0x20000200
 8002a8c:	e000ed04 	.word	0xe000ed04

08002a90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002a96:	4b05      	ldr	r3, [pc, #20]	@ (8002aac <xTaskGetTickCount+0x1c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002a9c:	687b      	ldr	r3, [r7, #4]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	200001f4 	.word	0x200001f4

08002ab0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002aba:	4b4f      	ldr	r3, [pc, #316]	@ (8002bf8 <xTaskIncrementTick+0x148>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f040 808f 	bne.w	8002be2 <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ac4:	4b4d      	ldr	r3, [pc, #308]	@ (8002bfc <xTaskIncrementTick+0x14c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002acc:	4a4b      	ldr	r2, [pc, #300]	@ (8002bfc <xTaskIncrementTick+0x14c>)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d121      	bne.n	8002b1c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002ad8:	4b49      	ldr	r3, [pc, #292]	@ (8002c00 <xTaskIncrementTick+0x150>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00b      	beq.n	8002afa <xTaskIncrementTick+0x4a>
        __asm volatile
 8002ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ae6:	f383 8811 	msr	BASEPRI, r3
 8002aea:	f3bf 8f6f 	isb	sy
 8002aee:	f3bf 8f4f 	dsb	sy
 8002af2:	603b      	str	r3, [r7, #0]
    }
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	e7fd      	b.n	8002af6 <xTaskIncrementTick+0x46>
 8002afa:	4b41      	ldr	r3, [pc, #260]	@ (8002c00 <xTaskIncrementTick+0x150>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	4b40      	ldr	r3, [pc, #256]	@ (8002c04 <xTaskIncrementTick+0x154>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a3e      	ldr	r2, [pc, #248]	@ (8002c00 <xTaskIncrementTick+0x150>)
 8002b06:	6013      	str	r3, [r2, #0]
 8002b08:	4a3e      	ldr	r2, [pc, #248]	@ (8002c04 <xTaskIncrementTick+0x154>)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c08 <xTaskIncrementTick+0x158>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	3301      	adds	r3, #1
 8002b14:	4a3c      	ldr	r2, [pc, #240]	@ (8002c08 <xTaskIncrementTick+0x158>)
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	f000 fab6 	bl	8003088 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002b1c:	4b3b      	ldr	r3, [pc, #236]	@ (8002c0c <xTaskIncrementTick+0x15c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d348      	bcc.n	8002bb8 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b26:	4b36      	ldr	r3, [pc, #216]	@ (8002c00 <xTaskIncrementTick+0x150>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d104      	bne.n	8002b3a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b30:	4b36      	ldr	r3, [pc, #216]	@ (8002c0c <xTaskIncrementTick+0x15c>)
 8002b32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b36:	601a      	str	r2, [r3, #0]
                    break;
 8002b38:	e03e      	b.n	8002bb8 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b3a:	4b31      	ldr	r3, [pc, #196]	@ (8002c00 <xTaskIncrementTick+0x150>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d203      	bcs.n	8002b5a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002b52:	4a2e      	ldr	r2, [pc, #184]	@ (8002c0c <xTaskIncrementTick+0x15c>)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002b58:	e02e      	b.n	8002bb8 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff f838 	bl	8001bd4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d004      	beq.n	8002b76 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	3318      	adds	r3, #24
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff f82f 	bl	8001bd4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	4b24      	ldr	r3, [pc, #144]	@ (8002c10 <xTaskIncrementTick+0x160>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	4a22      	ldr	r2, [pc, #136]	@ (8002c10 <xTaskIncrementTick+0x160>)
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4a1f      	ldr	r2, [pc, #124]	@ (8002c14 <xTaskIncrementTick+0x164>)
 8002b96:	441a      	add	r2, r3
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	f7fe ffbb 	bl	8001b1a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c18 <xTaskIncrementTick+0x168>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d3b9      	bcc.n	8002b26 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bb6:	e7b6      	b.n	8002b26 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002bb8:	4b17      	ldr	r3, [pc, #92]	@ (8002c18 <xTaskIncrementTick+0x168>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bbe:	4915      	ldr	r1, [pc, #84]	@ (8002c14 <xTaskIncrementTick+0x164>)
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d901      	bls.n	8002bd4 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002bd4:	4b11      	ldr	r3, [pc, #68]	@ (8002c1c <xTaskIncrementTick+0x16c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d007      	beq.n	8002bec <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	e004      	b.n	8002bec <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002be2:	4b0f      	ldr	r3, [pc, #60]	@ (8002c20 <xTaskIncrementTick+0x170>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	3301      	adds	r3, #1
 8002be8:	4a0d      	ldr	r2, [pc, #52]	@ (8002c20 <xTaskIncrementTick+0x170>)
 8002bea:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002bec:	697b      	ldr	r3, [r7, #20]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20000218 	.word	0x20000218
 8002bfc:	200001f4 	.word	0x200001f4
 8002c00:	200001a8 	.word	0x200001a8
 8002c04:	200001ac 	.word	0x200001ac
 8002c08:	20000208 	.word	0x20000208
 8002c0c:	20000210 	.word	0x20000210
 8002c10:	200001f8 	.word	0x200001f8
 8002c14:	2000011c 	.word	0x2000011c
 8002c18:	20000118 	.word	0x20000118
 8002c1c:	20000204 	.word	0x20000204
 8002c20:	20000200 	.word	0x20000200

08002c24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c2a:	4b27      	ldr	r3, [pc, #156]	@ (8002cc8 <vTaskSwitchContext+0xa4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002c32:	4b26      	ldr	r3, [pc, #152]	@ (8002ccc <vTaskSwitchContext+0xa8>)
 8002c34:	2201      	movs	r2, #1
 8002c36:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002c38:	e040      	b.n	8002cbc <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8002c3a:	4b24      	ldr	r3, [pc, #144]	@ (8002ccc <vTaskSwitchContext+0xa8>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c40:	4b23      	ldr	r3, [pc, #140]	@ (8002cd0 <vTaskSwitchContext+0xac>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	fab3 f383 	clz	r3, r3
 8002c4c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002c4e:	7afb      	ldrb	r3, [r7, #11]
 8002c50:	f1c3 031f 	rsb	r3, r3, #31
 8002c54:	617b      	str	r3, [r7, #20]
 8002c56:	491f      	ldr	r1, [pc, #124]	@ (8002cd4 <vTaskSwitchContext+0xb0>)
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10b      	bne.n	8002c82 <vTaskSwitchContext+0x5e>
        __asm volatile
 8002c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c6e:	f383 8811 	msr	BASEPRI, r3
 8002c72:	f3bf 8f6f 	isb	sy
 8002c76:	f3bf 8f4f 	dsb	sy
 8002c7a:	607b      	str	r3, [r7, #4]
    }
 8002c7c:	bf00      	nop
 8002c7e:	bf00      	nop
 8002c80:	e7fd      	b.n	8002c7e <vTaskSwitchContext+0x5a>
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4a11      	ldr	r2, [pc, #68]	@ (8002cd4 <vTaskSwitchContext+0xb0>)
 8002c8e:	4413      	add	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	605a      	str	r2, [r3, #4]
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	3308      	adds	r3, #8
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d104      	bne.n	8002cb2 <vTaskSwitchContext+0x8e>
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	4a07      	ldr	r2, [pc, #28]	@ (8002cd8 <vTaskSwitchContext+0xb4>)
 8002cba:	6013      	str	r3, [r2, #0]
}
 8002cbc:	bf00      	nop
 8002cbe:	371c      	adds	r7, #28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	20000218 	.word	0x20000218
 8002ccc:	20000204 	.word	0x20000204
 8002cd0:	200001f8 	.word	0x200001f8
 8002cd4:	2000011c 	.word	0x2000011c
 8002cd8:	20000118 	.word	0x20000118

08002cdc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10b      	bne.n	8002d04 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8002cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf0:	f383 8811 	msr	BASEPRI, r3
 8002cf4:	f3bf 8f6f 	isb	sy
 8002cf8:	f3bf 8f4f 	dsb	sy
 8002cfc:	60fb      	str	r3, [r7, #12]
    }
 8002cfe:	bf00      	nop
 8002d00:	bf00      	nop
 8002d02:	e7fd      	b.n	8002d00 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d04:	4b07      	ldr	r3, [pc, #28]	@ (8002d24 <vTaskPlaceOnEventList+0x48>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	3318      	adds	r3, #24
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7fe ff28 	bl	8001b62 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002d12:	2101      	movs	r1, #1
 8002d14:	6838      	ldr	r0, [r7, #0]
 8002d16:	f000 fa6d 	bl	80031f4 <prvAddCurrentTaskToDelayedList>
}
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000118 	.word	0x20000118

08002d28 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10b      	bne.n	8002d52 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8002d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d3e:	f383 8811 	msr	BASEPRI, r3
 8002d42:	f3bf 8f6f 	isb	sy
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	617b      	str	r3, [r7, #20]
    }
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	e7fd      	b.n	8002d4e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d52:	4b0a      	ldr	r3, [pc, #40]	@ (8002d7c <vTaskPlaceOnEventListRestricted+0x54>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	3318      	adds	r3, #24
 8002d58:	4619      	mov	r1, r3
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f7fe fedd 	bl	8001b1a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d002      	beq.n	8002d6c <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 8002d66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d6a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	68b8      	ldr	r0, [r7, #8]
 8002d70:	f000 fa40 	bl	80031f4 <prvAddCurrentTaskToDelayedList>
    }
 8002d74:	bf00      	nop
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	20000118 	.word	0x20000118

08002d80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10b      	bne.n	8002dae <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8002d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d9a:	f383 8811 	msr	BASEPRI, r3
 8002d9e:	f3bf 8f6f 	isb	sy
 8002da2:	f3bf 8f4f 	dsb	sy
 8002da6:	60fb      	str	r3, [r7, #12]
    }
 8002da8:	bf00      	nop
 8002daa:	bf00      	nop
 8002dac:	e7fd      	b.n	8002daa <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	3318      	adds	r3, #24
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fe ff0e 	bl	8001bd4 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002db8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e30 <xTaskRemoveFromEventList+0xb0>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d11c      	bne.n	8002dfa <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fe ff05 	bl	8001bd4 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dce:	2201      	movs	r2, #1
 8002dd0:	409a      	lsls	r2, r3
 8002dd2:	4b18      	ldr	r3, [pc, #96]	@ (8002e34 <xTaskRemoveFromEventList+0xb4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	4a16      	ldr	r2, [pc, #88]	@ (8002e34 <xTaskRemoveFromEventList+0xb4>)
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4a13      	ldr	r2, [pc, #76]	@ (8002e38 <xTaskRemoveFromEventList+0xb8>)
 8002dea:	441a      	add	r2, r3
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	3304      	adds	r3, #4
 8002df0:	4619      	mov	r1, r3
 8002df2:	4610      	mov	r0, r2
 8002df4:	f7fe fe91 	bl	8001b1a <vListInsertEnd>
 8002df8:	e005      	b.n	8002e06 <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	3318      	adds	r3, #24
 8002dfe:	4619      	mov	r1, r3
 8002e00:	480e      	ldr	r0, [pc, #56]	@ (8002e3c <xTaskRemoveFromEventList+0xbc>)
 8002e02:	f7fe fe8a 	bl	8001b1a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e40 <xTaskRemoveFromEventList+0xc0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d905      	bls.n	8002e20 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002e14:	2301      	movs	r3, #1
 8002e16:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002e18:	4b0a      	ldr	r3, [pc, #40]	@ (8002e44 <xTaskRemoveFromEventList+0xc4>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	e001      	b.n	8002e24 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8002e24:	697b      	ldr	r3, [r7, #20]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000218 	.word	0x20000218
 8002e34:	200001f8 	.word	0x200001f8
 8002e38:	2000011c 	.word	0x2000011c
 8002e3c:	200001b0 	.word	0x200001b0
 8002e40:	20000118 	.word	0x20000118
 8002e44:	20000204 	.word	0x20000204

08002e48 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002e50:	4b06      	ldr	r3, [pc, #24]	@ (8002e6c <vTaskInternalSetTimeOutState+0x24>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002e58:	4b05      	ldr	r3, [pc, #20]	@ (8002e70 <vTaskInternalSetTimeOutState+0x28>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	605a      	str	r2, [r3, #4]
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	20000208 	.word	0x20000208
 8002e70:	200001f4 	.word	0x200001f4

08002e74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10b      	bne.n	8002e9c <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8002e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e88:	f383 8811 	msr	BASEPRI, r3
 8002e8c:	f3bf 8f6f 	isb	sy
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	613b      	str	r3, [r7, #16]
    }
 8002e96:	bf00      	nop
 8002e98:	bf00      	nop
 8002e9a:	e7fd      	b.n	8002e98 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10b      	bne.n	8002eba <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8002ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ea6:	f383 8811 	msr	BASEPRI, r3
 8002eaa:	f3bf 8f6f 	isb	sy
 8002eae:	f3bf 8f4f 	dsb	sy
 8002eb2:	60fb      	str	r3, [r7, #12]
    }
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	e7fd      	b.n	8002eb6 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8002eba:	f000 fe4f 	bl	8003b5c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8002f3c <xTaskCheckForTimeOut+0xc8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ed6:	d102      	bne.n	8002ede <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	61fb      	str	r3, [r7, #28]
 8002edc:	e026      	b.n	8002f2c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4b17      	ldr	r3, [pc, #92]	@ (8002f40 <xTaskCheckForTimeOut+0xcc>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d00a      	beq.n	8002f00 <xTaskCheckForTimeOut+0x8c>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d305      	bcc.n	8002f00 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	e015      	b.n	8002f2c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d20b      	bcs.n	8002f22 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	1ad2      	subs	r2, r2, r3
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff ff96 	bl	8002e48 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61fb      	str	r3, [r7, #28]
 8002f20:	e004      	b.n	8002f2c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002f2c:	f000 fe48 	bl	8003bc0 <vPortExitCritical>

    return xReturn;
 8002f30:	69fb      	ldr	r3, [r7, #28]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3720      	adds	r7, #32
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	200001f4 	.word	0x200001f4
 8002f40:	20000208 	.word	0x20000208

08002f44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002f48:	4b03      	ldr	r3, [pc, #12]	@ (8002f58 <vTaskMissedYield+0x14>)
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]
}
 8002f4e:	bf00      	nop
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	20000204 	.word	0x20000204

08002f5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002f64:	f000 f852 	bl	800300c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f68:	4b06      	ldr	r3, [pc, #24]	@ (8002f84 <prvIdleTask+0x28>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d9f9      	bls.n	8002f64 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002f70:	4b05      	ldr	r3, [pc, #20]	@ (8002f88 <prvIdleTask+0x2c>)
 8002f72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	f3bf 8f4f 	dsb	sy
 8002f7c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002f80:	e7f0      	b.n	8002f64 <prvIdleTask+0x8>
 8002f82:	bf00      	nop
 8002f84:	2000011c 	.word	0x2000011c
 8002f88:	e000ed04 	.word	0xe000ed04

08002f8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f92:	2300      	movs	r3, #0
 8002f94:	607b      	str	r3, [r7, #4]
 8002f96:	e00c      	b.n	8002fb2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4a12      	ldr	r2, [pc, #72]	@ (8002fec <prvInitialiseTaskLists+0x60>)
 8002fa4:	4413      	add	r3, r2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe fd8a 	bl	8001ac0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	607b      	str	r3, [r7, #4]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d9ef      	bls.n	8002f98 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002fb8:	480d      	ldr	r0, [pc, #52]	@ (8002ff0 <prvInitialiseTaskLists+0x64>)
 8002fba:	f7fe fd81 	bl	8001ac0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002fbe:	480d      	ldr	r0, [pc, #52]	@ (8002ff4 <prvInitialiseTaskLists+0x68>)
 8002fc0:	f7fe fd7e 	bl	8001ac0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002fc4:	480c      	ldr	r0, [pc, #48]	@ (8002ff8 <prvInitialiseTaskLists+0x6c>)
 8002fc6:	f7fe fd7b 	bl	8001ac0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002fca:	480c      	ldr	r0, [pc, #48]	@ (8002ffc <prvInitialiseTaskLists+0x70>)
 8002fcc:	f7fe fd78 	bl	8001ac0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002fd0:	480b      	ldr	r0, [pc, #44]	@ (8003000 <prvInitialiseTaskLists+0x74>)
 8002fd2:	f7fe fd75 	bl	8001ac0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8003004 <prvInitialiseTaskLists+0x78>)
 8002fd8:	4a05      	ldr	r2, [pc, #20]	@ (8002ff0 <prvInitialiseTaskLists+0x64>)
 8002fda:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8003008 <prvInitialiseTaskLists+0x7c>)
 8002fde:	4a05      	ldr	r2, [pc, #20]	@ (8002ff4 <prvInitialiseTaskLists+0x68>)
 8002fe0:	601a      	str	r2, [r3, #0]
}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	2000011c 	.word	0x2000011c
 8002ff0:	20000180 	.word	0x20000180
 8002ff4:	20000194 	.word	0x20000194
 8002ff8:	200001b0 	.word	0x200001b0
 8002ffc:	200001c4 	.word	0x200001c4
 8003000:	200001dc 	.word	0x200001dc
 8003004:	200001a8 	.word	0x200001a8
 8003008:	200001ac 	.word	0x200001ac

0800300c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003012:	e019      	b.n	8003048 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003014:	f000 fda2 	bl	8003b5c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003018:	4b10      	ldr	r3, [pc, #64]	@ (800305c <prvCheckTasksWaitingTermination+0x50>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3304      	adds	r3, #4
 8003024:	4618      	mov	r0, r3
 8003026:	f7fe fdd5 	bl	8001bd4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800302a:	4b0d      	ldr	r3, [pc, #52]	@ (8003060 <prvCheckTasksWaitingTermination+0x54>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	3b01      	subs	r3, #1
 8003030:	4a0b      	ldr	r2, [pc, #44]	@ (8003060 <prvCheckTasksWaitingTermination+0x54>)
 8003032:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003034:	4b0b      	ldr	r3, [pc, #44]	@ (8003064 <prvCheckTasksWaitingTermination+0x58>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3b01      	subs	r3, #1
 800303a:	4a0a      	ldr	r2, [pc, #40]	@ (8003064 <prvCheckTasksWaitingTermination+0x58>)
 800303c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800303e:	f000 fdbf 	bl	8003bc0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f810 	bl	8003068 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003048:	4b06      	ldr	r3, [pc, #24]	@ (8003064 <prvCheckTasksWaitingTermination+0x58>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1e1      	bne.n	8003014 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003050:	bf00      	nop
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	200001c4 	.word	0x200001c4
 8003060:	200001f0 	.word	0x200001f0
 8003064:	200001d8 	.word	0x200001d8

08003068 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003074:	4618      	mov	r0, r3
 8003076:	f000 ff7d 	bl	8003f74 <vPortFree>
                vPortFree( pxTCB );
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 ff7a 	bl	8003f74 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003080:	bf00      	nop
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800308c:	4b0a      	ldr	r3, [pc, #40]	@ (80030b8 <prvResetNextTaskUnblockTime+0x30>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d104      	bne.n	80030a0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003096:	4b09      	ldr	r3, [pc, #36]	@ (80030bc <prvResetNextTaskUnblockTime+0x34>)
 8003098:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800309c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800309e:	e005      	b.n	80030ac <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80030a0:	4b05      	ldr	r3, [pc, #20]	@ (80030b8 <prvResetNextTaskUnblockTime+0x30>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a04      	ldr	r2, [pc, #16]	@ (80030bc <prvResetNextTaskUnblockTime+0x34>)
 80030aa:	6013      	str	r3, [r2, #0]
}
 80030ac:	bf00      	nop
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	200001a8 	.word	0x200001a8
 80030bc:	20000210 	.word	0x20000210

080030c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80030c6:	4b0b      	ldr	r3, [pc, #44]	@ (80030f4 <xTaskGetSchedulerState+0x34>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d102      	bne.n	80030d4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80030ce:	2301      	movs	r3, #1
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	e008      	b.n	80030e6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030d4:	4b08      	ldr	r3, [pc, #32]	@ (80030f8 <xTaskGetSchedulerState+0x38>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d102      	bne.n	80030e2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80030dc:	2302      	movs	r3, #2
 80030de:	607b      	str	r3, [r7, #4]
 80030e0:	e001      	b.n	80030e6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80030e2:	2300      	movs	r3, #0
 80030e4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80030e6:	687b      	ldr	r3, [r7, #4]
    }
 80030e8:	4618      	mov	r0, r3
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	200001fc 	.word	0x200001fc
 80030f8:	20000218 	.word	0x20000218

080030fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d065      	beq.n	80031de <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003112:	4b35      	ldr	r3, [pc, #212]	@ (80031e8 <xTaskPriorityDisinherit+0xec>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	429a      	cmp	r2, r3
 800311a:	d00b      	beq.n	8003134 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 800311c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003120:	f383 8811 	msr	BASEPRI, r3
 8003124:	f3bf 8f6f 	isb	sy
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	60fb      	str	r3, [r7, #12]
    }
 800312e:	bf00      	nop
 8003130:	bf00      	nop
 8003132:	e7fd      	b.n	8003130 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10b      	bne.n	8003154 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 800313c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003140:	f383 8811 	msr	BASEPRI, r3
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	60bb      	str	r3, [r7, #8]
    }
 800314e:	bf00      	nop
 8003150:	bf00      	nop
 8003152:	e7fd      	b.n	8003150 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003158:	1e5a      	subs	r2, r3, #1
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003166:	429a      	cmp	r2, r3
 8003168:	d039      	beq.n	80031de <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800316e:	2b00      	cmp	r3, #0
 8003170:	d135      	bne.n	80031de <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	3304      	adds	r3, #4
 8003176:	4618      	mov	r0, r3
 8003178:	f7fe fd2c 	bl	8001bd4 <uxListRemove>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10a      	bne.n	8003198 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003186:	2201      	movs	r2, #1
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43da      	mvns	r2, r3
 800318e:	4b17      	ldr	r3, [pc, #92]	@ (80031ec <xTaskPriorityDisinherit+0xf0>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4013      	ands	r3, r2
 8003194:	4a15      	ldr	r2, [pc, #84]	@ (80031ec <xTaskPriorityDisinherit+0xf0>)
 8003196:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a4:	f1c3 0205 	rsb	r2, r3, #5
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b0:	2201      	movs	r2, #1
 80031b2:	409a      	lsls	r2, r3
 80031b4:	4b0d      	ldr	r3, [pc, #52]	@ (80031ec <xTaskPriorityDisinherit+0xf0>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	4a0c      	ldr	r2, [pc, #48]	@ (80031ec <xTaskPriorityDisinherit+0xf0>)
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031c2:	4613      	mov	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4a09      	ldr	r2, [pc, #36]	@ (80031f0 <xTaskPriorityDisinherit+0xf4>)
 80031cc:	441a      	add	r2, r3
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	3304      	adds	r3, #4
 80031d2:	4619      	mov	r1, r3
 80031d4:	4610      	mov	r0, r2
 80031d6:	f7fe fca0 	bl	8001b1a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80031da:	2301      	movs	r3, #1
 80031dc:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80031de:	697b      	ldr	r3, [r7, #20]
    }
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	20000118 	.word	0x20000118
 80031ec:	200001f8 	.word	0x200001f8
 80031f0:	2000011c 	.word	0x2000011c

080031f4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80031fe:	4b29      	ldr	r3, [pc, #164]	@ (80032a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003204:	4b28      	ldr	r3, [pc, #160]	@ (80032a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	3304      	adds	r3, #4
 800320a:	4618      	mov	r0, r3
 800320c:	f7fe fce2 	bl	8001bd4 <uxListRemove>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10b      	bne.n	800322e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003216:	4b24      	ldr	r3, [pc, #144]	@ (80032a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321c:	2201      	movs	r2, #1
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43da      	mvns	r2, r3
 8003224:	4b21      	ldr	r3, [pc, #132]	@ (80032ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4013      	ands	r3, r2
 800322a:	4a20      	ldr	r2, [pc, #128]	@ (80032ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800322c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003234:	d10a      	bne.n	800324c <prvAddCurrentTaskToDelayedList+0x58>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d007      	beq.n	800324c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800323c:	4b1a      	ldr	r3, [pc, #104]	@ (80032a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	3304      	adds	r3, #4
 8003242:	4619      	mov	r1, r3
 8003244:	481a      	ldr	r0, [pc, #104]	@ (80032b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003246:	f7fe fc68 	bl	8001b1a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800324a:	e026      	b.n	800329a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4413      	add	r3, r2
 8003252:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003254:	4b14      	ldr	r3, [pc, #80]	@ (80032a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	429a      	cmp	r2, r3
 8003262:	d209      	bcs.n	8003278 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003264:	4b13      	ldr	r3, [pc, #76]	@ (80032b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	4b0f      	ldr	r3, [pc, #60]	@ (80032a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	3304      	adds	r3, #4
 800326e:	4619      	mov	r1, r3
 8003270:	4610      	mov	r0, r2
 8003272:	f7fe fc76 	bl	8001b62 <vListInsert>
}
 8003276:	e010      	b.n	800329a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003278:	4b0f      	ldr	r3, [pc, #60]	@ (80032b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	4b0a      	ldr	r3, [pc, #40]	@ (80032a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	3304      	adds	r3, #4
 8003282:	4619      	mov	r1, r3
 8003284:	4610      	mov	r0, r2
 8003286:	f7fe fc6c 	bl	8001b62 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800328a:	4b0c      	ldr	r3, [pc, #48]	@ (80032bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	429a      	cmp	r2, r3
 8003292:	d202      	bcs.n	800329a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8003294:	4a09      	ldr	r2, [pc, #36]	@ (80032bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	6013      	str	r3, [r2, #0]
}
 800329a:	bf00      	nop
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	200001f4 	.word	0x200001f4
 80032a8:	20000118 	.word	0x20000118
 80032ac:	200001f8 	.word	0x200001f8
 80032b0:	200001dc 	.word	0x200001dc
 80032b4:	200001ac 	.word	0x200001ac
 80032b8:	200001a8 	.word	0x200001a8
 80032bc:	20000210 	.word	0x20000210

080032c0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80032ca:	f000 fae1 	bl	8003890 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80032ce:	4b12      	ldr	r3, [pc, #72]	@ (8003318 <xTimerCreateTimerTask+0x58>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00b      	beq.n	80032ee <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80032d6:	4b11      	ldr	r3, [pc, #68]	@ (800331c <xTimerCreateTimerTask+0x5c>)
 80032d8:	9301      	str	r3, [sp, #4]
 80032da:	2302      	movs	r3, #2
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	2300      	movs	r3, #0
 80032e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80032e4:	490e      	ldr	r1, [pc, #56]	@ (8003320 <xTimerCreateTimerTask+0x60>)
 80032e6:	480f      	ldr	r0, [pc, #60]	@ (8003324 <xTimerCreateTimerTask+0x64>)
 80032e8:	f7ff f98e 	bl	8002608 <xTaskCreate>
 80032ec:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10b      	bne.n	800330c <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80032f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f8:	f383 8811 	msr	BASEPRI, r3
 80032fc:	f3bf 8f6f 	isb	sy
 8003300:	f3bf 8f4f 	dsb	sy
 8003304:	603b      	str	r3, [r7, #0]
    }
 8003306:	bf00      	nop
 8003308:	bf00      	nop
 800330a:	e7fd      	b.n	8003308 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800330c:	687b      	ldr	r3, [r7, #4]
    }
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	2000024c 	.word	0x2000024c
 800331c:	20000250 	.word	0x20000250
 8003320:	0800508c 	.word	0x0800508c
 8003324:	08003461 	.word	0x08003461

08003328 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003328:	b580      	push	{r7, lr}
 800332a:	b08a      	sub	sp, #40	@ 0x28
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003336:	2300      	movs	r3, #0
 8003338:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10b      	bne.n	8003358 <xTimerGenericCommand+0x30>
        __asm volatile
 8003340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003344:	f383 8811 	msr	BASEPRI, r3
 8003348:	f3bf 8f6f 	isb	sy
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	623b      	str	r3, [r7, #32]
    }
 8003352:	bf00      	nop
 8003354:	bf00      	nop
 8003356:	e7fd      	b.n	8003354 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003358:	4b19      	ldr	r3, [pc, #100]	@ (80033c0 <xTimerGenericCommand+0x98>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d02a      	beq.n	80033b6 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b05      	cmp	r3, #5
 8003370:	dc18      	bgt.n	80033a4 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003372:	f7ff fea5 	bl	80030c0 <xTaskGetSchedulerState>
 8003376:	4603      	mov	r3, r0
 8003378:	2b02      	cmp	r3, #2
 800337a:	d109      	bne.n	8003390 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800337c:	4b10      	ldr	r3, [pc, #64]	@ (80033c0 <xTimerGenericCommand+0x98>)
 800337e:	6818      	ldr	r0, [r3, #0]
 8003380:	f107 0114 	add.w	r1, r7, #20
 8003384:	2300      	movs	r3, #0
 8003386:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003388:	f7fe fd3e 	bl	8001e08 <xQueueGenericSend>
 800338c:	6278      	str	r0, [r7, #36]	@ 0x24
 800338e:	e012      	b.n	80033b6 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003390:	4b0b      	ldr	r3, [pc, #44]	@ (80033c0 <xTimerGenericCommand+0x98>)
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	f107 0114 	add.w	r1, r7, #20
 8003398:	2300      	movs	r3, #0
 800339a:	2200      	movs	r2, #0
 800339c:	f7fe fd34 	bl	8001e08 <xQueueGenericSend>
 80033a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80033a2:	e008      	b.n	80033b6 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80033a4:	4b06      	ldr	r3, [pc, #24]	@ (80033c0 <xTimerGenericCommand+0x98>)
 80033a6:	6818      	ldr	r0, [r3, #0]
 80033a8:	f107 0114 	add.w	r1, r7, #20
 80033ac:	2300      	movs	r3, #0
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	f7fe fe2c 	bl	800200c <xQueueGenericSendFromISR>
 80033b4:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80033b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80033b8:	4618      	mov	r0, r3
 80033ba:	3728      	adds	r7, #40	@ 0x28
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	2000024c 	.word	0x2000024c

080033c4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b088      	sub	sp, #32
 80033c8:	af02      	add	r7, sp, #8
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033ce:	4b23      	ldr	r3, [pc, #140]	@ (800345c <prvProcessExpiredTimer+0x98>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	3304      	adds	r3, #4
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fe fbf9 	bl	8001bd4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d023      	beq.n	8003438 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	699a      	ldr	r2, [r3, #24]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	18d1      	adds	r1, r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	6978      	ldr	r0, [r7, #20]
 80033fe:	f000 f8d5 	bl	80035ac <prvInsertTimerInActiveList>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d020      	beq.n	800344a <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003408:	2300      	movs	r3, #0
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	2300      	movs	r3, #0
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	2100      	movs	r1, #0
 8003412:	6978      	ldr	r0, [r7, #20]
 8003414:	f7ff ff88 	bl	8003328 <xTimerGenericCommand>
 8003418:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d114      	bne.n	800344a <prvProcessExpiredTimer+0x86>
        __asm volatile
 8003420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003424:	f383 8811 	msr	BASEPRI, r3
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	60fb      	str	r3, [r7, #12]
    }
 8003432:	bf00      	nop
 8003434:	bf00      	nop
 8003436:	e7fd      	b.n	8003434 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800343e:	f023 0301 	bic.w	r3, r3, #1
 8003442:	b2da      	uxtb	r2, r3
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	6978      	ldr	r0, [r7, #20]
 8003450:	4798      	blx	r3
    }
 8003452:	bf00      	nop
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20000244 	.word	0x20000244

08003460 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003468:	f107 0308 	add.w	r3, r7, #8
 800346c:	4618      	mov	r0, r3
 800346e:	f000 f859 	bl	8003524 <prvGetNextExpireTime>
 8003472:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	4619      	mov	r1, r3
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 f805 	bl	8003488 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800347e:	f000 f8d7 	bl	8003630 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003482:	bf00      	nop
 8003484:	e7f0      	b.n	8003468 <prvTimerTask+0x8>
	...

08003488 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003492:	f7ff fa51 	bl	8002938 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003496:	f107 0308 	add.w	r3, r7, #8
 800349a:	4618      	mov	r0, r3
 800349c:	f000 f866 	bl	800356c <prvSampleTimeNow>
 80034a0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d130      	bne.n	800350a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10a      	bne.n	80034c4 <prvProcessTimerOrBlockTask+0x3c>
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d806      	bhi.n	80034c4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80034b6:	f7ff fa4d 	bl	8002954 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80034ba:	68f9      	ldr	r1, [r7, #12]
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff ff81 	bl	80033c4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80034c2:	e024      	b.n	800350e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d008      	beq.n	80034dc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80034ca:	4b13      	ldr	r3, [pc, #76]	@ (8003518 <prvProcessTimerOrBlockTask+0x90>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <prvProcessTimerOrBlockTask+0x50>
 80034d4:	2301      	movs	r3, #1
 80034d6:	e000      	b.n	80034da <prvProcessTimerOrBlockTask+0x52>
 80034d8:	2300      	movs	r3, #0
 80034da:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80034dc:	4b0f      	ldr	r3, [pc, #60]	@ (800351c <prvProcessTimerOrBlockTask+0x94>)
 80034de:	6818      	ldr	r0, [r3, #0]
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	4619      	mov	r1, r3
 80034ea:	f7ff f859 	bl	80025a0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80034ee:	f7ff fa31 	bl	8002954 <xTaskResumeAll>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10a      	bne.n	800350e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80034f8:	4b09      	ldr	r3, [pc, #36]	@ (8003520 <prvProcessTimerOrBlockTask+0x98>)
 80034fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	f3bf 8f6f 	isb	sy
    }
 8003508:	e001      	b.n	800350e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800350a:	f7ff fa23 	bl	8002954 <xTaskResumeAll>
    }
 800350e:	bf00      	nop
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	20000248 	.word	0x20000248
 800351c:	2000024c 	.word	0x2000024c
 8003520:	e000ed04 	.word	0xe000ed04

08003524 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800352c:	4b0e      	ldr	r3, [pc, #56]	@ (8003568 <prvGetNextExpireTime+0x44>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <prvGetNextExpireTime+0x16>
 8003536:	2201      	movs	r2, #1
 8003538:	e000      	b.n	800353c <prvGetNextExpireTime+0x18>
 800353a:	2200      	movs	r2, #0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d105      	bne.n	8003554 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003548:	4b07      	ldr	r3, [pc, #28]	@ (8003568 <prvGetNextExpireTime+0x44>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	e001      	b.n	8003558 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003558:	68fb      	ldr	r3, [r7, #12]
    }
 800355a:	4618      	mov	r0, r3
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	20000244 	.word	0x20000244

0800356c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003574:	f7ff fa8c 	bl	8002a90 <xTaskGetTickCount>
 8003578:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800357a:	4b0b      	ldr	r3, [pc, #44]	@ (80035a8 <prvSampleTimeNow+0x3c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	429a      	cmp	r2, r3
 8003582:	d205      	bcs.n	8003590 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003584:	f000 f91e 	bl	80037c4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	e002      	b.n	8003596 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003596:	4a04      	ldr	r2, [pc, #16]	@ (80035a8 <prvSampleTimeNow+0x3c>)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800359c:	68fb      	ldr	r3, [r7, #12]
    }
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000254 	.word	0x20000254

080035ac <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
 80035b8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d812      	bhi.n	80035f8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	1ad2      	subs	r2, r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d302      	bcc.n	80035e6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80035e0:	2301      	movs	r3, #1
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	e01b      	b.n	800361e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80035e6:	4b10      	ldr	r3, [pc, #64]	@ (8003628 <prvInsertTimerInActiveList+0x7c>)
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	3304      	adds	r3, #4
 80035ee:	4619      	mov	r1, r3
 80035f0:	4610      	mov	r0, r2
 80035f2:	f7fe fab6 	bl	8001b62 <vListInsert>
 80035f6:	e012      	b.n	800361e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d206      	bcs.n	800360e <prvInsertTimerInActiveList+0x62>
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d302      	bcc.n	800360e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003608:	2301      	movs	r3, #1
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	e007      	b.n	800361e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800360e:	4b07      	ldr	r3, [pc, #28]	@ (800362c <prvInsertTimerInActiveList+0x80>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	3304      	adds	r3, #4
 8003616:	4619      	mov	r1, r3
 8003618:	4610      	mov	r0, r2
 800361a:	f7fe faa2 	bl	8001b62 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800361e:	697b      	ldr	r3, [r7, #20]
    }
 8003620:	4618      	mov	r0, r3
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	20000248 	.word	0x20000248
 800362c:	20000244 	.word	0x20000244

08003630 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003630:	b580      	push	{r7, lr}
 8003632:	b08c      	sub	sp, #48	@ 0x30
 8003634:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003636:	e0b2      	b.n	800379e <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	f2c0 80af 	blt.w	800379e <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d004      	beq.n	8003656 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800364c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364e:	3304      	adds	r3, #4
 8003650:	4618      	mov	r0, r3
 8003652:	f7fe fabf 	bl	8001bd4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003656:	1d3b      	adds	r3, r7, #4
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff ff87 	bl	800356c <prvSampleTimeNow>
 800365e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2b09      	cmp	r3, #9
 8003664:	f200 8098 	bhi.w	8003798 <prvProcessReceivedCommands+0x168>
 8003668:	a201      	add	r2, pc, #4	@ (adr r2, 8003670 <prvProcessReceivedCommands+0x40>)
 800366a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366e:	bf00      	nop
 8003670:	08003699 	.word	0x08003699
 8003674:	08003699 	.word	0x08003699
 8003678:	08003699 	.word	0x08003699
 800367c:	0800370f 	.word	0x0800370f
 8003680:	08003723 	.word	0x08003723
 8003684:	0800376f 	.word	0x0800376f
 8003688:	08003699 	.word	0x08003699
 800368c:	08003699 	.word	0x08003699
 8003690:	0800370f 	.word	0x0800370f
 8003694:	08003723 	.word	0x08003723
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800369e:	f043 0301 	orr.w	r3, r3, #1
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	18d1      	adds	r1, r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a3a      	ldr	r2, [r7, #32]
 80036b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80036b8:	f7ff ff78 	bl	80035ac <prvInsertTimerInActiveList>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d06c      	beq.n	800379c <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80036c8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80036ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d061      	beq.n	800379c <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	441a      	add	r2, r3
 80036e0:	2300      	movs	r3, #0
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	2300      	movs	r3, #0
 80036e6:	2100      	movs	r1, #0
 80036e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80036ea:	f7ff fe1d 	bl	8003328 <xTimerGenericCommand>
 80036ee:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d152      	bne.n	800379c <prvProcessReceivedCommands+0x16c>
        __asm volatile
 80036f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036fa:	f383 8811 	msr	BASEPRI, r3
 80036fe:	f3bf 8f6f 	isb	sy
 8003702:	f3bf 8f4f 	dsb	sy
 8003706:	61bb      	str	r3, [r7, #24]
    }
 8003708:	bf00      	nop
 800370a:	bf00      	nop
 800370c:	e7fd      	b.n	800370a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800370e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003710:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003714:	f023 0301 	bic.w	r3, r3, #1
 8003718:	b2da      	uxtb	r2, r3
 800371a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003720:	e03d      	b.n	800379e <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003724:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	b2da      	uxtb	r2, r3
 800372e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003730:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003738:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800373a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10b      	bne.n	800375a <prvProcessReceivedCommands+0x12a>
        __asm volatile
 8003742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003746:	f383 8811 	msr	BASEPRI, r3
 800374a:	f3bf 8f6f 	isb	sy
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	617b      	str	r3, [r7, #20]
    }
 8003754:	bf00      	nop
 8003756:	bf00      	nop
 8003758:	e7fd      	b.n	8003756 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800375a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375c:	699a      	ldr	r2, [r3, #24]
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	18d1      	adds	r1, r2, r3
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	6a3a      	ldr	r2, [r7, #32]
 8003766:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003768:	f7ff ff20 	bl	80035ac <prvInsertTimerInActiveList>
                        break;
 800376c:	e017      	b.n	800379e <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800376e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003770:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d103      	bne.n	8003784 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 800377c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800377e:	f000 fbf9 	bl	8003f74 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003782:	e00c      	b.n	800379e <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003786:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800378a:	f023 0301 	bic.w	r3, r3, #1
 800378e:	b2da      	uxtb	r2, r3
 8003790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003792:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003796:	e002      	b.n	800379e <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003798:	bf00      	nop
 800379a:	e000      	b.n	800379e <prvProcessReceivedCommands+0x16e>
                        break;
 800379c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800379e:	4b08      	ldr	r3, [pc, #32]	@ (80037c0 <prvProcessReceivedCommands+0x190>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f107 0108 	add.w	r1, r7, #8
 80037a6:	2200      	movs	r2, #0
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7fe fcdd 	bl	8002168 <xQueueReceive>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f47f af41 	bne.w	8003638 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80037b6:	bf00      	nop
 80037b8:	bf00      	nop
 80037ba:	3728      	adds	r7, #40	@ 0x28
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	2000024c 	.word	0x2000024c

080037c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80037ca:	e049      	b.n	8003860 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80037cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003888 <prvSwitchTimerLists+0xc4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037d6:	4b2c      	ldr	r3, [pc, #176]	@ (8003888 <prvSwitchTimerLists+0xc4>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	3304      	adds	r3, #4
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fe f9f5 	bl	8001bd4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d02f      	beq.n	8003860 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4413      	add	r3, r2
 8003808:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	429a      	cmp	r2, r3
 8003810:	d90e      	bls.n	8003830 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800381e:	4b1a      	ldr	r3, [pc, #104]	@ (8003888 <prvSwitchTimerLists+0xc4>)
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	3304      	adds	r3, #4
 8003826:	4619      	mov	r1, r3
 8003828:	4610      	mov	r0, r2
 800382a:	f7fe f99a 	bl	8001b62 <vListInsert>
 800382e:	e017      	b.n	8003860 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003830:	2300      	movs	r3, #0
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	2300      	movs	r3, #0
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	2100      	movs	r1, #0
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f7ff fd74 	bl	8003328 <xTimerGenericCommand>
 8003840:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10b      	bne.n	8003860 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8003848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800384c:	f383 8811 	msr	BASEPRI, r3
 8003850:	f3bf 8f6f 	isb	sy
 8003854:	f3bf 8f4f 	dsb	sy
 8003858:	603b      	str	r3, [r7, #0]
    }
 800385a:	bf00      	nop
 800385c:	bf00      	nop
 800385e:	e7fd      	b.n	800385c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003860:	4b09      	ldr	r3, [pc, #36]	@ (8003888 <prvSwitchTimerLists+0xc4>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1b0      	bne.n	80037cc <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800386a:	4b07      	ldr	r3, [pc, #28]	@ (8003888 <prvSwitchTimerLists+0xc4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003870:	4b06      	ldr	r3, [pc, #24]	@ (800388c <prvSwitchTimerLists+0xc8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a04      	ldr	r2, [pc, #16]	@ (8003888 <prvSwitchTimerLists+0xc4>)
 8003876:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003878:	4a04      	ldr	r2, [pc, #16]	@ (800388c <prvSwitchTimerLists+0xc8>)
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	6013      	str	r3, [r2, #0]
    }
 800387e:	bf00      	nop
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20000244 	.word	0x20000244
 800388c:	20000248 	.word	0x20000248

08003890 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003894:	f000 f962 	bl	8003b5c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003898:	4b12      	ldr	r3, [pc, #72]	@ (80038e4 <prvCheckForValidListAndQueue+0x54>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d11d      	bne.n	80038dc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80038a0:	4811      	ldr	r0, [pc, #68]	@ (80038e8 <prvCheckForValidListAndQueue+0x58>)
 80038a2:	f7fe f90d 	bl	8001ac0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80038a6:	4811      	ldr	r0, [pc, #68]	@ (80038ec <prvCheckForValidListAndQueue+0x5c>)
 80038a8:	f7fe f90a 	bl	8001ac0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80038ac:	4b10      	ldr	r3, [pc, #64]	@ (80038f0 <prvCheckForValidListAndQueue+0x60>)
 80038ae:	4a0e      	ldr	r2, [pc, #56]	@ (80038e8 <prvCheckForValidListAndQueue+0x58>)
 80038b0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80038b2:	4b10      	ldr	r3, [pc, #64]	@ (80038f4 <prvCheckForValidListAndQueue+0x64>)
 80038b4:	4a0d      	ldr	r2, [pc, #52]	@ (80038ec <prvCheckForValidListAndQueue+0x5c>)
 80038b6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80038b8:	2200      	movs	r2, #0
 80038ba:	210c      	movs	r1, #12
 80038bc:	200a      	movs	r0, #10
 80038be:	f7fe fa1d 	bl	8001cfc <xQueueGenericCreate>
 80038c2:	4603      	mov	r3, r0
 80038c4:	4a07      	ldr	r2, [pc, #28]	@ (80038e4 <prvCheckForValidListAndQueue+0x54>)
 80038c6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80038c8:	4b06      	ldr	r3, [pc, #24]	@ (80038e4 <prvCheckForValidListAndQueue+0x54>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80038d0:	4b04      	ldr	r3, [pc, #16]	@ (80038e4 <prvCheckForValidListAndQueue+0x54>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4908      	ldr	r1, [pc, #32]	@ (80038f8 <prvCheckForValidListAndQueue+0x68>)
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fe fe38 	bl	800254c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80038dc:	f000 f970 	bl	8003bc0 <vPortExitCritical>
    }
 80038e0:	bf00      	nop
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	2000024c 	.word	0x2000024c
 80038e8:	2000021c 	.word	0x2000021c
 80038ec:	20000230 	.word	0x20000230
 80038f0:	20000244 	.word	0x20000244
 80038f4:	20000248 	.word	0x20000248
 80038f8:	08005094 	.word	0x08005094

080038fc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	3b04      	subs	r3, #4
 800390c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003914:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	3b04      	subs	r3, #4
 800391a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f023 0201 	bic.w	r2, r3, #1
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	3b04      	subs	r3, #4
 800392a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800392c:	4a0c      	ldr	r2, [pc, #48]	@ (8003960 <pxPortInitialiseStack+0x64>)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	3b14      	subs	r3, #20
 8003936:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	3b04      	subs	r3, #4
 8003942:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f06f 0202 	mvn.w	r2, #2
 800394a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	3b20      	subs	r3, #32
 8003950:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003952:	68fb      	ldr	r3, [r7, #12]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3714      	adds	r7, #20
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	08003965 	.word	0x08003965

08003964 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800396a:	2300      	movs	r3, #0
 800396c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800396e:	4b13      	ldr	r3, [pc, #76]	@ (80039bc <prvTaskExitError+0x58>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003976:	d00b      	beq.n	8003990 <prvTaskExitError+0x2c>
        __asm volatile
 8003978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800397c:	f383 8811 	msr	BASEPRI, r3
 8003980:	f3bf 8f6f 	isb	sy
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	60fb      	str	r3, [r7, #12]
    }
 800398a:	bf00      	nop
 800398c:	bf00      	nop
 800398e:	e7fd      	b.n	800398c <prvTaskExitError+0x28>
        __asm volatile
 8003990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003994:	f383 8811 	msr	BASEPRI, r3
 8003998:	f3bf 8f6f 	isb	sy
 800399c:	f3bf 8f4f 	dsb	sy
 80039a0:	60bb      	str	r3, [r7, #8]
    }
 80039a2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80039a4:	bf00      	nop
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0fc      	beq.n	80039a6 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	20000010 	.word	0x20000010

080039c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80039c0:	4b07      	ldr	r3, [pc, #28]	@ (80039e0 <pxCurrentTCBConst2>)
 80039c2:	6819      	ldr	r1, [r3, #0]
 80039c4:	6808      	ldr	r0, [r1, #0]
 80039c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ca:	f380 8809 	msr	PSP, r0
 80039ce:	f3bf 8f6f 	isb	sy
 80039d2:	f04f 0000 	mov.w	r0, #0
 80039d6:	f380 8811 	msr	BASEPRI, r0
 80039da:	4770      	bx	lr
 80039dc:	f3af 8000 	nop.w

080039e0 <pxCurrentTCBConst2>:
 80039e0:	20000118 	.word	0x20000118
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80039e4:	bf00      	nop
 80039e6:	bf00      	nop

080039e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80039e8:	4808      	ldr	r0, [pc, #32]	@ (8003a0c <prvPortStartFirstTask+0x24>)
 80039ea:	6800      	ldr	r0, [r0, #0]
 80039ec:	6800      	ldr	r0, [r0, #0]
 80039ee:	f380 8808 	msr	MSP, r0
 80039f2:	f04f 0000 	mov.w	r0, #0
 80039f6:	f380 8814 	msr	CONTROL, r0
 80039fa:	b662      	cpsie	i
 80039fc:	b661      	cpsie	f
 80039fe:	f3bf 8f4f 	dsb	sy
 8003a02:	f3bf 8f6f 	isb	sy
 8003a06:	df00      	svc	0
 8003a08:	bf00      	nop
 8003a0a:	0000      	.short	0x0000
 8003a0c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003a10:	bf00      	nop
 8003a12:	bf00      	nop

08003a14 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003a1a:	4b47      	ldr	r3, [pc, #284]	@ (8003b38 <xPortStartScheduler+0x124>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a47      	ldr	r2, [pc, #284]	@ (8003b3c <xPortStartScheduler+0x128>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d10b      	bne.n	8003a3c <xPortStartScheduler+0x28>
        __asm volatile
 8003a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a28:	f383 8811 	msr	BASEPRI, r3
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	613b      	str	r3, [r7, #16]
    }
 8003a36:	bf00      	nop
 8003a38:	bf00      	nop
 8003a3a:	e7fd      	b.n	8003a38 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003a3c:	4b3e      	ldr	r3, [pc, #248]	@ (8003b38 <xPortStartScheduler+0x124>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a3f      	ldr	r2, [pc, #252]	@ (8003b40 <xPortStartScheduler+0x12c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d10b      	bne.n	8003a5e <xPortStartScheduler+0x4a>
        __asm volatile
 8003a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a4a:	f383 8811 	msr	BASEPRI, r3
 8003a4e:	f3bf 8f6f 	isb	sy
 8003a52:	f3bf 8f4f 	dsb	sy
 8003a56:	60fb      	str	r3, [r7, #12]
    }
 8003a58:	bf00      	nop
 8003a5a:	bf00      	nop
 8003a5c:	e7fd      	b.n	8003a5a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003a5e:	4b39      	ldr	r3, [pc, #228]	@ (8003b44 <xPortStartScheduler+0x130>)
 8003a60:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	22ff      	movs	r2, #255	@ 0xff
 8003a6e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a78:	78fb      	ldrb	r3, [r7, #3]
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	4b31      	ldr	r3, [pc, #196]	@ (8003b48 <xPortStartScheduler+0x134>)
 8003a84:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003a86:	4b31      	ldr	r3, [pc, #196]	@ (8003b4c <xPortStartScheduler+0x138>)
 8003a88:	2207      	movs	r2, #7
 8003a8a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a8c:	e009      	b.n	8003aa2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8003a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8003b4c <xPortStartScheduler+0x138>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	4a2d      	ldr	r2, [pc, #180]	@ (8003b4c <xPortStartScheduler+0x138>)
 8003a96:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003aa2:	78fb      	ldrb	r3, [r7, #3]
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aaa:	2b80      	cmp	r3, #128	@ 0x80
 8003aac:	d0ef      	beq.n	8003a8e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003aae:	4b27      	ldr	r3, [pc, #156]	@ (8003b4c <xPortStartScheduler+0x138>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f1c3 0307 	rsb	r3, r3, #7
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d00b      	beq.n	8003ad2 <xPortStartScheduler+0xbe>
        __asm volatile
 8003aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003abe:	f383 8811 	msr	BASEPRI, r3
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	60bb      	str	r3, [r7, #8]
    }
 8003acc:	bf00      	nop
 8003ace:	bf00      	nop
 8003ad0:	e7fd      	b.n	8003ace <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8003b4c <xPortStartScheduler+0x138>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	021b      	lsls	r3, r3, #8
 8003ad8:	4a1c      	ldr	r2, [pc, #112]	@ (8003b4c <xPortStartScheduler+0x138>)
 8003ada:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003adc:	4b1b      	ldr	r3, [pc, #108]	@ (8003b4c <xPortStartScheduler+0x138>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ae4:	4a19      	ldr	r2, [pc, #100]	@ (8003b4c <xPortStartScheduler+0x138>)
 8003ae6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003af0:	4b17      	ldr	r3, [pc, #92]	@ (8003b50 <xPortStartScheduler+0x13c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a16      	ldr	r2, [pc, #88]	@ (8003b50 <xPortStartScheduler+0x13c>)
 8003af6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003afa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003afc:	4b14      	ldr	r3, [pc, #80]	@ (8003b50 <xPortStartScheduler+0x13c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a13      	ldr	r2, [pc, #76]	@ (8003b50 <xPortStartScheduler+0x13c>)
 8003b02:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003b06:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003b08:	f000 f8e0 	bl	8003ccc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003b0c:	4b11      	ldr	r3, [pc, #68]	@ (8003b54 <xPortStartScheduler+0x140>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003b12:	f000 f8ff 	bl	8003d14 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003b16:	4b10      	ldr	r3, [pc, #64]	@ (8003b58 <xPortStartScheduler+0x144>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a0f      	ldr	r2, [pc, #60]	@ (8003b58 <xPortStartScheduler+0x144>)
 8003b1c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003b20:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003b22:	f7ff ff61 	bl	80039e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003b26:	f7ff f87d 	bl	8002c24 <vTaskSwitchContext>
    prvTaskExitError();
 8003b2a:	f7ff ff1b 	bl	8003964 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	e000ed00 	.word	0xe000ed00
 8003b3c:	410fc271 	.word	0x410fc271
 8003b40:	410fc270 	.word	0x410fc270
 8003b44:	e000e400 	.word	0xe000e400
 8003b48:	20000258 	.word	0x20000258
 8003b4c:	2000025c 	.word	0x2000025c
 8003b50:	e000ed20 	.word	0xe000ed20
 8003b54:	20000010 	.word	0x20000010
 8003b58:	e000ef34 	.word	0xe000ef34

08003b5c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
        __asm volatile
 8003b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b66:	f383 8811 	msr	BASEPRI, r3
 8003b6a:	f3bf 8f6f 	isb	sy
 8003b6e:	f3bf 8f4f 	dsb	sy
 8003b72:	607b      	str	r3, [r7, #4]
    }
 8003b74:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003b76:	4b10      	ldr	r3, [pc, #64]	@ (8003bb8 <vPortEnterCritical+0x5c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	4a0e      	ldr	r2, [pc, #56]	@ (8003bb8 <vPortEnterCritical+0x5c>)
 8003b7e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003b80:	4b0d      	ldr	r3, [pc, #52]	@ (8003bb8 <vPortEnterCritical+0x5c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d110      	bne.n	8003baa <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003b88:	4b0c      	ldr	r3, [pc, #48]	@ (8003bbc <vPortEnterCritical+0x60>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00b      	beq.n	8003baa <vPortEnterCritical+0x4e>
        __asm volatile
 8003b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b96:	f383 8811 	msr	BASEPRI, r3
 8003b9a:	f3bf 8f6f 	isb	sy
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	603b      	str	r3, [r7, #0]
    }
 8003ba4:	bf00      	nop
 8003ba6:	bf00      	nop
 8003ba8:	e7fd      	b.n	8003ba6 <vPortEnterCritical+0x4a>
    }
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	20000010 	.word	0x20000010
 8003bbc:	e000ed04 	.word	0xe000ed04

08003bc0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003bc6:	4b12      	ldr	r3, [pc, #72]	@ (8003c10 <vPortExitCritical+0x50>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10b      	bne.n	8003be6 <vPortExitCritical+0x26>
        __asm volatile
 8003bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bd2:	f383 8811 	msr	BASEPRI, r3
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	f3bf 8f4f 	dsb	sy
 8003bde:	607b      	str	r3, [r7, #4]
    }
 8003be0:	bf00      	nop
 8003be2:	bf00      	nop
 8003be4:	e7fd      	b.n	8003be2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003be6:	4b0a      	ldr	r3, [pc, #40]	@ (8003c10 <vPortExitCritical+0x50>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	4a08      	ldr	r2, [pc, #32]	@ (8003c10 <vPortExitCritical+0x50>)
 8003bee:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003bf0:	4b07      	ldr	r3, [pc, #28]	@ (8003c10 <vPortExitCritical+0x50>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d105      	bne.n	8003c04 <vPortExitCritical+0x44>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	f383 8811 	msr	BASEPRI, r3
    }
 8003c02:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	20000010 	.word	0x20000010
	...

08003c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003c20:	f3ef 8009 	mrs	r0, PSP
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	4b15      	ldr	r3, [pc, #84]	@ (8003c80 <pxCurrentTCBConst>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	f01e 0f10 	tst.w	lr, #16
 8003c30:	bf08      	it	eq
 8003c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c3a:	6010      	str	r0, [r2, #0]
 8003c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003c40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003c44:	f380 8811 	msr	BASEPRI, r0
 8003c48:	f3bf 8f4f 	dsb	sy
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	f7fe ffe8 	bl	8002c24 <vTaskSwitchContext>
 8003c54:	f04f 0000 	mov.w	r0, #0
 8003c58:	f380 8811 	msr	BASEPRI, r0
 8003c5c:	bc09      	pop	{r0, r3}
 8003c5e:	6819      	ldr	r1, [r3, #0]
 8003c60:	6808      	ldr	r0, [r1, #0]
 8003c62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c66:	f01e 0f10 	tst.w	lr, #16
 8003c6a:	bf08      	it	eq
 8003c6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003c70:	f380 8809 	msr	PSP, r0
 8003c74:	f3bf 8f6f 	isb	sy
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	f3af 8000 	nop.w

08003c80 <pxCurrentTCBConst>:
 8003c80:	20000118 	.word	0x20000118
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop

08003c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
        __asm volatile
 8003c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c92:	f383 8811 	msr	BASEPRI, r3
 8003c96:	f3bf 8f6f 	isb	sy
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	607b      	str	r3, [r7, #4]
    }
 8003ca0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003ca2:	f7fe ff05 	bl	8002ab0 <xTaskIncrementTick>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003cac:	4b06      	ldr	r3, [pc, #24]	@ (8003cc8 <SysTick_Handler+0x40>)
 8003cae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	f383 8811 	msr	BASEPRI, r3
    }
 8003cbe:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003cc0:	bf00      	nop
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	e000ed04 	.word	0xe000ed04

08003ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003d00 <vPortSetupTimerInterrupt+0x34>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8003d04 <vPortSetupTimerInterrupt+0x38>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8003d08 <vPortSetupTimerInterrupt+0x3c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8003d0c <vPortSetupTimerInterrupt+0x40>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	099b      	lsrs	r3, r3, #6
 8003ce8:	4a09      	ldr	r2, [pc, #36]	@ (8003d10 <vPortSetupTimerInterrupt+0x44>)
 8003cea:	3b01      	subs	r3, #1
 8003cec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003cee:	4b04      	ldr	r3, [pc, #16]	@ (8003d00 <vPortSetupTimerInterrupt+0x34>)
 8003cf0:	2207      	movs	r2, #7
 8003cf2:	601a      	str	r2, [r3, #0]
}
 8003cf4:	bf00      	nop
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	e000e010 	.word	0xe000e010
 8003d04:	e000e018 	.word	0xe000e018
 8003d08:	20000000 	.word	0x20000000
 8003d0c:	10624dd3 	.word	0x10624dd3
 8003d10:	e000e014 	.word	0xe000e014

08003d14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003d14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003d24 <vPortEnableVFP+0x10>
 8003d18:	6801      	ldr	r1, [r0, #0]
 8003d1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003d1e:	6001      	str	r1, [r0, #0]
 8003d20:	4770      	bx	lr
 8003d22:	0000      	.short	0x0000
 8003d24:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003d28:	bf00      	nop
 8003d2a:	bf00      	nop

08003d2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003d32:	f3ef 8305 	mrs	r3, IPSR
 8003d36:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b0f      	cmp	r3, #15
 8003d3c:	d915      	bls.n	8003d6a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003d3e:	4a18      	ldr	r2, [pc, #96]	@ (8003da0 <vPortValidateInterruptPriority+0x74>)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4413      	add	r3, r2
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003d48:	4b16      	ldr	r3, [pc, #88]	@ (8003da4 <vPortValidateInterruptPriority+0x78>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	7afa      	ldrb	r2, [r7, #11]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d20b      	bcs.n	8003d6a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8003d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d56:	f383 8811 	msr	BASEPRI, r3
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	607b      	str	r3, [r7, #4]
    }
 8003d64:	bf00      	nop
 8003d66:	bf00      	nop
 8003d68:	e7fd      	b.n	8003d66 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8003da8 <vPortValidateInterruptPriority+0x7c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003d72:	4b0e      	ldr	r3, [pc, #56]	@ (8003dac <vPortValidateInterruptPriority+0x80>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d90b      	bls.n	8003d92 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8003d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d7e:	f383 8811 	msr	BASEPRI, r3
 8003d82:	f3bf 8f6f 	isb	sy
 8003d86:	f3bf 8f4f 	dsb	sy
 8003d8a:	603b      	str	r3, [r7, #0]
    }
 8003d8c:	bf00      	nop
 8003d8e:	bf00      	nop
 8003d90:	e7fd      	b.n	8003d8e <vPortValidateInterruptPriority+0x62>
    }
 8003d92:	bf00      	nop
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	e000e3f0 	.word	0xe000e3f0
 8003da4:	20000258 	.word	0x20000258
 8003da8:	e000ed0c 	.word	0xe000ed0c
 8003dac:	2000025c 	.word	0x2000025c

08003db0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08a      	sub	sp, #40	@ 0x28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003dbc:	f7fe fdbc 	bl	8002938 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003dc0:	4b66      	ldr	r3, [pc, #408]	@ (8003f5c <pvPortMalloc+0x1ac>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003dc8:	f000 f938 	bl	800403c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003dcc:	4b64      	ldr	r3, [pc, #400]	@ (8003f60 <pvPortMalloc+0x1b0>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f040 80a9 	bne.w	8003f2c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d02e      	beq.n	8003e3e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003de0:	2208      	movs	r2, #8
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d228      	bcs.n	8003e3e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8003dec:	2208      	movs	r2, #8
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4413      	add	r3, r2
 8003df2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d022      	beq.n	8003e44 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f023 0307 	bic.w	r3, r3, #7
 8003e04:	3308      	adds	r3, #8
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d215      	bcs.n	8003e38 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f023 0307 	bic.w	r3, r3, #7
 8003e12:	3308      	adds	r3, #8
 8003e14:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d011      	beq.n	8003e44 <pvPortMalloc+0x94>
        __asm volatile
 8003e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	617b      	str	r3, [r7, #20]
    }
 8003e32:	bf00      	nop
 8003e34:	bf00      	nop
 8003e36:	e7fd      	b.n	8003e34 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e3c:	e002      	b.n	8003e44 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	607b      	str	r3, [r7, #4]
 8003e42:	e000      	b.n	8003e46 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e44:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d06f      	beq.n	8003f2c <pvPortMalloc+0x17c>
 8003e4c:	4b45      	ldr	r3, [pc, #276]	@ (8003f64 <pvPortMalloc+0x1b4>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d86a      	bhi.n	8003f2c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003e56:	4b44      	ldr	r3, [pc, #272]	@ (8003f68 <pvPortMalloc+0x1b8>)
 8003e58:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003e5a:	4b43      	ldr	r3, [pc, #268]	@ (8003f68 <pvPortMalloc+0x1b8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e60:	e004      	b.n	8003e6c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8003e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e64:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d903      	bls.n	8003e7e <pvPortMalloc+0xce>
 8003e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1f1      	bne.n	8003e62 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003e7e:	4b37      	ldr	r3, [pc, #220]	@ (8003f5c <pvPortMalloc+0x1ac>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d051      	beq.n	8003f2c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2208      	movs	r2, #8
 8003e8e:	4413      	add	r3, r2
 8003e90:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	1ad2      	subs	r2, r2, r3
 8003ea2:	2308      	movs	r3, #8
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d920      	bls.n	8003eec <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4413      	add	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00b      	beq.n	8003ed4 <pvPortMalloc+0x124>
        __asm volatile
 8003ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec0:	f383 8811 	msr	BASEPRI, r3
 8003ec4:	f3bf 8f6f 	isb	sy
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	613b      	str	r3, [r7, #16]
    }
 8003ece:	bf00      	nop
 8003ed0:	bf00      	nop
 8003ed2:	e7fd      	b.n	8003ed0 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	1ad2      	subs	r2, r2, r3
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003ee6:	69b8      	ldr	r0, [r7, #24]
 8003ee8:	f000 f90a 	bl	8004100 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003eec:	4b1d      	ldr	r3, [pc, #116]	@ (8003f64 <pvPortMalloc+0x1b4>)
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8003f64 <pvPortMalloc+0x1b4>)
 8003ef8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003efa:	4b1a      	ldr	r3, [pc, #104]	@ (8003f64 <pvPortMalloc+0x1b4>)
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	4b1b      	ldr	r3, [pc, #108]	@ (8003f6c <pvPortMalloc+0x1bc>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d203      	bcs.n	8003f0e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003f06:	4b17      	ldr	r3, [pc, #92]	@ (8003f64 <pvPortMalloc+0x1b4>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a18      	ldr	r2, [pc, #96]	@ (8003f6c <pvPortMalloc+0x1bc>)
 8003f0c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	4b13      	ldr	r3, [pc, #76]	@ (8003f60 <pvPortMalloc+0x1b0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	431a      	orrs	r2, r3
 8003f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003f22:	4b13      	ldr	r3, [pc, #76]	@ (8003f70 <pvPortMalloc+0x1c0>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3301      	adds	r3, #1
 8003f28:	4a11      	ldr	r2, [pc, #68]	@ (8003f70 <pvPortMalloc+0x1c0>)
 8003f2a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003f2c:	f7fe fd12 	bl	8002954 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00b      	beq.n	8003f52 <pvPortMalloc+0x1a2>
        __asm volatile
 8003f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f3e:	f383 8811 	msr	BASEPRI, r3
 8003f42:	f3bf 8f6f 	isb	sy
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	60fb      	str	r3, [r7, #12]
    }
 8003f4c:	bf00      	nop
 8003f4e:	bf00      	nop
 8003f50:	e7fd      	b.n	8003f4e <pvPortMalloc+0x19e>
    return pvReturn;
 8003f52:	69fb      	ldr	r3, [r7, #28]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3728      	adds	r7, #40	@ 0x28
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	20004268 	.word	0x20004268
 8003f60:	2000427c 	.word	0x2000427c
 8003f64:	2000426c 	.word	0x2000426c
 8003f68:	20004260 	.word	0x20004260
 8003f6c:	20004270 	.word	0x20004270
 8003f70:	20004274 	.word	0x20004274

08003f74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d04f      	beq.n	8004026 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003f86:	2308      	movs	r3, #8
 8003f88:	425b      	negs	r3, r3
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	4b25      	ldr	r3, [pc, #148]	@ (8004030 <vPortFree+0xbc>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10b      	bne.n	8003fba <vPortFree+0x46>
        __asm volatile
 8003fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa6:	f383 8811 	msr	BASEPRI, r3
 8003faa:	f3bf 8f6f 	isb	sy
 8003fae:	f3bf 8f4f 	dsb	sy
 8003fb2:	60fb      	str	r3, [r7, #12]
    }
 8003fb4:	bf00      	nop
 8003fb6:	bf00      	nop
 8003fb8:	e7fd      	b.n	8003fb6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00b      	beq.n	8003fda <vPortFree+0x66>
        __asm volatile
 8003fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	60bb      	str	r3, [r7, #8]
    }
 8003fd4:	bf00      	nop
 8003fd6:	bf00      	nop
 8003fd8:	e7fd      	b.n	8003fd6 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	4b14      	ldr	r3, [pc, #80]	@ (8004030 <vPortFree+0xbc>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d01e      	beq.n	8004026 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d11a      	bne.n	8004026 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8004030 <vPortFree+0xbc>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	401a      	ands	r2, r3
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004000:	f7fe fc9a 	bl	8002938 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	4b0a      	ldr	r3, [pc, #40]	@ (8004034 <vPortFree+0xc0>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4413      	add	r3, r2
 800400e:	4a09      	ldr	r2, [pc, #36]	@ (8004034 <vPortFree+0xc0>)
 8004010:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004012:	6938      	ldr	r0, [r7, #16]
 8004014:	f000 f874 	bl	8004100 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004018:	4b07      	ldr	r3, [pc, #28]	@ (8004038 <vPortFree+0xc4>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3301      	adds	r3, #1
 800401e:	4a06      	ldr	r2, [pc, #24]	@ (8004038 <vPortFree+0xc4>)
 8004020:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004022:	f7fe fc97 	bl	8002954 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004026:	bf00      	nop
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	2000427c 	.word	0x2000427c
 8004034:	2000426c 	.word	0x2000426c
 8004038:	20004278 	.word	0x20004278

0800403c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004042:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004046:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004048:	4b27      	ldr	r3, [pc, #156]	@ (80040e8 <prvHeapInit+0xac>)
 800404a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00c      	beq.n	8004070 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3307      	adds	r3, #7
 800405a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 0307 	bic.w	r3, r3, #7
 8004062:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	4a1f      	ldr	r2, [pc, #124]	@ (80040e8 <prvHeapInit+0xac>)
 800406c:	4413      	add	r3, r2
 800406e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004074:	4a1d      	ldr	r2, [pc, #116]	@ (80040ec <prvHeapInit+0xb0>)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800407a:	4b1c      	ldr	r3, [pc, #112]	@ (80040ec <prvHeapInit+0xb0>)
 800407c:	2200      	movs	r2, #0
 800407e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	4413      	add	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004088:	2208      	movs	r2, #8
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	1a9b      	subs	r3, r3, r2
 800408e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 0307 	bic.w	r3, r3, #7
 8004096:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4a15      	ldr	r2, [pc, #84]	@ (80040f0 <prvHeapInit+0xb4>)
 800409c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800409e:	4b14      	ldr	r3, [pc, #80]	@ (80040f0 <prvHeapInit+0xb4>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2200      	movs	r2, #0
 80040a4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80040a6:	4b12      	ldr	r3, [pc, #72]	@ (80040f0 <prvHeapInit+0xb4>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	1ad2      	subs	r2, r2, r3
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80040bc:	4b0c      	ldr	r3, [pc, #48]	@ (80040f0 <prvHeapInit+0xb4>)
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	4a0a      	ldr	r2, [pc, #40]	@ (80040f4 <prvHeapInit+0xb8>)
 80040ca:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	4a09      	ldr	r2, [pc, #36]	@ (80040f8 <prvHeapInit+0xbc>)
 80040d2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80040d4:	4b09      	ldr	r3, [pc, #36]	@ (80040fc <prvHeapInit+0xc0>)
 80040d6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80040da:	601a      	str	r2, [r3, #0]
}
 80040dc:	bf00      	nop
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	20000260 	.word	0x20000260
 80040ec:	20004260 	.word	0x20004260
 80040f0:	20004268 	.word	0x20004268
 80040f4:	20004270 	.word	0x20004270
 80040f8:	2000426c 	.word	0x2000426c
 80040fc:	2000427c 	.word	0x2000427c

08004100 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004108:	4b28      	ldr	r3, [pc, #160]	@ (80041ac <prvInsertBlockIntoFreeList+0xac>)
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	e002      	b.n	8004114 <prvInsertBlockIntoFreeList+0x14>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	429a      	cmp	r2, r3
 800411c:	d8f7      	bhi.n	800410e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	4413      	add	r3, r2
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	429a      	cmp	r2, r3
 800412e:	d108      	bne.n	8004142 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	441a      	add	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	441a      	add	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d118      	bne.n	8004188 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	4b15      	ldr	r3, [pc, #84]	@ (80041b0 <prvInsertBlockIntoFreeList+0xb0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	429a      	cmp	r2, r3
 8004160:	d00d      	beq.n	800417e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	441a      	add	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	e008      	b.n	8004190 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800417e:	4b0c      	ldr	r3, [pc, #48]	@ (80041b0 <prvInsertBlockIntoFreeList+0xb0>)
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	e003      	b.n	8004190 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	429a      	cmp	r2, r3
 8004196:	d002      	beq.n	800419e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800419e:	bf00      	nop
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	20004260 	.word	0x20004260
 80041b0:	20004268 	.word	0x20004268

080041b4 <std>:
 80041b4:	2300      	movs	r3, #0
 80041b6:	b510      	push	{r4, lr}
 80041b8:	4604      	mov	r4, r0
 80041ba:	e9c0 3300 	strd	r3, r3, [r0]
 80041be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041c2:	6083      	str	r3, [r0, #8]
 80041c4:	8181      	strh	r1, [r0, #12]
 80041c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80041c8:	81c2      	strh	r2, [r0, #14]
 80041ca:	6183      	str	r3, [r0, #24]
 80041cc:	4619      	mov	r1, r3
 80041ce:	2208      	movs	r2, #8
 80041d0:	305c      	adds	r0, #92	@ 0x5c
 80041d2:	f000 f906 	bl	80043e2 <memset>
 80041d6:	4b0d      	ldr	r3, [pc, #52]	@ (800420c <std+0x58>)
 80041d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80041da:	4b0d      	ldr	r3, [pc, #52]	@ (8004210 <std+0x5c>)
 80041dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80041de:	4b0d      	ldr	r3, [pc, #52]	@ (8004214 <std+0x60>)
 80041e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80041e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004218 <std+0x64>)
 80041e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80041e6:	4b0d      	ldr	r3, [pc, #52]	@ (800421c <std+0x68>)
 80041e8:	6224      	str	r4, [r4, #32]
 80041ea:	429c      	cmp	r4, r3
 80041ec:	d006      	beq.n	80041fc <std+0x48>
 80041ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80041f2:	4294      	cmp	r4, r2
 80041f4:	d002      	beq.n	80041fc <std+0x48>
 80041f6:	33d0      	adds	r3, #208	@ 0xd0
 80041f8:	429c      	cmp	r4, r3
 80041fa:	d105      	bne.n	8004208 <std+0x54>
 80041fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004204:	f000 b960 	b.w	80044c8 <__retarget_lock_init_recursive>
 8004208:	bd10      	pop	{r4, pc}
 800420a:	bf00      	nop
 800420c:	0800435d 	.word	0x0800435d
 8004210:	0800437f 	.word	0x0800437f
 8004214:	080043b7 	.word	0x080043b7
 8004218:	080043db 	.word	0x080043db
 800421c:	20004280 	.word	0x20004280

08004220 <stdio_exit_handler>:
 8004220:	4a02      	ldr	r2, [pc, #8]	@ (800422c <stdio_exit_handler+0xc>)
 8004222:	4903      	ldr	r1, [pc, #12]	@ (8004230 <stdio_exit_handler+0x10>)
 8004224:	4803      	ldr	r0, [pc, #12]	@ (8004234 <stdio_exit_handler+0x14>)
 8004226:	f000 b869 	b.w	80042fc <_fwalk_sglue>
 800422a:	bf00      	nop
 800422c:	20000014 	.word	0x20000014
 8004230:	08004d85 	.word	0x08004d85
 8004234:	20000024 	.word	0x20000024

08004238 <cleanup_stdio>:
 8004238:	6841      	ldr	r1, [r0, #4]
 800423a:	4b0c      	ldr	r3, [pc, #48]	@ (800426c <cleanup_stdio+0x34>)
 800423c:	4299      	cmp	r1, r3
 800423e:	b510      	push	{r4, lr}
 8004240:	4604      	mov	r4, r0
 8004242:	d001      	beq.n	8004248 <cleanup_stdio+0x10>
 8004244:	f000 fd9e 	bl	8004d84 <_fflush_r>
 8004248:	68a1      	ldr	r1, [r4, #8]
 800424a:	4b09      	ldr	r3, [pc, #36]	@ (8004270 <cleanup_stdio+0x38>)
 800424c:	4299      	cmp	r1, r3
 800424e:	d002      	beq.n	8004256 <cleanup_stdio+0x1e>
 8004250:	4620      	mov	r0, r4
 8004252:	f000 fd97 	bl	8004d84 <_fflush_r>
 8004256:	68e1      	ldr	r1, [r4, #12]
 8004258:	4b06      	ldr	r3, [pc, #24]	@ (8004274 <cleanup_stdio+0x3c>)
 800425a:	4299      	cmp	r1, r3
 800425c:	d004      	beq.n	8004268 <cleanup_stdio+0x30>
 800425e:	4620      	mov	r0, r4
 8004260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004264:	f000 bd8e 	b.w	8004d84 <_fflush_r>
 8004268:	bd10      	pop	{r4, pc}
 800426a:	bf00      	nop
 800426c:	20004280 	.word	0x20004280
 8004270:	200042e8 	.word	0x200042e8
 8004274:	20004350 	.word	0x20004350

08004278 <global_stdio_init.part.0>:
 8004278:	b510      	push	{r4, lr}
 800427a:	4b0b      	ldr	r3, [pc, #44]	@ (80042a8 <global_stdio_init.part.0+0x30>)
 800427c:	4c0b      	ldr	r4, [pc, #44]	@ (80042ac <global_stdio_init.part.0+0x34>)
 800427e:	4a0c      	ldr	r2, [pc, #48]	@ (80042b0 <global_stdio_init.part.0+0x38>)
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	4620      	mov	r0, r4
 8004284:	2200      	movs	r2, #0
 8004286:	2104      	movs	r1, #4
 8004288:	f7ff ff94 	bl	80041b4 <std>
 800428c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004290:	2201      	movs	r2, #1
 8004292:	2109      	movs	r1, #9
 8004294:	f7ff ff8e 	bl	80041b4 <std>
 8004298:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800429c:	2202      	movs	r2, #2
 800429e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042a2:	2112      	movs	r1, #18
 80042a4:	f7ff bf86 	b.w	80041b4 <std>
 80042a8:	200043b8 	.word	0x200043b8
 80042ac:	20004280 	.word	0x20004280
 80042b0:	08004221 	.word	0x08004221

080042b4 <__sfp_lock_acquire>:
 80042b4:	4801      	ldr	r0, [pc, #4]	@ (80042bc <__sfp_lock_acquire+0x8>)
 80042b6:	f000 b908 	b.w	80044ca <__retarget_lock_acquire_recursive>
 80042ba:	bf00      	nop
 80042bc:	200043c1 	.word	0x200043c1

080042c0 <__sfp_lock_release>:
 80042c0:	4801      	ldr	r0, [pc, #4]	@ (80042c8 <__sfp_lock_release+0x8>)
 80042c2:	f000 b903 	b.w	80044cc <__retarget_lock_release_recursive>
 80042c6:	bf00      	nop
 80042c8:	200043c1 	.word	0x200043c1

080042cc <__sinit>:
 80042cc:	b510      	push	{r4, lr}
 80042ce:	4604      	mov	r4, r0
 80042d0:	f7ff fff0 	bl	80042b4 <__sfp_lock_acquire>
 80042d4:	6a23      	ldr	r3, [r4, #32]
 80042d6:	b11b      	cbz	r3, 80042e0 <__sinit+0x14>
 80042d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042dc:	f7ff bff0 	b.w	80042c0 <__sfp_lock_release>
 80042e0:	4b04      	ldr	r3, [pc, #16]	@ (80042f4 <__sinit+0x28>)
 80042e2:	6223      	str	r3, [r4, #32]
 80042e4:	4b04      	ldr	r3, [pc, #16]	@ (80042f8 <__sinit+0x2c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1f5      	bne.n	80042d8 <__sinit+0xc>
 80042ec:	f7ff ffc4 	bl	8004278 <global_stdio_init.part.0>
 80042f0:	e7f2      	b.n	80042d8 <__sinit+0xc>
 80042f2:	bf00      	nop
 80042f4:	08004239 	.word	0x08004239
 80042f8:	200043b8 	.word	0x200043b8

080042fc <_fwalk_sglue>:
 80042fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004300:	4607      	mov	r7, r0
 8004302:	4688      	mov	r8, r1
 8004304:	4614      	mov	r4, r2
 8004306:	2600      	movs	r6, #0
 8004308:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800430c:	f1b9 0901 	subs.w	r9, r9, #1
 8004310:	d505      	bpl.n	800431e <_fwalk_sglue+0x22>
 8004312:	6824      	ldr	r4, [r4, #0]
 8004314:	2c00      	cmp	r4, #0
 8004316:	d1f7      	bne.n	8004308 <_fwalk_sglue+0xc>
 8004318:	4630      	mov	r0, r6
 800431a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800431e:	89ab      	ldrh	r3, [r5, #12]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d907      	bls.n	8004334 <_fwalk_sglue+0x38>
 8004324:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004328:	3301      	adds	r3, #1
 800432a:	d003      	beq.n	8004334 <_fwalk_sglue+0x38>
 800432c:	4629      	mov	r1, r5
 800432e:	4638      	mov	r0, r7
 8004330:	47c0      	blx	r8
 8004332:	4306      	orrs	r6, r0
 8004334:	3568      	adds	r5, #104	@ 0x68
 8004336:	e7e9      	b.n	800430c <_fwalk_sglue+0x10>

08004338 <iprintf>:
 8004338:	b40f      	push	{r0, r1, r2, r3}
 800433a:	b507      	push	{r0, r1, r2, lr}
 800433c:	4906      	ldr	r1, [pc, #24]	@ (8004358 <iprintf+0x20>)
 800433e:	ab04      	add	r3, sp, #16
 8004340:	6808      	ldr	r0, [r1, #0]
 8004342:	f853 2b04 	ldr.w	r2, [r3], #4
 8004346:	6881      	ldr	r1, [r0, #8]
 8004348:	9301      	str	r3, [sp, #4]
 800434a:	f000 f9f1 	bl	8004730 <_vfiprintf_r>
 800434e:	b003      	add	sp, #12
 8004350:	f85d eb04 	ldr.w	lr, [sp], #4
 8004354:	b004      	add	sp, #16
 8004356:	4770      	bx	lr
 8004358:	20000020 	.word	0x20000020

0800435c <__sread>:
 800435c:	b510      	push	{r4, lr}
 800435e:	460c      	mov	r4, r1
 8004360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004364:	f000 f868 	bl	8004438 <_read_r>
 8004368:	2800      	cmp	r0, #0
 800436a:	bfab      	itete	ge
 800436c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800436e:	89a3      	ldrhlt	r3, [r4, #12]
 8004370:	181b      	addge	r3, r3, r0
 8004372:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004376:	bfac      	ite	ge
 8004378:	6563      	strge	r3, [r4, #84]	@ 0x54
 800437a:	81a3      	strhlt	r3, [r4, #12]
 800437c:	bd10      	pop	{r4, pc}

0800437e <__swrite>:
 800437e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004382:	461f      	mov	r7, r3
 8004384:	898b      	ldrh	r3, [r1, #12]
 8004386:	05db      	lsls	r3, r3, #23
 8004388:	4605      	mov	r5, r0
 800438a:	460c      	mov	r4, r1
 800438c:	4616      	mov	r6, r2
 800438e:	d505      	bpl.n	800439c <__swrite+0x1e>
 8004390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004394:	2302      	movs	r3, #2
 8004396:	2200      	movs	r2, #0
 8004398:	f000 f83c 	bl	8004414 <_lseek_r>
 800439c:	89a3      	ldrh	r3, [r4, #12]
 800439e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043a6:	81a3      	strh	r3, [r4, #12]
 80043a8:	4632      	mov	r2, r6
 80043aa:	463b      	mov	r3, r7
 80043ac:	4628      	mov	r0, r5
 80043ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043b2:	f000 b853 	b.w	800445c <_write_r>

080043b6 <__sseek>:
 80043b6:	b510      	push	{r4, lr}
 80043b8:	460c      	mov	r4, r1
 80043ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043be:	f000 f829 	bl	8004414 <_lseek_r>
 80043c2:	1c43      	adds	r3, r0, #1
 80043c4:	89a3      	ldrh	r3, [r4, #12]
 80043c6:	bf15      	itete	ne
 80043c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80043ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80043ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80043d2:	81a3      	strheq	r3, [r4, #12]
 80043d4:	bf18      	it	ne
 80043d6:	81a3      	strhne	r3, [r4, #12]
 80043d8:	bd10      	pop	{r4, pc}

080043da <__sclose>:
 80043da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043de:	f000 b809 	b.w	80043f4 <_close_r>

080043e2 <memset>:
 80043e2:	4402      	add	r2, r0
 80043e4:	4603      	mov	r3, r0
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d100      	bne.n	80043ec <memset+0xa>
 80043ea:	4770      	bx	lr
 80043ec:	f803 1b01 	strb.w	r1, [r3], #1
 80043f0:	e7f9      	b.n	80043e6 <memset+0x4>
	...

080043f4 <_close_r>:
 80043f4:	b538      	push	{r3, r4, r5, lr}
 80043f6:	4d06      	ldr	r5, [pc, #24]	@ (8004410 <_close_r+0x1c>)
 80043f8:	2300      	movs	r3, #0
 80043fa:	4604      	mov	r4, r0
 80043fc:	4608      	mov	r0, r1
 80043fe:	602b      	str	r3, [r5, #0]
 8004400:	f7fc fadf 	bl	80009c2 <_close>
 8004404:	1c43      	adds	r3, r0, #1
 8004406:	d102      	bne.n	800440e <_close_r+0x1a>
 8004408:	682b      	ldr	r3, [r5, #0]
 800440a:	b103      	cbz	r3, 800440e <_close_r+0x1a>
 800440c:	6023      	str	r3, [r4, #0]
 800440e:	bd38      	pop	{r3, r4, r5, pc}
 8004410:	200043bc 	.word	0x200043bc

08004414 <_lseek_r>:
 8004414:	b538      	push	{r3, r4, r5, lr}
 8004416:	4d07      	ldr	r5, [pc, #28]	@ (8004434 <_lseek_r+0x20>)
 8004418:	4604      	mov	r4, r0
 800441a:	4608      	mov	r0, r1
 800441c:	4611      	mov	r1, r2
 800441e:	2200      	movs	r2, #0
 8004420:	602a      	str	r2, [r5, #0]
 8004422:	461a      	mov	r2, r3
 8004424:	f7fc faf4 	bl	8000a10 <_lseek>
 8004428:	1c43      	adds	r3, r0, #1
 800442a:	d102      	bne.n	8004432 <_lseek_r+0x1e>
 800442c:	682b      	ldr	r3, [r5, #0]
 800442e:	b103      	cbz	r3, 8004432 <_lseek_r+0x1e>
 8004430:	6023      	str	r3, [r4, #0]
 8004432:	bd38      	pop	{r3, r4, r5, pc}
 8004434:	200043bc 	.word	0x200043bc

08004438 <_read_r>:
 8004438:	b538      	push	{r3, r4, r5, lr}
 800443a:	4d07      	ldr	r5, [pc, #28]	@ (8004458 <_read_r+0x20>)
 800443c:	4604      	mov	r4, r0
 800443e:	4608      	mov	r0, r1
 8004440:	4611      	mov	r1, r2
 8004442:	2200      	movs	r2, #0
 8004444:	602a      	str	r2, [r5, #0]
 8004446:	461a      	mov	r2, r3
 8004448:	f7fc fa82 	bl	8000950 <_read>
 800444c:	1c43      	adds	r3, r0, #1
 800444e:	d102      	bne.n	8004456 <_read_r+0x1e>
 8004450:	682b      	ldr	r3, [r5, #0]
 8004452:	b103      	cbz	r3, 8004456 <_read_r+0x1e>
 8004454:	6023      	str	r3, [r4, #0]
 8004456:	bd38      	pop	{r3, r4, r5, pc}
 8004458:	200043bc 	.word	0x200043bc

0800445c <_write_r>:
 800445c:	b538      	push	{r3, r4, r5, lr}
 800445e:	4d07      	ldr	r5, [pc, #28]	@ (800447c <_write_r+0x20>)
 8004460:	4604      	mov	r4, r0
 8004462:	4608      	mov	r0, r1
 8004464:	4611      	mov	r1, r2
 8004466:	2200      	movs	r2, #0
 8004468:	602a      	str	r2, [r5, #0]
 800446a:	461a      	mov	r2, r3
 800446c:	f7fc fa8d 	bl	800098a <_write>
 8004470:	1c43      	adds	r3, r0, #1
 8004472:	d102      	bne.n	800447a <_write_r+0x1e>
 8004474:	682b      	ldr	r3, [r5, #0]
 8004476:	b103      	cbz	r3, 800447a <_write_r+0x1e>
 8004478:	6023      	str	r3, [r4, #0]
 800447a:	bd38      	pop	{r3, r4, r5, pc}
 800447c:	200043bc 	.word	0x200043bc

08004480 <__libc_init_array>:
 8004480:	b570      	push	{r4, r5, r6, lr}
 8004482:	4d0d      	ldr	r5, [pc, #52]	@ (80044b8 <__libc_init_array+0x38>)
 8004484:	4c0d      	ldr	r4, [pc, #52]	@ (80044bc <__libc_init_array+0x3c>)
 8004486:	1b64      	subs	r4, r4, r5
 8004488:	10a4      	asrs	r4, r4, #2
 800448a:	2600      	movs	r6, #0
 800448c:	42a6      	cmp	r6, r4
 800448e:	d109      	bne.n	80044a4 <__libc_init_array+0x24>
 8004490:	4d0b      	ldr	r5, [pc, #44]	@ (80044c0 <__libc_init_array+0x40>)
 8004492:	4c0c      	ldr	r4, [pc, #48]	@ (80044c4 <__libc_init_array+0x44>)
 8004494:	f000 fdd4 	bl	8005040 <_init>
 8004498:	1b64      	subs	r4, r4, r5
 800449a:	10a4      	asrs	r4, r4, #2
 800449c:	2600      	movs	r6, #0
 800449e:	42a6      	cmp	r6, r4
 80044a0:	d105      	bne.n	80044ae <__libc_init_array+0x2e>
 80044a2:	bd70      	pop	{r4, r5, r6, pc}
 80044a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044a8:	4798      	blx	r3
 80044aa:	3601      	adds	r6, #1
 80044ac:	e7ee      	b.n	800448c <__libc_init_array+0xc>
 80044ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80044b2:	4798      	blx	r3
 80044b4:	3601      	adds	r6, #1
 80044b6:	e7f2      	b.n	800449e <__libc_init_array+0x1e>
 80044b8:	080050f0 	.word	0x080050f0
 80044bc:	080050f0 	.word	0x080050f0
 80044c0:	080050f0 	.word	0x080050f0
 80044c4:	080050f4 	.word	0x080050f4

080044c8 <__retarget_lock_init_recursive>:
 80044c8:	4770      	bx	lr

080044ca <__retarget_lock_acquire_recursive>:
 80044ca:	4770      	bx	lr

080044cc <__retarget_lock_release_recursive>:
 80044cc:	4770      	bx	lr

080044ce <memcpy>:
 80044ce:	440a      	add	r2, r1
 80044d0:	4291      	cmp	r1, r2
 80044d2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80044d6:	d100      	bne.n	80044da <memcpy+0xc>
 80044d8:	4770      	bx	lr
 80044da:	b510      	push	{r4, lr}
 80044dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044e4:	4291      	cmp	r1, r2
 80044e6:	d1f9      	bne.n	80044dc <memcpy+0xe>
 80044e8:	bd10      	pop	{r4, pc}
	...

080044ec <_free_r>:
 80044ec:	b538      	push	{r3, r4, r5, lr}
 80044ee:	4605      	mov	r5, r0
 80044f0:	2900      	cmp	r1, #0
 80044f2:	d041      	beq.n	8004578 <_free_r+0x8c>
 80044f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044f8:	1f0c      	subs	r4, r1, #4
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	bfb8      	it	lt
 80044fe:	18e4      	addlt	r4, r4, r3
 8004500:	f000 f8e0 	bl	80046c4 <__malloc_lock>
 8004504:	4a1d      	ldr	r2, [pc, #116]	@ (800457c <_free_r+0x90>)
 8004506:	6813      	ldr	r3, [r2, #0]
 8004508:	b933      	cbnz	r3, 8004518 <_free_r+0x2c>
 800450a:	6063      	str	r3, [r4, #4]
 800450c:	6014      	str	r4, [r2, #0]
 800450e:	4628      	mov	r0, r5
 8004510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004514:	f000 b8dc 	b.w	80046d0 <__malloc_unlock>
 8004518:	42a3      	cmp	r3, r4
 800451a:	d908      	bls.n	800452e <_free_r+0x42>
 800451c:	6820      	ldr	r0, [r4, #0]
 800451e:	1821      	adds	r1, r4, r0
 8004520:	428b      	cmp	r3, r1
 8004522:	bf01      	itttt	eq
 8004524:	6819      	ldreq	r1, [r3, #0]
 8004526:	685b      	ldreq	r3, [r3, #4]
 8004528:	1809      	addeq	r1, r1, r0
 800452a:	6021      	streq	r1, [r4, #0]
 800452c:	e7ed      	b.n	800450a <_free_r+0x1e>
 800452e:	461a      	mov	r2, r3
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	b10b      	cbz	r3, 8004538 <_free_r+0x4c>
 8004534:	42a3      	cmp	r3, r4
 8004536:	d9fa      	bls.n	800452e <_free_r+0x42>
 8004538:	6811      	ldr	r1, [r2, #0]
 800453a:	1850      	adds	r0, r2, r1
 800453c:	42a0      	cmp	r0, r4
 800453e:	d10b      	bne.n	8004558 <_free_r+0x6c>
 8004540:	6820      	ldr	r0, [r4, #0]
 8004542:	4401      	add	r1, r0
 8004544:	1850      	adds	r0, r2, r1
 8004546:	4283      	cmp	r3, r0
 8004548:	6011      	str	r1, [r2, #0]
 800454a:	d1e0      	bne.n	800450e <_free_r+0x22>
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	6053      	str	r3, [r2, #4]
 8004552:	4408      	add	r0, r1
 8004554:	6010      	str	r0, [r2, #0]
 8004556:	e7da      	b.n	800450e <_free_r+0x22>
 8004558:	d902      	bls.n	8004560 <_free_r+0x74>
 800455a:	230c      	movs	r3, #12
 800455c:	602b      	str	r3, [r5, #0]
 800455e:	e7d6      	b.n	800450e <_free_r+0x22>
 8004560:	6820      	ldr	r0, [r4, #0]
 8004562:	1821      	adds	r1, r4, r0
 8004564:	428b      	cmp	r3, r1
 8004566:	bf04      	itt	eq
 8004568:	6819      	ldreq	r1, [r3, #0]
 800456a:	685b      	ldreq	r3, [r3, #4]
 800456c:	6063      	str	r3, [r4, #4]
 800456e:	bf04      	itt	eq
 8004570:	1809      	addeq	r1, r1, r0
 8004572:	6021      	streq	r1, [r4, #0]
 8004574:	6054      	str	r4, [r2, #4]
 8004576:	e7ca      	b.n	800450e <_free_r+0x22>
 8004578:	bd38      	pop	{r3, r4, r5, pc}
 800457a:	bf00      	nop
 800457c:	200043c8 	.word	0x200043c8

08004580 <sbrk_aligned>:
 8004580:	b570      	push	{r4, r5, r6, lr}
 8004582:	4e0f      	ldr	r6, [pc, #60]	@ (80045c0 <sbrk_aligned+0x40>)
 8004584:	460c      	mov	r4, r1
 8004586:	6831      	ldr	r1, [r6, #0]
 8004588:	4605      	mov	r5, r0
 800458a:	b911      	cbnz	r1, 8004592 <sbrk_aligned+0x12>
 800458c:	f000 fcb6 	bl	8004efc <_sbrk_r>
 8004590:	6030      	str	r0, [r6, #0]
 8004592:	4621      	mov	r1, r4
 8004594:	4628      	mov	r0, r5
 8004596:	f000 fcb1 	bl	8004efc <_sbrk_r>
 800459a:	1c43      	adds	r3, r0, #1
 800459c:	d103      	bne.n	80045a6 <sbrk_aligned+0x26>
 800459e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80045a2:	4620      	mov	r0, r4
 80045a4:	bd70      	pop	{r4, r5, r6, pc}
 80045a6:	1cc4      	adds	r4, r0, #3
 80045a8:	f024 0403 	bic.w	r4, r4, #3
 80045ac:	42a0      	cmp	r0, r4
 80045ae:	d0f8      	beq.n	80045a2 <sbrk_aligned+0x22>
 80045b0:	1a21      	subs	r1, r4, r0
 80045b2:	4628      	mov	r0, r5
 80045b4:	f000 fca2 	bl	8004efc <_sbrk_r>
 80045b8:	3001      	adds	r0, #1
 80045ba:	d1f2      	bne.n	80045a2 <sbrk_aligned+0x22>
 80045bc:	e7ef      	b.n	800459e <sbrk_aligned+0x1e>
 80045be:	bf00      	nop
 80045c0:	200043c4 	.word	0x200043c4

080045c4 <_malloc_r>:
 80045c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045c8:	1ccd      	adds	r5, r1, #3
 80045ca:	f025 0503 	bic.w	r5, r5, #3
 80045ce:	3508      	adds	r5, #8
 80045d0:	2d0c      	cmp	r5, #12
 80045d2:	bf38      	it	cc
 80045d4:	250c      	movcc	r5, #12
 80045d6:	2d00      	cmp	r5, #0
 80045d8:	4606      	mov	r6, r0
 80045da:	db01      	blt.n	80045e0 <_malloc_r+0x1c>
 80045dc:	42a9      	cmp	r1, r5
 80045de:	d904      	bls.n	80045ea <_malloc_r+0x26>
 80045e0:	230c      	movs	r3, #12
 80045e2:	6033      	str	r3, [r6, #0]
 80045e4:	2000      	movs	r0, #0
 80045e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80046c0 <_malloc_r+0xfc>
 80045ee:	f000 f869 	bl	80046c4 <__malloc_lock>
 80045f2:	f8d8 3000 	ldr.w	r3, [r8]
 80045f6:	461c      	mov	r4, r3
 80045f8:	bb44      	cbnz	r4, 800464c <_malloc_r+0x88>
 80045fa:	4629      	mov	r1, r5
 80045fc:	4630      	mov	r0, r6
 80045fe:	f7ff ffbf 	bl	8004580 <sbrk_aligned>
 8004602:	1c43      	adds	r3, r0, #1
 8004604:	4604      	mov	r4, r0
 8004606:	d158      	bne.n	80046ba <_malloc_r+0xf6>
 8004608:	f8d8 4000 	ldr.w	r4, [r8]
 800460c:	4627      	mov	r7, r4
 800460e:	2f00      	cmp	r7, #0
 8004610:	d143      	bne.n	800469a <_malloc_r+0xd6>
 8004612:	2c00      	cmp	r4, #0
 8004614:	d04b      	beq.n	80046ae <_malloc_r+0xea>
 8004616:	6823      	ldr	r3, [r4, #0]
 8004618:	4639      	mov	r1, r7
 800461a:	4630      	mov	r0, r6
 800461c:	eb04 0903 	add.w	r9, r4, r3
 8004620:	f000 fc6c 	bl	8004efc <_sbrk_r>
 8004624:	4581      	cmp	r9, r0
 8004626:	d142      	bne.n	80046ae <_malloc_r+0xea>
 8004628:	6821      	ldr	r1, [r4, #0]
 800462a:	1a6d      	subs	r5, r5, r1
 800462c:	4629      	mov	r1, r5
 800462e:	4630      	mov	r0, r6
 8004630:	f7ff ffa6 	bl	8004580 <sbrk_aligned>
 8004634:	3001      	adds	r0, #1
 8004636:	d03a      	beq.n	80046ae <_malloc_r+0xea>
 8004638:	6823      	ldr	r3, [r4, #0]
 800463a:	442b      	add	r3, r5
 800463c:	6023      	str	r3, [r4, #0]
 800463e:	f8d8 3000 	ldr.w	r3, [r8]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	bb62      	cbnz	r2, 80046a0 <_malloc_r+0xdc>
 8004646:	f8c8 7000 	str.w	r7, [r8]
 800464a:	e00f      	b.n	800466c <_malloc_r+0xa8>
 800464c:	6822      	ldr	r2, [r4, #0]
 800464e:	1b52      	subs	r2, r2, r5
 8004650:	d420      	bmi.n	8004694 <_malloc_r+0xd0>
 8004652:	2a0b      	cmp	r2, #11
 8004654:	d917      	bls.n	8004686 <_malloc_r+0xc2>
 8004656:	1961      	adds	r1, r4, r5
 8004658:	42a3      	cmp	r3, r4
 800465a:	6025      	str	r5, [r4, #0]
 800465c:	bf18      	it	ne
 800465e:	6059      	strne	r1, [r3, #4]
 8004660:	6863      	ldr	r3, [r4, #4]
 8004662:	bf08      	it	eq
 8004664:	f8c8 1000 	streq.w	r1, [r8]
 8004668:	5162      	str	r2, [r4, r5]
 800466a:	604b      	str	r3, [r1, #4]
 800466c:	4630      	mov	r0, r6
 800466e:	f000 f82f 	bl	80046d0 <__malloc_unlock>
 8004672:	f104 000b 	add.w	r0, r4, #11
 8004676:	1d23      	adds	r3, r4, #4
 8004678:	f020 0007 	bic.w	r0, r0, #7
 800467c:	1ac2      	subs	r2, r0, r3
 800467e:	bf1c      	itt	ne
 8004680:	1a1b      	subne	r3, r3, r0
 8004682:	50a3      	strne	r3, [r4, r2]
 8004684:	e7af      	b.n	80045e6 <_malloc_r+0x22>
 8004686:	6862      	ldr	r2, [r4, #4]
 8004688:	42a3      	cmp	r3, r4
 800468a:	bf0c      	ite	eq
 800468c:	f8c8 2000 	streq.w	r2, [r8]
 8004690:	605a      	strne	r2, [r3, #4]
 8004692:	e7eb      	b.n	800466c <_malloc_r+0xa8>
 8004694:	4623      	mov	r3, r4
 8004696:	6864      	ldr	r4, [r4, #4]
 8004698:	e7ae      	b.n	80045f8 <_malloc_r+0x34>
 800469a:	463c      	mov	r4, r7
 800469c:	687f      	ldr	r7, [r7, #4]
 800469e:	e7b6      	b.n	800460e <_malloc_r+0x4a>
 80046a0:	461a      	mov	r2, r3
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	42a3      	cmp	r3, r4
 80046a6:	d1fb      	bne.n	80046a0 <_malloc_r+0xdc>
 80046a8:	2300      	movs	r3, #0
 80046aa:	6053      	str	r3, [r2, #4]
 80046ac:	e7de      	b.n	800466c <_malloc_r+0xa8>
 80046ae:	230c      	movs	r3, #12
 80046b0:	6033      	str	r3, [r6, #0]
 80046b2:	4630      	mov	r0, r6
 80046b4:	f000 f80c 	bl	80046d0 <__malloc_unlock>
 80046b8:	e794      	b.n	80045e4 <_malloc_r+0x20>
 80046ba:	6005      	str	r5, [r0, #0]
 80046bc:	e7d6      	b.n	800466c <_malloc_r+0xa8>
 80046be:	bf00      	nop
 80046c0:	200043c8 	.word	0x200043c8

080046c4 <__malloc_lock>:
 80046c4:	4801      	ldr	r0, [pc, #4]	@ (80046cc <__malloc_lock+0x8>)
 80046c6:	f7ff bf00 	b.w	80044ca <__retarget_lock_acquire_recursive>
 80046ca:	bf00      	nop
 80046cc:	200043c0 	.word	0x200043c0

080046d0 <__malloc_unlock>:
 80046d0:	4801      	ldr	r0, [pc, #4]	@ (80046d8 <__malloc_unlock+0x8>)
 80046d2:	f7ff befb 	b.w	80044cc <__retarget_lock_release_recursive>
 80046d6:	bf00      	nop
 80046d8:	200043c0 	.word	0x200043c0

080046dc <__sfputc_r>:
 80046dc:	6893      	ldr	r3, [r2, #8]
 80046de:	3b01      	subs	r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	b410      	push	{r4}
 80046e4:	6093      	str	r3, [r2, #8]
 80046e6:	da08      	bge.n	80046fa <__sfputc_r+0x1e>
 80046e8:	6994      	ldr	r4, [r2, #24]
 80046ea:	42a3      	cmp	r3, r4
 80046ec:	db01      	blt.n	80046f2 <__sfputc_r+0x16>
 80046ee:	290a      	cmp	r1, #10
 80046f0:	d103      	bne.n	80046fa <__sfputc_r+0x1e>
 80046f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046f6:	f000 bb6d 	b.w	8004dd4 <__swbuf_r>
 80046fa:	6813      	ldr	r3, [r2, #0]
 80046fc:	1c58      	adds	r0, r3, #1
 80046fe:	6010      	str	r0, [r2, #0]
 8004700:	7019      	strb	r1, [r3, #0]
 8004702:	4608      	mov	r0, r1
 8004704:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004708:	4770      	bx	lr

0800470a <__sfputs_r>:
 800470a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470c:	4606      	mov	r6, r0
 800470e:	460f      	mov	r7, r1
 8004710:	4614      	mov	r4, r2
 8004712:	18d5      	adds	r5, r2, r3
 8004714:	42ac      	cmp	r4, r5
 8004716:	d101      	bne.n	800471c <__sfputs_r+0x12>
 8004718:	2000      	movs	r0, #0
 800471a:	e007      	b.n	800472c <__sfputs_r+0x22>
 800471c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004720:	463a      	mov	r2, r7
 8004722:	4630      	mov	r0, r6
 8004724:	f7ff ffda 	bl	80046dc <__sfputc_r>
 8004728:	1c43      	adds	r3, r0, #1
 800472a:	d1f3      	bne.n	8004714 <__sfputs_r+0xa>
 800472c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004730 <_vfiprintf_r>:
 8004730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004734:	460d      	mov	r5, r1
 8004736:	b09d      	sub	sp, #116	@ 0x74
 8004738:	4614      	mov	r4, r2
 800473a:	4698      	mov	r8, r3
 800473c:	4606      	mov	r6, r0
 800473e:	b118      	cbz	r0, 8004748 <_vfiprintf_r+0x18>
 8004740:	6a03      	ldr	r3, [r0, #32]
 8004742:	b90b      	cbnz	r3, 8004748 <_vfiprintf_r+0x18>
 8004744:	f7ff fdc2 	bl	80042cc <__sinit>
 8004748:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800474a:	07d9      	lsls	r1, r3, #31
 800474c:	d405      	bmi.n	800475a <_vfiprintf_r+0x2a>
 800474e:	89ab      	ldrh	r3, [r5, #12]
 8004750:	059a      	lsls	r2, r3, #22
 8004752:	d402      	bmi.n	800475a <_vfiprintf_r+0x2a>
 8004754:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004756:	f7ff feb8 	bl	80044ca <__retarget_lock_acquire_recursive>
 800475a:	89ab      	ldrh	r3, [r5, #12]
 800475c:	071b      	lsls	r3, r3, #28
 800475e:	d501      	bpl.n	8004764 <_vfiprintf_r+0x34>
 8004760:	692b      	ldr	r3, [r5, #16]
 8004762:	b99b      	cbnz	r3, 800478c <_vfiprintf_r+0x5c>
 8004764:	4629      	mov	r1, r5
 8004766:	4630      	mov	r0, r6
 8004768:	f000 fb72 	bl	8004e50 <__swsetup_r>
 800476c:	b170      	cbz	r0, 800478c <_vfiprintf_r+0x5c>
 800476e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004770:	07dc      	lsls	r4, r3, #31
 8004772:	d504      	bpl.n	800477e <_vfiprintf_r+0x4e>
 8004774:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004778:	b01d      	add	sp, #116	@ 0x74
 800477a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800477e:	89ab      	ldrh	r3, [r5, #12]
 8004780:	0598      	lsls	r0, r3, #22
 8004782:	d4f7      	bmi.n	8004774 <_vfiprintf_r+0x44>
 8004784:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004786:	f7ff fea1 	bl	80044cc <__retarget_lock_release_recursive>
 800478a:	e7f3      	b.n	8004774 <_vfiprintf_r+0x44>
 800478c:	2300      	movs	r3, #0
 800478e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004790:	2320      	movs	r3, #32
 8004792:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004796:	f8cd 800c 	str.w	r8, [sp, #12]
 800479a:	2330      	movs	r3, #48	@ 0x30
 800479c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800494c <_vfiprintf_r+0x21c>
 80047a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80047a4:	f04f 0901 	mov.w	r9, #1
 80047a8:	4623      	mov	r3, r4
 80047aa:	469a      	mov	sl, r3
 80047ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047b0:	b10a      	cbz	r2, 80047b6 <_vfiprintf_r+0x86>
 80047b2:	2a25      	cmp	r2, #37	@ 0x25
 80047b4:	d1f9      	bne.n	80047aa <_vfiprintf_r+0x7a>
 80047b6:	ebba 0b04 	subs.w	fp, sl, r4
 80047ba:	d00b      	beq.n	80047d4 <_vfiprintf_r+0xa4>
 80047bc:	465b      	mov	r3, fp
 80047be:	4622      	mov	r2, r4
 80047c0:	4629      	mov	r1, r5
 80047c2:	4630      	mov	r0, r6
 80047c4:	f7ff ffa1 	bl	800470a <__sfputs_r>
 80047c8:	3001      	adds	r0, #1
 80047ca:	f000 80a7 	beq.w	800491c <_vfiprintf_r+0x1ec>
 80047ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047d0:	445a      	add	r2, fp
 80047d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80047d4:	f89a 3000 	ldrb.w	r3, [sl]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 809f 	beq.w	800491c <_vfiprintf_r+0x1ec>
 80047de:	2300      	movs	r3, #0
 80047e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80047e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047e8:	f10a 0a01 	add.w	sl, sl, #1
 80047ec:	9304      	str	r3, [sp, #16]
 80047ee:	9307      	str	r3, [sp, #28]
 80047f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80047f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80047f6:	4654      	mov	r4, sl
 80047f8:	2205      	movs	r2, #5
 80047fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047fe:	4853      	ldr	r0, [pc, #332]	@ (800494c <_vfiprintf_r+0x21c>)
 8004800:	f7fb fcee 	bl	80001e0 <memchr>
 8004804:	9a04      	ldr	r2, [sp, #16]
 8004806:	b9d8      	cbnz	r0, 8004840 <_vfiprintf_r+0x110>
 8004808:	06d1      	lsls	r1, r2, #27
 800480a:	bf44      	itt	mi
 800480c:	2320      	movmi	r3, #32
 800480e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004812:	0713      	lsls	r3, r2, #28
 8004814:	bf44      	itt	mi
 8004816:	232b      	movmi	r3, #43	@ 0x2b
 8004818:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800481c:	f89a 3000 	ldrb.w	r3, [sl]
 8004820:	2b2a      	cmp	r3, #42	@ 0x2a
 8004822:	d015      	beq.n	8004850 <_vfiprintf_r+0x120>
 8004824:	9a07      	ldr	r2, [sp, #28]
 8004826:	4654      	mov	r4, sl
 8004828:	2000      	movs	r0, #0
 800482a:	f04f 0c0a 	mov.w	ip, #10
 800482e:	4621      	mov	r1, r4
 8004830:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004834:	3b30      	subs	r3, #48	@ 0x30
 8004836:	2b09      	cmp	r3, #9
 8004838:	d94b      	bls.n	80048d2 <_vfiprintf_r+0x1a2>
 800483a:	b1b0      	cbz	r0, 800486a <_vfiprintf_r+0x13a>
 800483c:	9207      	str	r2, [sp, #28]
 800483e:	e014      	b.n	800486a <_vfiprintf_r+0x13a>
 8004840:	eba0 0308 	sub.w	r3, r0, r8
 8004844:	fa09 f303 	lsl.w	r3, r9, r3
 8004848:	4313      	orrs	r3, r2
 800484a:	9304      	str	r3, [sp, #16]
 800484c:	46a2      	mov	sl, r4
 800484e:	e7d2      	b.n	80047f6 <_vfiprintf_r+0xc6>
 8004850:	9b03      	ldr	r3, [sp, #12]
 8004852:	1d19      	adds	r1, r3, #4
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	9103      	str	r1, [sp, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	bfbb      	ittet	lt
 800485c:	425b      	neglt	r3, r3
 800485e:	f042 0202 	orrlt.w	r2, r2, #2
 8004862:	9307      	strge	r3, [sp, #28]
 8004864:	9307      	strlt	r3, [sp, #28]
 8004866:	bfb8      	it	lt
 8004868:	9204      	strlt	r2, [sp, #16]
 800486a:	7823      	ldrb	r3, [r4, #0]
 800486c:	2b2e      	cmp	r3, #46	@ 0x2e
 800486e:	d10a      	bne.n	8004886 <_vfiprintf_r+0x156>
 8004870:	7863      	ldrb	r3, [r4, #1]
 8004872:	2b2a      	cmp	r3, #42	@ 0x2a
 8004874:	d132      	bne.n	80048dc <_vfiprintf_r+0x1ac>
 8004876:	9b03      	ldr	r3, [sp, #12]
 8004878:	1d1a      	adds	r2, r3, #4
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	9203      	str	r2, [sp, #12]
 800487e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004882:	3402      	adds	r4, #2
 8004884:	9305      	str	r3, [sp, #20]
 8004886:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800495c <_vfiprintf_r+0x22c>
 800488a:	7821      	ldrb	r1, [r4, #0]
 800488c:	2203      	movs	r2, #3
 800488e:	4650      	mov	r0, sl
 8004890:	f7fb fca6 	bl	80001e0 <memchr>
 8004894:	b138      	cbz	r0, 80048a6 <_vfiprintf_r+0x176>
 8004896:	9b04      	ldr	r3, [sp, #16]
 8004898:	eba0 000a 	sub.w	r0, r0, sl
 800489c:	2240      	movs	r2, #64	@ 0x40
 800489e:	4082      	lsls	r2, r0
 80048a0:	4313      	orrs	r3, r2
 80048a2:	3401      	adds	r4, #1
 80048a4:	9304      	str	r3, [sp, #16]
 80048a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048aa:	4829      	ldr	r0, [pc, #164]	@ (8004950 <_vfiprintf_r+0x220>)
 80048ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80048b0:	2206      	movs	r2, #6
 80048b2:	f7fb fc95 	bl	80001e0 <memchr>
 80048b6:	2800      	cmp	r0, #0
 80048b8:	d03f      	beq.n	800493a <_vfiprintf_r+0x20a>
 80048ba:	4b26      	ldr	r3, [pc, #152]	@ (8004954 <_vfiprintf_r+0x224>)
 80048bc:	bb1b      	cbnz	r3, 8004906 <_vfiprintf_r+0x1d6>
 80048be:	9b03      	ldr	r3, [sp, #12]
 80048c0:	3307      	adds	r3, #7
 80048c2:	f023 0307 	bic.w	r3, r3, #7
 80048c6:	3308      	adds	r3, #8
 80048c8:	9303      	str	r3, [sp, #12]
 80048ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048cc:	443b      	add	r3, r7
 80048ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80048d0:	e76a      	b.n	80047a8 <_vfiprintf_r+0x78>
 80048d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80048d6:	460c      	mov	r4, r1
 80048d8:	2001      	movs	r0, #1
 80048da:	e7a8      	b.n	800482e <_vfiprintf_r+0xfe>
 80048dc:	2300      	movs	r3, #0
 80048de:	3401      	adds	r4, #1
 80048e0:	9305      	str	r3, [sp, #20]
 80048e2:	4619      	mov	r1, r3
 80048e4:	f04f 0c0a 	mov.w	ip, #10
 80048e8:	4620      	mov	r0, r4
 80048ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048ee:	3a30      	subs	r2, #48	@ 0x30
 80048f0:	2a09      	cmp	r2, #9
 80048f2:	d903      	bls.n	80048fc <_vfiprintf_r+0x1cc>
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d0c6      	beq.n	8004886 <_vfiprintf_r+0x156>
 80048f8:	9105      	str	r1, [sp, #20]
 80048fa:	e7c4      	b.n	8004886 <_vfiprintf_r+0x156>
 80048fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004900:	4604      	mov	r4, r0
 8004902:	2301      	movs	r3, #1
 8004904:	e7f0      	b.n	80048e8 <_vfiprintf_r+0x1b8>
 8004906:	ab03      	add	r3, sp, #12
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	462a      	mov	r2, r5
 800490c:	4b12      	ldr	r3, [pc, #72]	@ (8004958 <_vfiprintf_r+0x228>)
 800490e:	a904      	add	r1, sp, #16
 8004910:	4630      	mov	r0, r6
 8004912:	f3af 8000 	nop.w
 8004916:	4607      	mov	r7, r0
 8004918:	1c78      	adds	r0, r7, #1
 800491a:	d1d6      	bne.n	80048ca <_vfiprintf_r+0x19a>
 800491c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800491e:	07d9      	lsls	r1, r3, #31
 8004920:	d405      	bmi.n	800492e <_vfiprintf_r+0x1fe>
 8004922:	89ab      	ldrh	r3, [r5, #12]
 8004924:	059a      	lsls	r2, r3, #22
 8004926:	d402      	bmi.n	800492e <_vfiprintf_r+0x1fe>
 8004928:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800492a:	f7ff fdcf 	bl	80044cc <__retarget_lock_release_recursive>
 800492e:	89ab      	ldrh	r3, [r5, #12]
 8004930:	065b      	lsls	r3, r3, #25
 8004932:	f53f af1f 	bmi.w	8004774 <_vfiprintf_r+0x44>
 8004936:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004938:	e71e      	b.n	8004778 <_vfiprintf_r+0x48>
 800493a:	ab03      	add	r3, sp, #12
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	462a      	mov	r2, r5
 8004940:	4b05      	ldr	r3, [pc, #20]	@ (8004958 <_vfiprintf_r+0x228>)
 8004942:	a904      	add	r1, sp, #16
 8004944:	4630      	mov	r0, r6
 8004946:	f000 f879 	bl	8004a3c <_printf_i>
 800494a:	e7e4      	b.n	8004916 <_vfiprintf_r+0x1e6>
 800494c:	080050b4 	.word	0x080050b4
 8004950:	080050be 	.word	0x080050be
 8004954:	00000000 	.word	0x00000000
 8004958:	0800470b 	.word	0x0800470b
 800495c:	080050ba 	.word	0x080050ba

08004960 <_printf_common>:
 8004960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004964:	4616      	mov	r6, r2
 8004966:	4698      	mov	r8, r3
 8004968:	688a      	ldr	r2, [r1, #8]
 800496a:	690b      	ldr	r3, [r1, #16]
 800496c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004970:	4293      	cmp	r3, r2
 8004972:	bfb8      	it	lt
 8004974:	4613      	movlt	r3, r2
 8004976:	6033      	str	r3, [r6, #0]
 8004978:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800497c:	4607      	mov	r7, r0
 800497e:	460c      	mov	r4, r1
 8004980:	b10a      	cbz	r2, 8004986 <_printf_common+0x26>
 8004982:	3301      	adds	r3, #1
 8004984:	6033      	str	r3, [r6, #0]
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	0699      	lsls	r1, r3, #26
 800498a:	bf42      	ittt	mi
 800498c:	6833      	ldrmi	r3, [r6, #0]
 800498e:	3302      	addmi	r3, #2
 8004990:	6033      	strmi	r3, [r6, #0]
 8004992:	6825      	ldr	r5, [r4, #0]
 8004994:	f015 0506 	ands.w	r5, r5, #6
 8004998:	d106      	bne.n	80049a8 <_printf_common+0x48>
 800499a:	f104 0a19 	add.w	sl, r4, #25
 800499e:	68e3      	ldr	r3, [r4, #12]
 80049a0:	6832      	ldr	r2, [r6, #0]
 80049a2:	1a9b      	subs	r3, r3, r2
 80049a4:	42ab      	cmp	r3, r5
 80049a6:	dc26      	bgt.n	80049f6 <_printf_common+0x96>
 80049a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80049ac:	6822      	ldr	r2, [r4, #0]
 80049ae:	3b00      	subs	r3, #0
 80049b0:	bf18      	it	ne
 80049b2:	2301      	movne	r3, #1
 80049b4:	0692      	lsls	r2, r2, #26
 80049b6:	d42b      	bmi.n	8004a10 <_printf_common+0xb0>
 80049b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80049bc:	4641      	mov	r1, r8
 80049be:	4638      	mov	r0, r7
 80049c0:	47c8      	blx	r9
 80049c2:	3001      	adds	r0, #1
 80049c4:	d01e      	beq.n	8004a04 <_printf_common+0xa4>
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	6922      	ldr	r2, [r4, #16]
 80049ca:	f003 0306 	and.w	r3, r3, #6
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	bf02      	ittt	eq
 80049d2:	68e5      	ldreq	r5, [r4, #12]
 80049d4:	6833      	ldreq	r3, [r6, #0]
 80049d6:	1aed      	subeq	r5, r5, r3
 80049d8:	68a3      	ldr	r3, [r4, #8]
 80049da:	bf0c      	ite	eq
 80049dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049e0:	2500      	movne	r5, #0
 80049e2:	4293      	cmp	r3, r2
 80049e4:	bfc4      	itt	gt
 80049e6:	1a9b      	subgt	r3, r3, r2
 80049e8:	18ed      	addgt	r5, r5, r3
 80049ea:	2600      	movs	r6, #0
 80049ec:	341a      	adds	r4, #26
 80049ee:	42b5      	cmp	r5, r6
 80049f0:	d11a      	bne.n	8004a28 <_printf_common+0xc8>
 80049f2:	2000      	movs	r0, #0
 80049f4:	e008      	b.n	8004a08 <_printf_common+0xa8>
 80049f6:	2301      	movs	r3, #1
 80049f8:	4652      	mov	r2, sl
 80049fa:	4641      	mov	r1, r8
 80049fc:	4638      	mov	r0, r7
 80049fe:	47c8      	blx	r9
 8004a00:	3001      	adds	r0, #1
 8004a02:	d103      	bne.n	8004a0c <_printf_common+0xac>
 8004a04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a0c:	3501      	adds	r5, #1
 8004a0e:	e7c6      	b.n	800499e <_printf_common+0x3e>
 8004a10:	18e1      	adds	r1, r4, r3
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	2030      	movs	r0, #48	@ 0x30
 8004a16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a1a:	4422      	add	r2, r4
 8004a1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a24:	3302      	adds	r3, #2
 8004a26:	e7c7      	b.n	80049b8 <_printf_common+0x58>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	4622      	mov	r2, r4
 8004a2c:	4641      	mov	r1, r8
 8004a2e:	4638      	mov	r0, r7
 8004a30:	47c8      	blx	r9
 8004a32:	3001      	adds	r0, #1
 8004a34:	d0e6      	beq.n	8004a04 <_printf_common+0xa4>
 8004a36:	3601      	adds	r6, #1
 8004a38:	e7d9      	b.n	80049ee <_printf_common+0x8e>
	...

08004a3c <_printf_i>:
 8004a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a40:	7e0f      	ldrb	r7, [r1, #24]
 8004a42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a44:	2f78      	cmp	r7, #120	@ 0x78
 8004a46:	4691      	mov	r9, r2
 8004a48:	4680      	mov	r8, r0
 8004a4a:	460c      	mov	r4, r1
 8004a4c:	469a      	mov	sl, r3
 8004a4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a52:	d807      	bhi.n	8004a64 <_printf_i+0x28>
 8004a54:	2f62      	cmp	r7, #98	@ 0x62
 8004a56:	d80a      	bhi.n	8004a6e <_printf_i+0x32>
 8004a58:	2f00      	cmp	r7, #0
 8004a5a:	f000 80d2 	beq.w	8004c02 <_printf_i+0x1c6>
 8004a5e:	2f58      	cmp	r7, #88	@ 0x58
 8004a60:	f000 80b9 	beq.w	8004bd6 <_printf_i+0x19a>
 8004a64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a6c:	e03a      	b.n	8004ae4 <_printf_i+0xa8>
 8004a6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a72:	2b15      	cmp	r3, #21
 8004a74:	d8f6      	bhi.n	8004a64 <_printf_i+0x28>
 8004a76:	a101      	add	r1, pc, #4	@ (adr r1, 8004a7c <_printf_i+0x40>)
 8004a78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a7c:	08004ad5 	.word	0x08004ad5
 8004a80:	08004ae9 	.word	0x08004ae9
 8004a84:	08004a65 	.word	0x08004a65
 8004a88:	08004a65 	.word	0x08004a65
 8004a8c:	08004a65 	.word	0x08004a65
 8004a90:	08004a65 	.word	0x08004a65
 8004a94:	08004ae9 	.word	0x08004ae9
 8004a98:	08004a65 	.word	0x08004a65
 8004a9c:	08004a65 	.word	0x08004a65
 8004aa0:	08004a65 	.word	0x08004a65
 8004aa4:	08004a65 	.word	0x08004a65
 8004aa8:	08004be9 	.word	0x08004be9
 8004aac:	08004b13 	.word	0x08004b13
 8004ab0:	08004ba3 	.word	0x08004ba3
 8004ab4:	08004a65 	.word	0x08004a65
 8004ab8:	08004a65 	.word	0x08004a65
 8004abc:	08004c0b 	.word	0x08004c0b
 8004ac0:	08004a65 	.word	0x08004a65
 8004ac4:	08004b13 	.word	0x08004b13
 8004ac8:	08004a65 	.word	0x08004a65
 8004acc:	08004a65 	.word	0x08004a65
 8004ad0:	08004bab 	.word	0x08004bab
 8004ad4:	6833      	ldr	r3, [r6, #0]
 8004ad6:	1d1a      	adds	r2, r3, #4
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6032      	str	r2, [r6, #0]
 8004adc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ae0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e09d      	b.n	8004c24 <_printf_i+0x1e8>
 8004ae8:	6833      	ldr	r3, [r6, #0]
 8004aea:	6820      	ldr	r0, [r4, #0]
 8004aec:	1d19      	adds	r1, r3, #4
 8004aee:	6031      	str	r1, [r6, #0]
 8004af0:	0606      	lsls	r6, r0, #24
 8004af2:	d501      	bpl.n	8004af8 <_printf_i+0xbc>
 8004af4:	681d      	ldr	r5, [r3, #0]
 8004af6:	e003      	b.n	8004b00 <_printf_i+0xc4>
 8004af8:	0645      	lsls	r5, r0, #25
 8004afa:	d5fb      	bpl.n	8004af4 <_printf_i+0xb8>
 8004afc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b00:	2d00      	cmp	r5, #0
 8004b02:	da03      	bge.n	8004b0c <_printf_i+0xd0>
 8004b04:	232d      	movs	r3, #45	@ 0x2d
 8004b06:	426d      	negs	r5, r5
 8004b08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b0c:	4859      	ldr	r0, [pc, #356]	@ (8004c74 <_printf_i+0x238>)
 8004b0e:	230a      	movs	r3, #10
 8004b10:	e011      	b.n	8004b36 <_printf_i+0xfa>
 8004b12:	6821      	ldr	r1, [r4, #0]
 8004b14:	6833      	ldr	r3, [r6, #0]
 8004b16:	0608      	lsls	r0, r1, #24
 8004b18:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b1c:	d402      	bmi.n	8004b24 <_printf_i+0xe8>
 8004b1e:	0649      	lsls	r1, r1, #25
 8004b20:	bf48      	it	mi
 8004b22:	b2ad      	uxthmi	r5, r5
 8004b24:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b26:	4853      	ldr	r0, [pc, #332]	@ (8004c74 <_printf_i+0x238>)
 8004b28:	6033      	str	r3, [r6, #0]
 8004b2a:	bf14      	ite	ne
 8004b2c:	230a      	movne	r3, #10
 8004b2e:	2308      	moveq	r3, #8
 8004b30:	2100      	movs	r1, #0
 8004b32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b36:	6866      	ldr	r6, [r4, #4]
 8004b38:	60a6      	str	r6, [r4, #8]
 8004b3a:	2e00      	cmp	r6, #0
 8004b3c:	bfa2      	ittt	ge
 8004b3e:	6821      	ldrge	r1, [r4, #0]
 8004b40:	f021 0104 	bicge.w	r1, r1, #4
 8004b44:	6021      	strge	r1, [r4, #0]
 8004b46:	b90d      	cbnz	r5, 8004b4c <_printf_i+0x110>
 8004b48:	2e00      	cmp	r6, #0
 8004b4a:	d04b      	beq.n	8004be4 <_printf_i+0x1a8>
 8004b4c:	4616      	mov	r6, r2
 8004b4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b52:	fb03 5711 	mls	r7, r3, r1, r5
 8004b56:	5dc7      	ldrb	r7, [r0, r7]
 8004b58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b5c:	462f      	mov	r7, r5
 8004b5e:	42bb      	cmp	r3, r7
 8004b60:	460d      	mov	r5, r1
 8004b62:	d9f4      	bls.n	8004b4e <_printf_i+0x112>
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d10b      	bne.n	8004b80 <_printf_i+0x144>
 8004b68:	6823      	ldr	r3, [r4, #0]
 8004b6a:	07df      	lsls	r7, r3, #31
 8004b6c:	d508      	bpl.n	8004b80 <_printf_i+0x144>
 8004b6e:	6923      	ldr	r3, [r4, #16]
 8004b70:	6861      	ldr	r1, [r4, #4]
 8004b72:	4299      	cmp	r1, r3
 8004b74:	bfde      	ittt	le
 8004b76:	2330      	movle	r3, #48	@ 0x30
 8004b78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b7c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004b80:	1b92      	subs	r2, r2, r6
 8004b82:	6122      	str	r2, [r4, #16]
 8004b84:	f8cd a000 	str.w	sl, [sp]
 8004b88:	464b      	mov	r3, r9
 8004b8a:	aa03      	add	r2, sp, #12
 8004b8c:	4621      	mov	r1, r4
 8004b8e:	4640      	mov	r0, r8
 8004b90:	f7ff fee6 	bl	8004960 <_printf_common>
 8004b94:	3001      	adds	r0, #1
 8004b96:	d14a      	bne.n	8004c2e <_printf_i+0x1f2>
 8004b98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b9c:	b004      	add	sp, #16
 8004b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	f043 0320 	orr.w	r3, r3, #32
 8004ba8:	6023      	str	r3, [r4, #0]
 8004baa:	4833      	ldr	r0, [pc, #204]	@ (8004c78 <_printf_i+0x23c>)
 8004bac:	2778      	movs	r7, #120	@ 0x78
 8004bae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	6831      	ldr	r1, [r6, #0]
 8004bb6:	061f      	lsls	r7, r3, #24
 8004bb8:	f851 5b04 	ldr.w	r5, [r1], #4
 8004bbc:	d402      	bmi.n	8004bc4 <_printf_i+0x188>
 8004bbe:	065f      	lsls	r7, r3, #25
 8004bc0:	bf48      	it	mi
 8004bc2:	b2ad      	uxthmi	r5, r5
 8004bc4:	6031      	str	r1, [r6, #0]
 8004bc6:	07d9      	lsls	r1, r3, #31
 8004bc8:	bf44      	itt	mi
 8004bca:	f043 0320 	orrmi.w	r3, r3, #32
 8004bce:	6023      	strmi	r3, [r4, #0]
 8004bd0:	b11d      	cbz	r5, 8004bda <_printf_i+0x19e>
 8004bd2:	2310      	movs	r3, #16
 8004bd4:	e7ac      	b.n	8004b30 <_printf_i+0xf4>
 8004bd6:	4827      	ldr	r0, [pc, #156]	@ (8004c74 <_printf_i+0x238>)
 8004bd8:	e7e9      	b.n	8004bae <_printf_i+0x172>
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	f023 0320 	bic.w	r3, r3, #32
 8004be0:	6023      	str	r3, [r4, #0]
 8004be2:	e7f6      	b.n	8004bd2 <_printf_i+0x196>
 8004be4:	4616      	mov	r6, r2
 8004be6:	e7bd      	b.n	8004b64 <_printf_i+0x128>
 8004be8:	6833      	ldr	r3, [r6, #0]
 8004bea:	6825      	ldr	r5, [r4, #0]
 8004bec:	6961      	ldr	r1, [r4, #20]
 8004bee:	1d18      	adds	r0, r3, #4
 8004bf0:	6030      	str	r0, [r6, #0]
 8004bf2:	062e      	lsls	r6, r5, #24
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	d501      	bpl.n	8004bfc <_printf_i+0x1c0>
 8004bf8:	6019      	str	r1, [r3, #0]
 8004bfa:	e002      	b.n	8004c02 <_printf_i+0x1c6>
 8004bfc:	0668      	lsls	r0, r5, #25
 8004bfe:	d5fb      	bpl.n	8004bf8 <_printf_i+0x1bc>
 8004c00:	8019      	strh	r1, [r3, #0]
 8004c02:	2300      	movs	r3, #0
 8004c04:	6123      	str	r3, [r4, #16]
 8004c06:	4616      	mov	r6, r2
 8004c08:	e7bc      	b.n	8004b84 <_printf_i+0x148>
 8004c0a:	6833      	ldr	r3, [r6, #0]
 8004c0c:	1d1a      	adds	r2, r3, #4
 8004c0e:	6032      	str	r2, [r6, #0]
 8004c10:	681e      	ldr	r6, [r3, #0]
 8004c12:	6862      	ldr	r2, [r4, #4]
 8004c14:	2100      	movs	r1, #0
 8004c16:	4630      	mov	r0, r6
 8004c18:	f7fb fae2 	bl	80001e0 <memchr>
 8004c1c:	b108      	cbz	r0, 8004c22 <_printf_i+0x1e6>
 8004c1e:	1b80      	subs	r0, r0, r6
 8004c20:	6060      	str	r0, [r4, #4]
 8004c22:	6863      	ldr	r3, [r4, #4]
 8004c24:	6123      	str	r3, [r4, #16]
 8004c26:	2300      	movs	r3, #0
 8004c28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c2c:	e7aa      	b.n	8004b84 <_printf_i+0x148>
 8004c2e:	6923      	ldr	r3, [r4, #16]
 8004c30:	4632      	mov	r2, r6
 8004c32:	4649      	mov	r1, r9
 8004c34:	4640      	mov	r0, r8
 8004c36:	47d0      	blx	sl
 8004c38:	3001      	adds	r0, #1
 8004c3a:	d0ad      	beq.n	8004b98 <_printf_i+0x15c>
 8004c3c:	6823      	ldr	r3, [r4, #0]
 8004c3e:	079b      	lsls	r3, r3, #30
 8004c40:	d413      	bmi.n	8004c6a <_printf_i+0x22e>
 8004c42:	68e0      	ldr	r0, [r4, #12]
 8004c44:	9b03      	ldr	r3, [sp, #12]
 8004c46:	4298      	cmp	r0, r3
 8004c48:	bfb8      	it	lt
 8004c4a:	4618      	movlt	r0, r3
 8004c4c:	e7a6      	b.n	8004b9c <_printf_i+0x160>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	4632      	mov	r2, r6
 8004c52:	4649      	mov	r1, r9
 8004c54:	4640      	mov	r0, r8
 8004c56:	47d0      	blx	sl
 8004c58:	3001      	adds	r0, #1
 8004c5a:	d09d      	beq.n	8004b98 <_printf_i+0x15c>
 8004c5c:	3501      	adds	r5, #1
 8004c5e:	68e3      	ldr	r3, [r4, #12]
 8004c60:	9903      	ldr	r1, [sp, #12]
 8004c62:	1a5b      	subs	r3, r3, r1
 8004c64:	42ab      	cmp	r3, r5
 8004c66:	dcf2      	bgt.n	8004c4e <_printf_i+0x212>
 8004c68:	e7eb      	b.n	8004c42 <_printf_i+0x206>
 8004c6a:	2500      	movs	r5, #0
 8004c6c:	f104 0619 	add.w	r6, r4, #25
 8004c70:	e7f5      	b.n	8004c5e <_printf_i+0x222>
 8004c72:	bf00      	nop
 8004c74:	080050c5 	.word	0x080050c5
 8004c78:	080050d6 	.word	0x080050d6

08004c7c <__sflush_r>:
 8004c7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c84:	0716      	lsls	r6, r2, #28
 8004c86:	4605      	mov	r5, r0
 8004c88:	460c      	mov	r4, r1
 8004c8a:	d454      	bmi.n	8004d36 <__sflush_r+0xba>
 8004c8c:	684b      	ldr	r3, [r1, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	dc02      	bgt.n	8004c98 <__sflush_r+0x1c>
 8004c92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	dd48      	ble.n	8004d2a <__sflush_r+0xae>
 8004c98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c9a:	2e00      	cmp	r6, #0
 8004c9c:	d045      	beq.n	8004d2a <__sflush_r+0xae>
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004ca4:	682f      	ldr	r7, [r5, #0]
 8004ca6:	6a21      	ldr	r1, [r4, #32]
 8004ca8:	602b      	str	r3, [r5, #0]
 8004caa:	d030      	beq.n	8004d0e <__sflush_r+0x92>
 8004cac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004cae:	89a3      	ldrh	r3, [r4, #12]
 8004cb0:	0759      	lsls	r1, r3, #29
 8004cb2:	d505      	bpl.n	8004cc0 <__sflush_r+0x44>
 8004cb4:	6863      	ldr	r3, [r4, #4]
 8004cb6:	1ad2      	subs	r2, r2, r3
 8004cb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004cba:	b10b      	cbz	r3, 8004cc0 <__sflush_r+0x44>
 8004cbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004cbe:	1ad2      	subs	r2, r2, r3
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004cc4:	6a21      	ldr	r1, [r4, #32]
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	47b0      	blx	r6
 8004cca:	1c43      	adds	r3, r0, #1
 8004ccc:	89a3      	ldrh	r3, [r4, #12]
 8004cce:	d106      	bne.n	8004cde <__sflush_r+0x62>
 8004cd0:	6829      	ldr	r1, [r5, #0]
 8004cd2:	291d      	cmp	r1, #29
 8004cd4:	d82b      	bhi.n	8004d2e <__sflush_r+0xb2>
 8004cd6:	4a2a      	ldr	r2, [pc, #168]	@ (8004d80 <__sflush_r+0x104>)
 8004cd8:	410a      	asrs	r2, r1
 8004cda:	07d6      	lsls	r6, r2, #31
 8004cdc:	d427      	bmi.n	8004d2e <__sflush_r+0xb2>
 8004cde:	2200      	movs	r2, #0
 8004ce0:	6062      	str	r2, [r4, #4]
 8004ce2:	04d9      	lsls	r1, r3, #19
 8004ce4:	6922      	ldr	r2, [r4, #16]
 8004ce6:	6022      	str	r2, [r4, #0]
 8004ce8:	d504      	bpl.n	8004cf4 <__sflush_r+0x78>
 8004cea:	1c42      	adds	r2, r0, #1
 8004cec:	d101      	bne.n	8004cf2 <__sflush_r+0x76>
 8004cee:	682b      	ldr	r3, [r5, #0]
 8004cf0:	b903      	cbnz	r3, 8004cf4 <__sflush_r+0x78>
 8004cf2:	6560      	str	r0, [r4, #84]	@ 0x54
 8004cf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004cf6:	602f      	str	r7, [r5, #0]
 8004cf8:	b1b9      	cbz	r1, 8004d2a <__sflush_r+0xae>
 8004cfa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004cfe:	4299      	cmp	r1, r3
 8004d00:	d002      	beq.n	8004d08 <__sflush_r+0x8c>
 8004d02:	4628      	mov	r0, r5
 8004d04:	f7ff fbf2 	bl	80044ec <_free_r>
 8004d08:	2300      	movs	r3, #0
 8004d0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8004d0c:	e00d      	b.n	8004d2a <__sflush_r+0xae>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	4628      	mov	r0, r5
 8004d12:	47b0      	blx	r6
 8004d14:	4602      	mov	r2, r0
 8004d16:	1c50      	adds	r0, r2, #1
 8004d18:	d1c9      	bne.n	8004cae <__sflush_r+0x32>
 8004d1a:	682b      	ldr	r3, [r5, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0c6      	beq.n	8004cae <__sflush_r+0x32>
 8004d20:	2b1d      	cmp	r3, #29
 8004d22:	d001      	beq.n	8004d28 <__sflush_r+0xac>
 8004d24:	2b16      	cmp	r3, #22
 8004d26:	d11e      	bne.n	8004d66 <__sflush_r+0xea>
 8004d28:	602f      	str	r7, [r5, #0]
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	e022      	b.n	8004d74 <__sflush_r+0xf8>
 8004d2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d32:	b21b      	sxth	r3, r3
 8004d34:	e01b      	b.n	8004d6e <__sflush_r+0xf2>
 8004d36:	690f      	ldr	r7, [r1, #16]
 8004d38:	2f00      	cmp	r7, #0
 8004d3a:	d0f6      	beq.n	8004d2a <__sflush_r+0xae>
 8004d3c:	0793      	lsls	r3, r2, #30
 8004d3e:	680e      	ldr	r6, [r1, #0]
 8004d40:	bf08      	it	eq
 8004d42:	694b      	ldreq	r3, [r1, #20]
 8004d44:	600f      	str	r7, [r1, #0]
 8004d46:	bf18      	it	ne
 8004d48:	2300      	movne	r3, #0
 8004d4a:	eba6 0807 	sub.w	r8, r6, r7
 8004d4e:	608b      	str	r3, [r1, #8]
 8004d50:	f1b8 0f00 	cmp.w	r8, #0
 8004d54:	dde9      	ble.n	8004d2a <__sflush_r+0xae>
 8004d56:	6a21      	ldr	r1, [r4, #32]
 8004d58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004d5a:	4643      	mov	r3, r8
 8004d5c:	463a      	mov	r2, r7
 8004d5e:	4628      	mov	r0, r5
 8004d60:	47b0      	blx	r6
 8004d62:	2800      	cmp	r0, #0
 8004d64:	dc08      	bgt.n	8004d78 <__sflush_r+0xfc>
 8004d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d6e:	81a3      	strh	r3, [r4, #12]
 8004d70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d78:	4407      	add	r7, r0
 8004d7a:	eba8 0800 	sub.w	r8, r8, r0
 8004d7e:	e7e7      	b.n	8004d50 <__sflush_r+0xd4>
 8004d80:	dfbffffe 	.word	0xdfbffffe

08004d84 <_fflush_r>:
 8004d84:	b538      	push	{r3, r4, r5, lr}
 8004d86:	690b      	ldr	r3, [r1, #16]
 8004d88:	4605      	mov	r5, r0
 8004d8a:	460c      	mov	r4, r1
 8004d8c:	b913      	cbnz	r3, 8004d94 <_fflush_r+0x10>
 8004d8e:	2500      	movs	r5, #0
 8004d90:	4628      	mov	r0, r5
 8004d92:	bd38      	pop	{r3, r4, r5, pc}
 8004d94:	b118      	cbz	r0, 8004d9e <_fflush_r+0x1a>
 8004d96:	6a03      	ldr	r3, [r0, #32]
 8004d98:	b90b      	cbnz	r3, 8004d9e <_fflush_r+0x1a>
 8004d9a:	f7ff fa97 	bl	80042cc <__sinit>
 8004d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0f3      	beq.n	8004d8e <_fflush_r+0xa>
 8004da6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004da8:	07d0      	lsls	r0, r2, #31
 8004daa:	d404      	bmi.n	8004db6 <_fflush_r+0x32>
 8004dac:	0599      	lsls	r1, r3, #22
 8004dae:	d402      	bmi.n	8004db6 <_fflush_r+0x32>
 8004db0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004db2:	f7ff fb8a 	bl	80044ca <__retarget_lock_acquire_recursive>
 8004db6:	4628      	mov	r0, r5
 8004db8:	4621      	mov	r1, r4
 8004dba:	f7ff ff5f 	bl	8004c7c <__sflush_r>
 8004dbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004dc0:	07da      	lsls	r2, r3, #31
 8004dc2:	4605      	mov	r5, r0
 8004dc4:	d4e4      	bmi.n	8004d90 <_fflush_r+0xc>
 8004dc6:	89a3      	ldrh	r3, [r4, #12]
 8004dc8:	059b      	lsls	r3, r3, #22
 8004dca:	d4e1      	bmi.n	8004d90 <_fflush_r+0xc>
 8004dcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004dce:	f7ff fb7d 	bl	80044cc <__retarget_lock_release_recursive>
 8004dd2:	e7dd      	b.n	8004d90 <_fflush_r+0xc>

08004dd4 <__swbuf_r>:
 8004dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd6:	460e      	mov	r6, r1
 8004dd8:	4614      	mov	r4, r2
 8004dda:	4605      	mov	r5, r0
 8004ddc:	b118      	cbz	r0, 8004de6 <__swbuf_r+0x12>
 8004dde:	6a03      	ldr	r3, [r0, #32]
 8004de0:	b90b      	cbnz	r3, 8004de6 <__swbuf_r+0x12>
 8004de2:	f7ff fa73 	bl	80042cc <__sinit>
 8004de6:	69a3      	ldr	r3, [r4, #24]
 8004de8:	60a3      	str	r3, [r4, #8]
 8004dea:	89a3      	ldrh	r3, [r4, #12]
 8004dec:	071a      	lsls	r2, r3, #28
 8004dee:	d501      	bpl.n	8004df4 <__swbuf_r+0x20>
 8004df0:	6923      	ldr	r3, [r4, #16]
 8004df2:	b943      	cbnz	r3, 8004e06 <__swbuf_r+0x32>
 8004df4:	4621      	mov	r1, r4
 8004df6:	4628      	mov	r0, r5
 8004df8:	f000 f82a 	bl	8004e50 <__swsetup_r>
 8004dfc:	b118      	cbz	r0, 8004e06 <__swbuf_r+0x32>
 8004dfe:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004e02:	4638      	mov	r0, r7
 8004e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	6922      	ldr	r2, [r4, #16]
 8004e0a:	1a98      	subs	r0, r3, r2
 8004e0c:	6963      	ldr	r3, [r4, #20]
 8004e0e:	b2f6      	uxtb	r6, r6
 8004e10:	4283      	cmp	r3, r0
 8004e12:	4637      	mov	r7, r6
 8004e14:	dc05      	bgt.n	8004e22 <__swbuf_r+0x4e>
 8004e16:	4621      	mov	r1, r4
 8004e18:	4628      	mov	r0, r5
 8004e1a:	f7ff ffb3 	bl	8004d84 <_fflush_r>
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	d1ed      	bne.n	8004dfe <__swbuf_r+0x2a>
 8004e22:	68a3      	ldr	r3, [r4, #8]
 8004e24:	3b01      	subs	r3, #1
 8004e26:	60a3      	str	r3, [r4, #8]
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	6022      	str	r2, [r4, #0]
 8004e2e:	701e      	strb	r6, [r3, #0]
 8004e30:	6962      	ldr	r2, [r4, #20]
 8004e32:	1c43      	adds	r3, r0, #1
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d004      	beq.n	8004e42 <__swbuf_r+0x6e>
 8004e38:	89a3      	ldrh	r3, [r4, #12]
 8004e3a:	07db      	lsls	r3, r3, #31
 8004e3c:	d5e1      	bpl.n	8004e02 <__swbuf_r+0x2e>
 8004e3e:	2e0a      	cmp	r6, #10
 8004e40:	d1df      	bne.n	8004e02 <__swbuf_r+0x2e>
 8004e42:	4621      	mov	r1, r4
 8004e44:	4628      	mov	r0, r5
 8004e46:	f7ff ff9d 	bl	8004d84 <_fflush_r>
 8004e4a:	2800      	cmp	r0, #0
 8004e4c:	d0d9      	beq.n	8004e02 <__swbuf_r+0x2e>
 8004e4e:	e7d6      	b.n	8004dfe <__swbuf_r+0x2a>

08004e50 <__swsetup_r>:
 8004e50:	b538      	push	{r3, r4, r5, lr}
 8004e52:	4b29      	ldr	r3, [pc, #164]	@ (8004ef8 <__swsetup_r+0xa8>)
 8004e54:	4605      	mov	r5, r0
 8004e56:	6818      	ldr	r0, [r3, #0]
 8004e58:	460c      	mov	r4, r1
 8004e5a:	b118      	cbz	r0, 8004e64 <__swsetup_r+0x14>
 8004e5c:	6a03      	ldr	r3, [r0, #32]
 8004e5e:	b90b      	cbnz	r3, 8004e64 <__swsetup_r+0x14>
 8004e60:	f7ff fa34 	bl	80042cc <__sinit>
 8004e64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e68:	0719      	lsls	r1, r3, #28
 8004e6a:	d422      	bmi.n	8004eb2 <__swsetup_r+0x62>
 8004e6c:	06da      	lsls	r2, r3, #27
 8004e6e:	d407      	bmi.n	8004e80 <__swsetup_r+0x30>
 8004e70:	2209      	movs	r2, #9
 8004e72:	602a      	str	r2, [r5, #0]
 8004e74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e78:	81a3      	strh	r3, [r4, #12]
 8004e7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e7e:	e033      	b.n	8004ee8 <__swsetup_r+0x98>
 8004e80:	0758      	lsls	r0, r3, #29
 8004e82:	d512      	bpl.n	8004eaa <__swsetup_r+0x5a>
 8004e84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e86:	b141      	cbz	r1, 8004e9a <__swsetup_r+0x4a>
 8004e88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e8c:	4299      	cmp	r1, r3
 8004e8e:	d002      	beq.n	8004e96 <__swsetup_r+0x46>
 8004e90:	4628      	mov	r0, r5
 8004e92:	f7ff fb2b 	bl	80044ec <_free_r>
 8004e96:	2300      	movs	r3, #0
 8004e98:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e9a:	89a3      	ldrh	r3, [r4, #12]
 8004e9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004ea0:	81a3      	strh	r3, [r4, #12]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	6063      	str	r3, [r4, #4]
 8004ea6:	6923      	ldr	r3, [r4, #16]
 8004ea8:	6023      	str	r3, [r4, #0]
 8004eaa:	89a3      	ldrh	r3, [r4, #12]
 8004eac:	f043 0308 	orr.w	r3, r3, #8
 8004eb0:	81a3      	strh	r3, [r4, #12]
 8004eb2:	6923      	ldr	r3, [r4, #16]
 8004eb4:	b94b      	cbnz	r3, 8004eca <__swsetup_r+0x7a>
 8004eb6:	89a3      	ldrh	r3, [r4, #12]
 8004eb8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004ebc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ec0:	d003      	beq.n	8004eca <__swsetup_r+0x7a>
 8004ec2:	4621      	mov	r1, r4
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	f000 f84f 	bl	8004f68 <__smakebuf_r>
 8004eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ece:	f013 0201 	ands.w	r2, r3, #1
 8004ed2:	d00a      	beq.n	8004eea <__swsetup_r+0x9a>
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	60a2      	str	r2, [r4, #8]
 8004ed8:	6962      	ldr	r2, [r4, #20]
 8004eda:	4252      	negs	r2, r2
 8004edc:	61a2      	str	r2, [r4, #24]
 8004ede:	6922      	ldr	r2, [r4, #16]
 8004ee0:	b942      	cbnz	r2, 8004ef4 <__swsetup_r+0xa4>
 8004ee2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004ee6:	d1c5      	bne.n	8004e74 <__swsetup_r+0x24>
 8004ee8:	bd38      	pop	{r3, r4, r5, pc}
 8004eea:	0799      	lsls	r1, r3, #30
 8004eec:	bf58      	it	pl
 8004eee:	6962      	ldrpl	r2, [r4, #20]
 8004ef0:	60a2      	str	r2, [r4, #8]
 8004ef2:	e7f4      	b.n	8004ede <__swsetup_r+0x8e>
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	e7f7      	b.n	8004ee8 <__swsetup_r+0x98>
 8004ef8:	20000020 	.word	0x20000020

08004efc <_sbrk_r>:
 8004efc:	b538      	push	{r3, r4, r5, lr}
 8004efe:	4d06      	ldr	r5, [pc, #24]	@ (8004f18 <_sbrk_r+0x1c>)
 8004f00:	2300      	movs	r3, #0
 8004f02:	4604      	mov	r4, r0
 8004f04:	4608      	mov	r0, r1
 8004f06:	602b      	str	r3, [r5, #0]
 8004f08:	f000 f88c 	bl	8005024 <_sbrk>
 8004f0c:	1c43      	adds	r3, r0, #1
 8004f0e:	d102      	bne.n	8004f16 <_sbrk_r+0x1a>
 8004f10:	682b      	ldr	r3, [r5, #0]
 8004f12:	b103      	cbz	r3, 8004f16 <_sbrk_r+0x1a>
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	bd38      	pop	{r3, r4, r5, pc}
 8004f18:	200043bc 	.word	0x200043bc

08004f1c <__swhatbuf_r>:
 8004f1c:	b570      	push	{r4, r5, r6, lr}
 8004f1e:	460c      	mov	r4, r1
 8004f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f24:	2900      	cmp	r1, #0
 8004f26:	b096      	sub	sp, #88	@ 0x58
 8004f28:	4615      	mov	r5, r2
 8004f2a:	461e      	mov	r6, r3
 8004f2c:	da0d      	bge.n	8004f4a <__swhatbuf_r+0x2e>
 8004f2e:	89a3      	ldrh	r3, [r4, #12]
 8004f30:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004f34:	f04f 0100 	mov.w	r1, #0
 8004f38:	bf14      	ite	ne
 8004f3a:	2340      	movne	r3, #64	@ 0x40
 8004f3c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004f40:	2000      	movs	r0, #0
 8004f42:	6031      	str	r1, [r6, #0]
 8004f44:	602b      	str	r3, [r5, #0]
 8004f46:	b016      	add	sp, #88	@ 0x58
 8004f48:	bd70      	pop	{r4, r5, r6, pc}
 8004f4a:	466a      	mov	r2, sp
 8004f4c:	f000 f848 	bl	8004fe0 <_fstat_r>
 8004f50:	2800      	cmp	r0, #0
 8004f52:	dbec      	blt.n	8004f2e <__swhatbuf_r+0x12>
 8004f54:	9901      	ldr	r1, [sp, #4]
 8004f56:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004f5a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004f5e:	4259      	negs	r1, r3
 8004f60:	4159      	adcs	r1, r3
 8004f62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f66:	e7eb      	b.n	8004f40 <__swhatbuf_r+0x24>

08004f68 <__smakebuf_r>:
 8004f68:	898b      	ldrh	r3, [r1, #12]
 8004f6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f6c:	079d      	lsls	r5, r3, #30
 8004f6e:	4606      	mov	r6, r0
 8004f70:	460c      	mov	r4, r1
 8004f72:	d507      	bpl.n	8004f84 <__smakebuf_r+0x1c>
 8004f74:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004f78:	6023      	str	r3, [r4, #0]
 8004f7a:	6123      	str	r3, [r4, #16]
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	6163      	str	r3, [r4, #20]
 8004f80:	b003      	add	sp, #12
 8004f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f84:	ab01      	add	r3, sp, #4
 8004f86:	466a      	mov	r2, sp
 8004f88:	f7ff ffc8 	bl	8004f1c <__swhatbuf_r>
 8004f8c:	9f00      	ldr	r7, [sp, #0]
 8004f8e:	4605      	mov	r5, r0
 8004f90:	4639      	mov	r1, r7
 8004f92:	4630      	mov	r0, r6
 8004f94:	f7ff fb16 	bl	80045c4 <_malloc_r>
 8004f98:	b948      	cbnz	r0, 8004fae <__smakebuf_r+0x46>
 8004f9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f9e:	059a      	lsls	r2, r3, #22
 8004fa0:	d4ee      	bmi.n	8004f80 <__smakebuf_r+0x18>
 8004fa2:	f023 0303 	bic.w	r3, r3, #3
 8004fa6:	f043 0302 	orr.w	r3, r3, #2
 8004faa:	81a3      	strh	r3, [r4, #12]
 8004fac:	e7e2      	b.n	8004f74 <__smakebuf_r+0xc>
 8004fae:	89a3      	ldrh	r3, [r4, #12]
 8004fb0:	6020      	str	r0, [r4, #0]
 8004fb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fb6:	81a3      	strh	r3, [r4, #12]
 8004fb8:	9b01      	ldr	r3, [sp, #4]
 8004fba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004fbe:	b15b      	cbz	r3, 8004fd8 <__smakebuf_r+0x70>
 8004fc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fc4:	4630      	mov	r0, r6
 8004fc6:	f000 f81d 	bl	8005004 <_isatty_r>
 8004fca:	b128      	cbz	r0, 8004fd8 <__smakebuf_r+0x70>
 8004fcc:	89a3      	ldrh	r3, [r4, #12]
 8004fce:	f023 0303 	bic.w	r3, r3, #3
 8004fd2:	f043 0301 	orr.w	r3, r3, #1
 8004fd6:	81a3      	strh	r3, [r4, #12]
 8004fd8:	89a3      	ldrh	r3, [r4, #12]
 8004fda:	431d      	orrs	r5, r3
 8004fdc:	81a5      	strh	r5, [r4, #12]
 8004fde:	e7cf      	b.n	8004f80 <__smakebuf_r+0x18>

08004fe0 <_fstat_r>:
 8004fe0:	b538      	push	{r3, r4, r5, lr}
 8004fe2:	4d07      	ldr	r5, [pc, #28]	@ (8005000 <_fstat_r+0x20>)
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	4604      	mov	r4, r0
 8004fe8:	4608      	mov	r0, r1
 8004fea:	4611      	mov	r1, r2
 8004fec:	602b      	str	r3, [r5, #0]
 8004fee:	f7fb fcf4 	bl	80009da <_fstat>
 8004ff2:	1c43      	adds	r3, r0, #1
 8004ff4:	d102      	bne.n	8004ffc <_fstat_r+0x1c>
 8004ff6:	682b      	ldr	r3, [r5, #0]
 8004ff8:	b103      	cbz	r3, 8004ffc <_fstat_r+0x1c>
 8004ffa:	6023      	str	r3, [r4, #0]
 8004ffc:	bd38      	pop	{r3, r4, r5, pc}
 8004ffe:	bf00      	nop
 8005000:	200043bc 	.word	0x200043bc

08005004 <_isatty_r>:
 8005004:	b538      	push	{r3, r4, r5, lr}
 8005006:	4d06      	ldr	r5, [pc, #24]	@ (8005020 <_isatty_r+0x1c>)
 8005008:	2300      	movs	r3, #0
 800500a:	4604      	mov	r4, r0
 800500c:	4608      	mov	r0, r1
 800500e:	602b      	str	r3, [r5, #0]
 8005010:	f7fb fcf3 	bl	80009fa <_isatty>
 8005014:	1c43      	adds	r3, r0, #1
 8005016:	d102      	bne.n	800501e <_isatty_r+0x1a>
 8005018:	682b      	ldr	r3, [r5, #0]
 800501a:	b103      	cbz	r3, 800501e <_isatty_r+0x1a>
 800501c:	6023      	str	r3, [r4, #0]
 800501e:	bd38      	pop	{r3, r4, r5, pc}
 8005020:	200043bc 	.word	0x200043bc

08005024 <_sbrk>:
 8005024:	4a04      	ldr	r2, [pc, #16]	@ (8005038 <_sbrk+0x14>)
 8005026:	6811      	ldr	r1, [r2, #0]
 8005028:	4603      	mov	r3, r0
 800502a:	b909      	cbnz	r1, 8005030 <_sbrk+0xc>
 800502c:	4903      	ldr	r1, [pc, #12]	@ (800503c <_sbrk+0x18>)
 800502e:	6011      	str	r1, [r2, #0]
 8005030:	6810      	ldr	r0, [r2, #0]
 8005032:	4403      	add	r3, r0
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	4770      	bx	lr
 8005038:	200043cc 	.word	0x200043cc
 800503c:	200043d0 	.word	0x200043d0

08005040 <_init>:
 8005040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005042:	bf00      	nop
 8005044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005046:	bc08      	pop	{r3}
 8005048:	469e      	mov	lr, r3
 800504a:	4770      	bx	lr

0800504c <_fini>:
 800504c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504e:	bf00      	nop
 8005050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005052:	bc08      	pop	{r3}
 8005054:	469e      	mov	lr, r3
 8005056:	4770      	bx	lr
